[
  {
    "objectID": "docstrings/medyan.num_directions-89697a0fca8de12f.html",
    "href": "docstrings/medyan.num_directions-89697a0fca8de12f.html",
    "title": "MEDYAN.num_directions",
    "section": "",
    "text": "num_directions(::Union{Place, Type{&lt;:Place}})::Int\nReturn the number of directions associated with a place."
  },
  {
    "objectID": "docstrings/medyan.num_directions-89697a0fca8de12f.html#tuple-type-medyan.filatipidx---8171ee85c8e9c62d",
    "href": "docstrings/medyan.num_directions-89697a0fca8de12f.html#tuple-type-medyan.filatipidx---8171ee85c8e9c62d",
    "title": "MEDYAN.num_directions",
    "section": "",
    "text": "num_directions(::Union{Place, Type{&lt;:Place}})::Int\nReturn the number of directions associated with a place."
  },
  {
    "objectID": "docstrings/medyan.pick_rand_fila_mono_site-6641f66ed8873af1.html",
    "href": "docstrings/medyan.pick_rand_fila_mono_site-6641f66ed8873af1.html",
    "title": "MEDYAN.pick_rand_fila_mono_site",
    "section": "",
    "text": "pick_rand_fila_mono_site(c::Context, chem_voxel, fila_typeid, fsid)::Union{FilaMonoIdx, Nothing}\nReturn a FilaMonoIdx of a random filamonosite, or return nothing if rejected weighted by counts, using the default RNG."
  },
  {
    "objectID": "docstrings/medyan.pick_rand_fila_mono_site-6641f66ed8873af1.html#tuple-medyan.context--any--any--any--3e36a14adf838425",
    "href": "docstrings/medyan.pick_rand_fila_mono_site-6641f66ed8873af1.html#tuple-medyan.context--any--any--any--3e36a14adf838425",
    "title": "MEDYAN.pick_rand_fila_mono_site",
    "section": "",
    "text": "pick_rand_fila_mono_site(c::Context, chem_voxel, fila_typeid, fsid)::Union{FilaMonoIdx, Nothing}\nReturn a FilaMonoIdx of a random filamonosite, or return nothing if rejected weighted by counts, using the default RNG."
  },
  {
    "objectID": "docstrings/medyan.sever_fila--161c869bc5d06d6a.html",
    "href": "docstrings/medyan.sever_fila--161c869bc5d06d6a.html",
    "title": "MEDYAN.sever_fila!",
    "section": "",
    "text": "sever_fila!(c::Context, place::FilaMonoIdx)::Tag{FilaTipIdx}\nReturn the tag of the new filament plus end.\nThe split will happen between place and the monomer slightly towards the minus end.\nThe split cannot create a filament with less than 2 monomers."
  },
  {
    "objectID": "docstrings/medyan.sever_fila--161c869bc5d06d6a.html#tuple-medyan.context--medyan.filamonoidx--be3f97f8041f5bf1",
    "href": "docstrings/medyan.sever_fila--161c869bc5d06d6a.html#tuple-medyan.context--medyan.filamonoidx--be3f97f8041f5bf1",
    "title": "MEDYAN.sever_fila!",
    "section": "",
    "text": "sever_fila!(c::Context, place::FilaMonoIdx)::Tag{FilaTipIdx}\nReturn the tag of the new filament plus end.\nThe split will happen between place and the monomer slightly towards the minus end.\nThe split cannot create a filament with less than 2 monomers."
  },
  {
    "objectID": "docstrings/medyan.fila_mono_states-bf83d6c80fc4d691.html",
    "href": "docstrings/medyan.fila_mono_states-bf83d6c80fc4d691.html",
    "title": "MEDYAN.fila_mono_states",
    "section": "",
    "text": "fila_mono_states(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Vector{UInt8}\nReturn a read only Vector of monomer states on a filament.\nThis can be invalid after any mutations to context, so copy if needed."
  },
  {
    "objectID": "docstrings/medyan.fila_mono_states-bf83d6c80fc4d691.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "href": "docstrings/medyan.fila_mono_states-bf83d6c80fc4d691.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "title": "MEDYAN.fila_mono_states",
    "section": "",
    "text": "fila_mono_states(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Vector{UInt8}\nReturn a read only Vector of monomer states on a filament.\nThis can be invalid after any mutations to context, so copy if needed."
  },
  {
    "objectID": "docstrings/medyan.chem_adddiffusingcount--2264be341b81a600.html",
    "href": "docstrings/medyan.chem_adddiffusingcount--2264be341b81a600.html",
    "title": "MEDYAN.chem_adddiffusingcount!",
    "section": "",
    "text": "chem_adddiffusingcount!(c::Context, sid, cid, inccount)\nAdd inccount to diffusing species id sid in compartment id cid"
  },
  {
    "objectID": "docstrings/medyan.chem_adddiffusingcount--2264be341b81a600.html#tuple-medyan.context--any--any--any--3e36a14adf838425",
    "href": "docstrings/medyan.chem_adddiffusingcount--2264be341b81a600.html#tuple-medyan.context--any--any--any--3e36a14adf838425",
    "title": "MEDYAN.chem_adddiffusingcount!",
    "section": "",
    "text": "chem_adddiffusingcount!(c::Context, sid, cid, inccount)\nAdd inccount to diffusing species id sid in compartment id cid"
  },
  {
    "objectID": "docstrings/medyan.chem_addfixedcount--0286edfebf8ea5e6.html",
    "href": "docstrings/medyan.chem_addfixedcount--0286edfebf8ea5e6.html",
    "title": "MEDYAN.chem_addfixedcount!",
    "section": "",
    "text": "chem_addfixedcount!(c::Context, sid, cid, inccount)\nAdd inccount to fixed species id sid in compartment id cid"
  },
  {
    "objectID": "docstrings/medyan.chem_addfixedcount--0286edfebf8ea5e6.html#tuple-medyan.context--any--any--any--3e36a14adf838425",
    "href": "docstrings/medyan.chem_addfixedcount--0286edfebf8ea5e6.html#tuple-medyan.context--any--any--any--3e36a14adf838425",
    "title": "MEDYAN.chem_addfixedcount!",
    "section": "",
    "text": "chem_addfixedcount!(c::Context, sid, cid, inccount)\nAdd inccount to fixed species id sid in compartment id cid"
  },
  {
    "objectID": "docstrings/medyan.boundary_cylinder-33a45da15f9672d3.html",
    "href": "docstrings/medyan.boundary_cylinder-33a45da15f9672d3.html",
    "title": "MEDYAN.boundary_cylinder",
    "section": "",
    "text": "boundary_cylinder(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a cylinder boundary.\ncenter(nm): The center of the cylinder.\naxis(nm): The direction and length of the cylinder. The spine line segment goes from center - axis/2 to center + axis/2 the full length of the cylinder is norm(axis).\nradius(nm): Radius of cylinder.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.boundary_cylinder-33a45da15f9672d3.html#tuple---3937a4f1811c9dc1",
    "href": "docstrings/medyan.boundary_cylinder-33a45da15f9672d3.html#tuple---3937a4f1811c9dc1",
    "title": "MEDYAN.boundary_cylinder",
    "section": "",
    "text": "boundary_cylinder(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a cylinder boundary.\ncenter(nm): The center of the cylinder.\naxis(nm): The direction and length of the cylinder. The spine line segment goes from center - axis/2 to center + axis/2 the full length of the cylinder is norm(axis).\nradius(nm): Radius of cylinder.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.vertexstate-450b7005d2acebe8.html",
    "href": "docstrings/medyan.vertexstate-450b7005d2acebe8.html",
    "title": "MEDYAN.VertexState",
    "section": "",
    "text": "Possible Cadherin Site: one end fixed on vertex, other end on filament. For fend within max to min range are linkable. If they have matching state with vertexstate and monomerstate."
  },
  {
    "objectID": "docstrings/medyan.vertexstate-450b7005d2acebe8.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.vertexstate-450b7005d2acebe8.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.VertexState",
    "section": "",
    "text": "Possible Cadherin Site: one end fixed on vertex, other end on filament. For fend within max to min range are linkable. If they have matching state with vertexstate and monomerstate."
  },
  {
    "objectID": "docstrings/medyan.place2links-0b74317627f4b920.html",
    "href": "docstrings/medyan.place2links-0b74317627f4b920.html",
    "title": "MEDYAN.place2links",
    "section": "",
    "text": "place2links(c::Context, p::Place) -&gt; Link iterator\nReturn an iterator of Links attached to p. If !place_exists(c, p) return an empty iterator."
  },
  {
    "objectID": "docstrings/medyan.place2links-0b74317627f4b920.html#tuple-medyan.context--medyan.place--5f4876ae276f10cb",
    "href": "docstrings/medyan.place2links-0b74317627f4b920.html#tuple-medyan.context--medyan.place--5f4876ae276f10cb",
    "title": "MEDYAN.place2links",
    "section": "",
    "text": "place2links(c::Context, p::Place) -&gt; Link iterator\nReturn an iterator of Links attached to p. If !place_exists(c, p) return an empty iterator."
  },
  {
    "objectID": "docstrings/medyan.is_minimized-ff3858ada5447c46.html",
    "href": "docstrings/medyan.is_minimized-ff3858ada5447c46.html",
    "title": "MEDYAN.is_minimized",
    "section": "",
    "text": "is_minimized(c::Context, link::Link, [d::LinkData])::Bool\nReturn the is_minimized flag of the link. Throw an error if link doesn’t exist.\n\n\n\n\n\n\n\n\n\n\n\n\nis_minimized(c::Context, p::Union{FilaMonoIdx, FilaTipIdx, Tag})::Bool\nReturn true iff the monomer or tip has been minimized. Throw an error if p doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.is_minimized-ff3858ada5447c46.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--any---03b671600f22589f",
    "href": "docstrings/medyan.is_minimized-ff3858ada5447c46.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--any---03b671600f22589f",
    "title": "MEDYAN.is_minimized",
    "section": "",
    "text": "is_minimized(c::Context, link::Link, [d::LinkData])::Bool\nReturn the is_minimized flag of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.is_minimized-ff3858ada5447c46.html#tuple-medyan.context--medyan.filamonoidx--be3f97f8041f5bf1",
    "href": "docstrings/medyan.is_minimized-ff3858ada5447c46.html#tuple-medyan.context--medyan.filamonoidx--be3f97f8041f5bf1",
    "title": "MEDYAN.is_minimized",
    "section": "",
    "text": "is_minimized(c::Context, p::Union{FilaMonoIdx, FilaTipIdx, Tag})::Bool\nReturn true iff the monomer or tip has been minimized. Throw an error if p doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.load_snapshot--e534be293ce74465.html",
    "href": "docstrings/medyan.load_snapshot--e534be293ce74465.html",
    "title": "MEDYAN.load_snapshot!",
    "section": "",
    "text": "load_snapshot!(c::Context,group::ZGroup)\nEmpty the context and load the state saved in the snapshot group.\nc should be constructed with the same SysDef and parameters as the Context used to create the snapshot. Trying to load a snapshot into a Context constructed with a different system or parameters may lead to unexpected results.\nSee Snapshot group for more details."
  },
  {
    "objectID": "docstrings/medyan.load_snapshot--e534be293ce74465.html#tuple-medyan.context--smallzarrgroups.zgroup--a98412e602b7637b",
    "href": "docstrings/medyan.load_snapshot--e534be293ce74465.html#tuple-medyan.context--smallzarrgroups.zgroup--a98412e602b7637b",
    "title": "MEDYAN.load_snapshot!",
    "section": "",
    "text": "load_snapshot!(c::Context,group::ZGroup)\nEmpty the context and load the state saved in the snapshot group.\nc should be constructed with the same SysDef and parameters as the Context used to create the snapshot. Trying to load a snapshot into a Context constructed with a different system or parameters may lead to unexpected results.\nSee Snapshot group for more details."
  },
  {
    "objectID": "docstrings/medyan.set_mechboundary--b5e26b6b690256aa.html",
    "href": "docstrings/medyan.set_mechboundary--b5e26b6b690256aa.html",
    "title": "MEDYAN.set_mechboundary!",
    "section": "",
    "text": "set_mechboundary!(\n    c::MEDYAN.Context;\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSee also Boundary"
  },
  {
    "objectID": "docstrings/medyan.set_mechboundary--b5e26b6b690256aa.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.set_mechboundary--b5e26b6b690256aa.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.set_mechboundary!",
    "section": "",
    "text": "set_mechboundary!(\n    c::MEDYAN.Context;\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSee also Boundary"
  },
  {
    "objectID": "docstrings/medyan.boundary_plane-2caa9b52b3b3f0cc.html",
    "href": "docstrings/medyan.boundary_plane-2caa9b52b3b3f0cc.html",
    "title": "MEDYAN.boundary_plane",
    "section": "",
    "text": "boundary_plane(\n;\n    normal,\n    point,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a plane boundary.\nnormal(unit vector): Vector pointing normal to the plane. This points outside of the boundary.\npoint(nm): Point on the plane.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.boundary_plane-2caa9b52b3b3f0cc.html#tuple---3937a4f1811c9dc1",
    "href": "docstrings/medyan.boundary_plane-2caa9b52b3b3f0cc.html#tuple---3937a4f1811c9dc1",
    "title": "MEDYAN.boundary_plane",
    "section": "",
    "text": "boundary_plane(\n;\n    normal,\n    point,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a plane boundary.\nnormal(unit vector): Vector pointing normal to the plane. This points outside of the boundary.\npoint(nm): Point on the plane.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.make_fila--f2346a40b4792de5.html",
    "href": "docstrings/medyan.make_fila--f2346a40b4792de5.html",
    "title": "MEDYAN.make_fila!",
    "section": "",
    "text": "make_fila!(c::Context;\n    type=1,\n    mono_states,\n    node_mids,\n    node_positions,\n)::Tag{FilaTipIdx}\nReturn the tag of the plus tip of the new filament. Error if the filament isn’t initially over 2 monomers long. Newly added filaments can’t be selected from nearby monomers until after minimization.\n\n\n\ntype=1: filament type id or symbol.\nmono_states: Collection of the MonomerState of the monomers in the new filament. In order from minus end to plus end. length(mono_states)&gt;1\nnode_positions: Collection of SVector{3,Float64}. The positions of the nodes, monomers are between nodes.\nnode_mids: Collection of Integer. The monomer ids at (slightly plus side of) the node_positions | ––-+––-|––-+––- minus end &lt;–– M | M | (M) | M ––&gt; plus end ––-+––-|––-+––- | ^ A node_position is indicated by the line.\nThe monomer id with parenthesis (M) will in node_mids length(node_mids) == length(node_positions) - 1\ntip_load_forces=(0.0=&gt;0.0): tip load forces, usually don’t use this, because load forces will automatically get updated at the next minimization."
  },
  {
    "objectID": "docstrings/medyan.make_fila--f2346a40b4792de5.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.make_fila--f2346a40b4792de5.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.make_fila!",
    "section": "",
    "text": "make_fila!(c::Context;\n    type=1,\n    mono_states,\n    node_mids,\n    node_positions,\n)::Tag{FilaTipIdx}\nReturn the tag of the plus tip of the new filament. Error if the filament isn’t initially over 2 monomers long. Newly added filaments can’t be selected from nearby monomers until after minimization.\n\n\n\ntype=1: filament type id or symbol.\nmono_states: Collection of the MonomerState of the monomers in the new filament. In order from minus end to plus end. length(mono_states)&gt;1\nnode_positions: Collection of SVector{3,Float64}. The positions of the nodes, monomers are between nodes.\nnode_mids: Collection of Integer. The monomer ids at (slightly plus side of) the node_positions | ––-+––-|––-+––- minus end &lt;–– M | M | (M) | M ––&gt; plus end ––-+––-|––-+––- | ^ A node_position is indicated by the line.\nThe monomer id with parenthesis (M) will in node_mids length(node_mids) == length(node_positions) - 1\ntip_load_forces=(0.0=&gt;0.0): tip load forces, usually don’t use this, because load forces will automatically get updated at the next minimization."
  },
  {
    "objectID": "docstrings/medyan.update_link--67d413cca6fe82eb.html",
    "href": "docstrings/medyan.update_link--67d413cca6fe82eb.html",
    "title": "MEDYAN.update_link!",
    "section": "",
    "text": "update_link!(c::Context, link::Link; kwargs...)::Nothing\nUpdate the link.\n\n\n\nplaces=(): places or tags to attach to the link.\nSet an element to nothing not change the attached place. Set an element to a null place or tag to detach that place.\nstate=(;): state properties to change.\nA NamedTuple of changes. For example, state = (;k1 = 3.6, k7 = 2.0,) to change state.k1 to 3.6 and state.k7 to 2.0.\nbond_states=(): bond state properties to change.\nA Tuple of changes. If an element in the tuple is nothing, the corresponding bond state isn’t changed. For example, bond_states = (nothing, (;L0 = 3.6,)) to change bond_states[2].L0 to 3.6.\nbond_enabled=(): bond enable flags to change.\nA Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding bond enable flag isn't changed. For example,bond_enabled = (nothing, true, false)` to not change bond 1, enable bond 2, and disable bond 3.\nreaction_enabled=(): reaction enable flags to change.\nA Tuple of Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding reaction enable flag or flags aren't changed. For example,reaction_enabled = (nothing, (true, nothing, false))` to not change any reactions on place 1, enable reaction 1 on place 2, and disable reaction 3 on place 2.\nis_minimized::Bool=false: is the link marked as minimized.\nBy default links are marked as minimized at the end of mechanics when updated."
  },
  {
    "objectID": "docstrings/medyan.update_link--67d413cca6fe82eb.html#tuple-medyan.context--medyan.link--d37b229d2ebf6962",
    "href": "docstrings/medyan.update_link--67d413cca6fe82eb.html#tuple-medyan.context--medyan.link--d37b229d2ebf6962",
    "title": "MEDYAN.update_link!",
    "section": "",
    "text": "update_link!(c::Context, link::Link; kwargs...)::Nothing\nUpdate the link.\n\n\n\nplaces=(): places or tags to attach to the link.\nSet an element to nothing not change the attached place. Set an element to a null place or tag to detach that place.\nstate=(;): state properties to change.\nA NamedTuple of changes. For example, state = (;k1 = 3.6, k7 = 2.0,) to change state.k1 to 3.6 and state.k7 to 2.0.\nbond_states=(): bond state properties to change.\nA Tuple of changes. If an element in the tuple is nothing, the corresponding bond state isn’t changed. For example, bond_states = (nothing, (;L0 = 3.6,)) to change bond_states[2].L0 to 3.6.\nbond_enabled=(): bond enable flags to change.\nA Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding bond enable flag isn't changed. For example,bond_enabled = (nothing, true, false)` to not change bond 1, enable bond 2, and disable bond 3.\nreaction_enabled=(): reaction enable flags to change.\nA Tuple of Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding reaction enable flag or flags aren't changed. For example,reaction_enabled = (nothing, (true, nothing, false))` to not change any reactions on place 1, enable reaction 1 on place 2, and disable reaction 3 on place 2.\nis_minimized::Bool=false: is the link marked as minimized.\nBy default links are marked as minimized at the end of mechanics when updated."
  },
  {
    "objectID": "docstrings/medyan.resolve_all_filament_mesh_crossing--a8be83a7d2ad65c7.html",
    "href": "docstrings/medyan.resolve_all_filament_mesh_crossing--a8be83a7d2ad65c7.html",
    "title": "MEDYAN.resolve_all_filament_mesh_crossing!",
    "section": "",
    "text": "Given an AABB tree corresponding to up-to-date membrane mesh triangles, resolve all filament-membrane intersections.\nRequires\n\nup-to-date unit normals of all triangles in the meshes.\nup-to-date AABB tree corresponding to all membrane meshes."
  },
  {
    "objectID": "docstrings/medyan.resolve_all_filament_mesh_crossing--a8be83a7d2ad65c7.html#tuple-medyan.context--medyan.binaryaabbtree--169a754d8e383ec5",
    "href": "docstrings/medyan.resolve_all_filament_mesh_crossing--a8be83a7d2ad65c7.html#tuple-medyan.context--medyan.binaryaabbtree--169a754d8e383ec5",
    "title": "MEDYAN.resolve_all_filament_mesh_crossing!",
    "section": "",
    "text": "Given an AABB tree corresponding to up-to-date membrane mesh triangles, resolve all filament-membrane intersections.\nRequires\n\nup-to-date unit normals of all triangles in the meshes.\nup-to-date AABB tree corresponding to all membrane meshes."
  },
  {
    "objectID": "docstrings/medyan.add_diffusion_coeff--a77d1ef833cfdedd.html",
    "href": "docstrings/medyan.add_diffusion_coeff--a77d1ef833cfdedd.html",
    "title": "MEDYAN.add_diffusion_coeff!",
    "section": "",
    "text": "add_diffusion_coeff!(s::SysDef, diffusing_name::Symbol, diffusing_coeff::Float64)\nAdd the diffusing species to the system with diffusion coefficent in units of (nm²/s). Return s."
  },
  {
    "objectID": "docstrings/medyan.add_diffusion_coeff--a77d1ef833cfdedd.html#tuple-medyan.sysdef--symbol--float64--936450f65416538e",
    "href": "docstrings/medyan.add_diffusion_coeff--a77d1ef833cfdedd.html#tuple-medyan.sysdef--symbol--float64--936450f65416538e",
    "title": "MEDYAN.add_diffusion_coeff!",
    "section": "",
    "text": "add_diffusion_coeff!(s::SysDef, diffusing_name::Symbol, diffusing_coeff::Float64)\nAdd the diffusing species to the system with diffusion coefficent in units of (nm²/s). Return s."
  },
  {
    "objectID": "docstrings/base.getindex-f593dde852851bc8.html",
    "href": "docstrings/base.getindex-f593dde852851bc8.html",
    "title": "Base.getindex",
    "section": "",
    "text": "Get index at ID."
  },
  {
    "objectID": "docstrings/base.getindex-f593dde852851bc8.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "href": "docstrings/base.getindex-f593dde852851bc8.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "title": "Base.getindex",
    "section": "",
    "text": "Get index at ID."
  },
  {
    "objectID": "docstrings/medyan.boundary_capsule-1700142f310bd9db.html",
    "href": "docstrings/medyan.boundary_capsule-1700142f310bd9db.html",
    "title": "MEDYAN.boundary_capsule",
    "section": "",
    "text": "boundary_capsule(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a capsule boundary.\ncenter(nm): The center of the capsule.\naxis(nm): The direction and length of the capsule spine. The spine line segment goes from center - axis/2 to center + axis/2 If zero the capsule is a sphere.\nradius(nm): Radius of capsule, the full length of the capsule is norm(axis) + 2radius.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.boundary_capsule-1700142f310bd9db.html#tuple---3937a4f1811c9dc1",
    "href": "docstrings/medyan.boundary_capsule-1700142f310bd9db.html#tuple---3937a4f1811c9dc1",
    "title": "MEDYAN.boundary_capsule",
    "section": "",
    "text": "boundary_capsule(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a capsule boundary.\ncenter(nm): The center of the capsule.\naxis(nm): The direction and length of the capsule spine. The spine line segment goes from center - axis/2 to center + axis/2 If zero the capsule is a sphere.\nradius(nm): Radius of capsule, the full length of the capsule is norm(axis) + 2radius.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/base.delete--56ef520341df3c06.html",
    "href": "docstrings/base.delete--56ef520341df3c06.html",
    "title": "Base.delete!",
    "section": "",
    "text": "Remove a recorded index at ID."
  },
  {
    "objectID": "docstrings/base.delete--56ef520341df3c06.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "href": "docstrings/base.delete--56ef520341df3c06.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "title": "Base.delete!",
    "section": "",
    "text": "Remove a recorded index at ID."
  },
  {
    "objectID": "docstrings/medyan.tag--518214eeb95e748e.html",
    "href": "docstrings/medyan.tag--518214eeb95e748e.html",
    "title": "MEDYAN.tag!",
    "section": "",
    "text": "tag!(c::Context, p::Place)::Tag\nReturn the tag of the place. Throw an error if !place_exists(p). Create a new tag if !has_tag(p)."
  },
  {
    "objectID": "docstrings/medyan.tag--518214eeb95e748e.html#union-tuple-p---tuple-medyan.context--p---where-p--medyan.place-316eaf4f0092762b",
    "href": "docstrings/medyan.tag--518214eeb95e748e.html#union-tuple-p---tuple-medyan.context--p---where-p--medyan.place-316eaf4f0092762b",
    "title": "MEDYAN.tag!",
    "section": "",
    "text": "tag!(c::Context, p::Place)::Tag\nReturn the tag of the place. Throw an error if !place_exists(p). Create a new tag if !has_tag(p)."
  },
  {
    "objectID": "docstrings/medyan.fila_mono_ids-946d70c3169126dd.html",
    "href": "docstrings/medyan.fila_mono_ids-946d70c3169126dd.html",
    "title": "MEDYAN.fila_mono_ids",
    "section": "",
    "text": "fila_mono_ids(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; UnitRange{Int64}\nReturn a UnitRange{Int64} of monomer IDs on a filament."
  },
  {
    "objectID": "docstrings/medyan.fila_mono_ids-946d70c3169126dd.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "href": "docstrings/medyan.fila_mono_ids-946d70c3169126dd.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "title": "MEDYAN.fila_mono_ids",
    "section": "",
    "text": "fila_mono_ids(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; UnitRange{Int64}\nReturn a UnitRange{Int64} of monomer IDs on a filament."
  },
  {
    "objectID": "docstrings/medyan.fila_num_nodes-a3efee39b1440945.html",
    "href": "docstrings/medyan.fila_num_nodes-a3efee39b1440945.html",
    "title": "MEDYAN.fila_num_nodes",
    "section": "",
    "text": "fila_num_nodes(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Int64\nReturn the number of mechanical node positions of a filament."
  },
  {
    "objectID": "docstrings/medyan.fila_num_nodes-a3efee39b1440945.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "href": "docstrings/medyan.fila_num_nodes-a3efee39b1440945.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "title": "MEDYAN.fila_num_nodes",
    "section": "",
    "text": "fila_num_nodes(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Int64\nReturn the number of mechanical node positions of a filament."
  },
  {
    "objectID": "docstrings/medyan.get_directions-326e10fbe4341527.html",
    "href": "docstrings/medyan.get_directions-326e10fbe4341527.html",
    "title": "MEDYAN.get_directions",
    "section": "",
    "text": "get_directions(c::Context, x::Union{Tag, Place})::SVector{N, SVector{3, Float64}}\nReturn the directions of x. N is from num_directions. Throw an error if x doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.get_directions-326e10fbe4341527.html#tuple-medyan.context--medyan.tag--fedde092ce150cde",
    "href": "docstrings/medyan.get_directions-326e10fbe4341527.html#tuple-medyan.context--medyan.tag--fedde092ce150cde",
    "title": "MEDYAN.get_directions",
    "section": "",
    "text": "get_directions(c::Context, x::Union{Tag, Place})::SVector{N, SVector{3, Float64}}\nReturn the directions of x. N is from num_directions. Throw an error if x doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.fila_node_mids-35de9fc339cbec42.html",
    "href": "docstrings/medyan.fila_node_mids-35de9fc339cbec42.html",
    "title": "MEDYAN.fila_node_mids",
    "section": "",
    "text": "fila_node_mids(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Vector{Int64}\nReturn the node_mids of the filament.\nThe node_mids are the monomer ids at (slightly plus side of) the node_positions\n                                 |\n                      -----+-----|-----+-----\n  minus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                      -----+-----|-----+-----\n                                 |\n                                 ^ A node position is indicated by the line.\n\nThe monomer id with parenthesis (M) will in `node_mids`\nThe first monomer id is the first monomer id on the filament. The last monomer id is the last monomer id on the filament + 1"
  },
  {
    "objectID": "docstrings/medyan.fila_node_mids-35de9fc339cbec42.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "href": "docstrings/medyan.fila_node_mids-35de9fc339cbec42.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "title": "MEDYAN.fila_node_mids",
    "section": "",
    "text": "fila_node_mids(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Vector{Int64}\nReturn the node_mids of the filament.\nThe node_mids are the monomer ids at (slightly plus side of) the node_positions\n                                 |\n                      -----+-----|-----+-----\n  minus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                      -----+-----|-----+-----\n                                 |\n                                 ^ A node position is indicated by the line.\n\nThe monomer id with parenthesis (M) will in `node_mids`\nThe first monomer id is the first monomer id on the filament. The last monomer id is the last monomer id on the filament + 1"
  },
  {
    "objectID": "docstrings/medyan.place_exists-fcab2f7674b282f4.html",
    "href": "docstrings/medyan.place_exists-fcab2f7674b282f4.html",
    "title": "MEDYAN.place_exists",
    "section": "",
    "text": "place_exists(c::Context, p::Place)::Bool\nReturn true iff place p exists in context c. Otherwise return false."
  },
  {
    "objectID": "docstrings/medyan.place_exists-fcab2f7674b282f4.html#tuple-medyan.context--medyan.filatipidx--d592866d39d8c362",
    "href": "docstrings/medyan.place_exists-fcab2f7674b282f4.html#tuple-medyan.context--medyan.filatipidx--d592866d39d8c362",
    "title": "MEDYAN.place_exists",
    "section": "",
    "text": "place_exists(c::Context, p::Place)::Bool\nReturn true iff place p exists in context c. Otherwise return false."
  },
  {
    "objectID": "docstrings/medyan.decimated2monsiterange-8afd8f3188bbcd4a.html",
    "href": "docstrings/medyan.decimated2monsiterange-8afd8f3188bbcd4a.html",
    "title": "MEDYAN.Decimated2MonSiteRange",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64"
  },
  {
    "objectID": "docstrings/medyan.decimated2monsiterange-8afd8f3188bbcd4a.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.decimated2monsiterange-8afd8f3188bbcd4a.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Decimated2MonSiteRange",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64"
  },
  {
    "objectID": "docstrings/medyan.addmembranesite--892875b2c079002d.html",
    "href": "docstrings/medyan.addmembranesite--892875b2c079002d.html",
    "title": "MEDYAN.addmembranesite!",
    "section": "",
    "text": "addmembranesite!(\n    s::MEDYAN.SysDef,\n    membranesitename::Symbol,\n    site\n) -&gt; MEDYAN.SysDef\nAdd a new site with a specified name. During this process, a new fixed species is created suffixed with “membranesite.”."
  },
  {
    "objectID": "docstrings/medyan.addmembranesite--892875b2c079002d.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "href": "docstrings/medyan.addmembranesite--892875b2c079002d.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "title": "MEDYAN.addmembranesite!",
    "section": "",
    "text": "addmembranesite!(\n    s::MEDYAN.SysDef,\n    membranesitename::Symbol,\n    site\n) -&gt; MEDYAN.SysDef\nAdd a new site with a specified name. During this process, a new fixed species is created suffixed with “membranesite.”."
  },
  {
    "objectID": "docstrings/base.push--8715d52e2302aaeb.html",
    "href": "docstrings/base.push--8715d52e2302aaeb.html",
    "title": "Base.push!",
    "section": "",
    "text": "Add a new index. Returns its ID."
  },
  {
    "objectID": "docstrings/base.push--8715d52e2302aaeb.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "href": "docstrings/base.push--8715d52e2302aaeb.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "title": "Base.push!",
    "section": "",
    "text": "Add a new index. Returns its ID."
  },
  {
    "objectID": "docstrings/medyan.filter_grididat-58a94154d21e32b0.html",
    "href": "docstrings/medyan.filter_grididat-58a94154d21e32b0.html",
    "title": "MEDYAN.filter_grididat",
    "section": "",
    "text": "filter_grididat(f, grid::CubicGrid, location)\nReturn the nearest grid id of location where f(id) evaluates to true. The origin is in the center. errors if there is no id that evaluates to true. Returns a close by voxel if out of the grid."
  },
  {
    "objectID": "docstrings/medyan.filter_grididat-58a94154d21e32b0.html#tuple-any--medyan.cubicgrid--any--68d3cc6d4c523833",
    "href": "docstrings/medyan.filter_grididat-58a94154d21e32b0.html#tuple-any--medyan.cubicgrid--any--68d3cc6d4c523833",
    "title": "MEDYAN.filter_grididat",
    "section": "",
    "text": "filter_grididat(f, grid::CubicGrid, location)\nReturn the nearest grid id of location where f(id) evaluates to true. The origin is in the center. errors if there is no id that evaluates to true. Returns a close by voxel if out of the grid."
  },
  {
    "objectID": "docstrings/medyan.boundary-f1e7be79002a27f8.html",
    "href": "docstrings/medyan.boundary-f1e7be79002a27f8.html",
    "title": "MEDYAN.Boundary",
    "section": "",
    "text": "Mechanical boundary\nSee also boundary_box\n\nplanes::Vector{StaticArraysCore.SVector{4, Float64}}: Planes that make up the mechanical boundary of the simulation.\nE = 1//2 * relu(pos ⋅ planes[bi][1:3] - planes[bi][4])^2\nFor example, a mech bounding plane [1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 1 pN/nm.\n2.0*[1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 4 pN/nm.\ncapsules::Vector{StaticArraysCore.SVector{8, Float64}}: Capsules that make up the mechanical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is the spring constant (pN/nm).\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\nE = 1//2*k*relu(d - r0)^2 where:\n\nd is the distance of the point to the spine line segment described by capsules[bi][1:6].\nr0 is capsules[bi][7]\nk is capsules[bi][8]"
  },
  {
    "objectID": "docstrings/medyan.boundary-f1e7be79002a27f8.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.boundary-f1e7be79002a27f8.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Boundary",
    "section": "",
    "text": "Mechanical boundary\nSee also boundary_box\n\nplanes::Vector{StaticArraysCore.SVector{4, Float64}}: Planes that make up the mechanical boundary of the simulation.\nE = 1//2 * relu(pos ⋅ planes[bi][1:3] - planes[bi][4])^2\nFor example, a mech bounding plane [1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 1 pN/nm.\n2.0*[1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 4 pN/nm.\ncapsules::Vector{StaticArraysCore.SVector{8, Float64}}: Capsules that make up the mechanical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is the spring constant (pN/nm).\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\nE = 1//2*k*relu(d - r0)^2 where:\n\nd is the distance of the point to the spine line segment described by capsules[bi][1:6].\nr0 is capsules[bi][7]\nk is capsules[bi][8]"
  },
  {
    "objectID": "docstrings/medyan.add_filament_params--74c7d0081157ca31.html",
    "href": "docstrings/medyan.add_filament_params--74c7d0081157ca31.html",
    "title": "MEDYAN.add_filament_params!",
    "section": "",
    "text": "add_filament_params!(s::SysDef, filament_name::Symbol, filament_params::FilamentMechParams)\nAdd the filament parameters to the system. Return s.\nSee MEDYAN.FilamentMechParams"
  },
  {
    "objectID": "docstrings/medyan.add_filament_params--74c7d0081157ca31.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "href": "docstrings/medyan.add_filament_params--74c7d0081157ca31.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "title": "MEDYAN.add_filament_params!",
    "section": "",
    "text": "add_filament_params!(s::SysDef, filament_name::Symbol, filament_params::FilamentMechParams)\nAdd the filament parameters to the system. Return s.\nSee MEDYAN.FilamentMechParams"
  },
  {
    "objectID": "docstrings/base.length-7ea31a421de7d258.html",
    "href": "docstrings/base.length-7ea31a421de7d258.html",
    "title": "Base.length",
    "section": "",
    "text": "Total number of IDs in use.\n\n\n\n\n\n\n\n\n\n\n\n\nBase.length(grid::CubicGrid)\nTotal number of compartments in the grid"
  },
  {
    "objectID": "docstrings/base.length-7ea31a421de7d258.html#tuple-medyan.stableindex--aec9c239cf42c0b9",
    "href": "docstrings/base.length-7ea31a421de7d258.html#tuple-medyan.stableindex--aec9c239cf42c0b9",
    "title": "Base.length",
    "section": "",
    "text": "Total number of IDs in use."
  },
  {
    "objectID": "docstrings/base.length-7ea31a421de7d258.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "href": "docstrings/base.length-7ea31a421de7d258.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "title": "Base.length",
    "section": "",
    "text": "Base.length(grid::CubicGrid)\nTotal number of compartments in the grid"
  },
  {
    "objectID": "docstrings/src/minimize_energy.html",
    "href": "docstrings/src/minimize_energy.html",
    "title": "src/minimize_energy.jl",
    "section": "",
    "text": "minimize_energy!(c::Context)::MinimizeEnergyResults\nMinimize mechanical energy of the context.\n\n\n\ncheck_closest_cylinders::Bool=true:\n\nIf true, the function will warn if two cylinders get too close during minimization.\n\nbrownian_motion_time::Float64=Inf: This parameter is used to simulate the effect\n\nof Brownian motion over a certain period of time in seconds. It is currently experimental. By default, the effect of Brownian motion is ignored.\n\ng_tol::Float64=c.g_tol: The acceptable maximum residual force on any degree of freedom in pN.\niter_max::Int=c.iter_max_cg_minimization: The maximum number of congugate gradient iterations to do before exiting."
  },
  {
    "objectID": "docstrings/src/minimize_energy.html#medyan.minimize_energy--84c4aeab5457d3ee",
    "href": "docstrings/src/minimize_energy.html#medyan.minimize_energy--84c4aeab5457d3ee",
    "title": "src/minimize_energy.jl",
    "section": "",
    "text": "minimize_energy!(c::Context)::MinimizeEnergyResults\nMinimize mechanical energy of the context.\n\n\n\ncheck_closest_cylinders::Bool=true:\n\nIf true, the function will warn if two cylinders get too close during minimization.\n\nbrownian_motion_time::Float64=Inf: This parameter is used to simulate the effect\n\nof Brownian motion over a certain period of time in seconds. It is currently experimental. By default, the effect of Brownian motion is ignored.\n\ng_tol::Float64=c.g_tol: The acceptable maximum residual force on any degree of freedom in pN.\niter_max::Int=c.iter_max_cg_minimization: The maximum number of congugate gradient iterations to do before exiting."
  },
  {
    "objectID": "docstrings/src/boundary.html",
    "href": "docstrings/src/boundary.html",
    "title": "src/boundary.jl",
    "section": "",
    "text": "Mechanical boundary\nSee also boundary_box\n\nplanes::Vector{StaticArraysCore.SVector{4, Float64}}: Planes that make up the mechanical boundary of the simulation.\nE = 1//2 * relu(pos ⋅ planes[bi][1:3] - planes[bi][4])^2\nFor example, a mech bounding plane [1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 1 pN/nm.\n2.0*[1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 4 pN/nm.\ncapsules::Vector{StaticArraysCore.SVector{8, Float64}}: Capsules that make up the mechanical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is the spring constant (pN/nm).\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\nE = 1//2*k*relu(d - r0)^2 where:\n\nd is the distance of the point to the spine line segment described by capsules[bi][1:6].\nr0 is capsules[bi][7]\nk is capsules[bi][8]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nboundary_plane(\n;\n    normal,\n    point,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a plane boundary.\nnormal(unit vector): Vector pointing normal to the plane. This points outside of the boundary.\npoint(nm): Point on the plane.\nstiffness(pN/nm): How strong the boundary is.\n\n\n\n\n\n\n\n\n\n\n\n\nboundary_box(\n    grid::MEDYAN.CubicGrid;\n    offset,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a box boundary at the edge of a grid.\noffset(nm): How far the bounding planes should be moved in from the edge of the grid. Positive is inside the grid, negative is outside the grid.\nstiffness(pN/nm): How strong the boundary is.\n\n\n\n\n\n\n\n\n\n\n\n\nboundary_capsule(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a capsule boundary.\ncenter(nm): The center of the capsule.\naxis(nm): The direction and length of the capsule spine. The spine line segment goes from center - axis/2 to center + axis/2 If zero the capsule is a sphere.\nradius(nm): Radius of capsule, the full length of the capsule is norm(axis) + 2radius.\nstiffness(pN/nm): How strong the boundary is.\n\n\n\n\n\n\n\n\n\n\n\n\nboundary_cylinder(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a cylinder boundary.\ncenter(nm): The center of the cylinder.\naxis(nm): The direction and length of the cylinder. The spine line segment goes from center - axis/2 to center + axis/2 the full length of the cylinder is norm(axis).\nradius(nm): Radius of cylinder.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/src/boundary.html#medyan.boundary-f1e7be79002a27f8",
    "href": "docstrings/src/boundary.html#medyan.boundary-f1e7be79002a27f8",
    "title": "src/boundary.jl",
    "section": "",
    "text": "Mechanical boundary\nSee also boundary_box\n\nplanes::Vector{StaticArraysCore.SVector{4, Float64}}: Planes that make up the mechanical boundary of the simulation.\nE = 1//2 * relu(pos ⋅ planes[bi][1:3] - planes[bi][4])^2\nFor example, a mech bounding plane [1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 1 pN/nm.\n2.0*[1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 4 pN/nm.\ncapsules::Vector{StaticArraysCore.SVector{8, Float64}}: Capsules that make up the mechanical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is the spring constant (pN/nm).\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\nE = 1//2*k*relu(d - r0)^2 where:\n\nd is the distance of the point to the spine line segment described by capsules[bi][1:6].\nr0 is capsules[bi][7]\nk is capsules[bi][8]"
  },
  {
    "objectID": "docstrings/src/boundary.html#medyan.boundary_plane-2caa9b52b3b3f0cc",
    "href": "docstrings/src/boundary.html#medyan.boundary_plane-2caa9b52b3b3f0cc",
    "title": "src/boundary.jl",
    "section": "",
    "text": "boundary_plane(\n;\n    normal,\n    point,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a plane boundary.\nnormal(unit vector): Vector pointing normal to the plane. This points outside of the boundary.\npoint(nm): Point on the plane.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/src/boundary.html#medyan.boundary_box-060d4c56df40146a",
    "href": "docstrings/src/boundary.html#medyan.boundary_box-060d4c56df40146a",
    "title": "src/boundary.jl",
    "section": "",
    "text": "boundary_box(\n    grid::MEDYAN.CubicGrid;\n    offset,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a box boundary at the edge of a grid.\noffset(nm): How far the bounding planes should be moved in from the edge of the grid. Positive is inside the grid, negative is outside the grid.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/src/boundary.html#medyan.boundary_capsule-1700142f310bd9db",
    "href": "docstrings/src/boundary.html#medyan.boundary_capsule-1700142f310bd9db",
    "title": "src/boundary.jl",
    "section": "",
    "text": "boundary_capsule(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a capsule boundary.\ncenter(nm): The center of the capsule.\naxis(nm): The direction and length of the capsule spine. The spine line segment goes from center - axis/2 to center + axis/2 If zero the capsule is a sphere.\nradius(nm): Radius of capsule, the full length of the capsule is norm(axis) + 2radius.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/src/boundary.html#medyan.boundary_cylinder-33a45da15f9672d3",
    "href": "docstrings/src/boundary.html#medyan.boundary_cylinder-33a45da15f9672d3",
    "title": "src/boundary.jl",
    "section": "",
    "text": "boundary_cylinder(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a cylinder boundary.\ncenter(nm): The center of the cylinder.\naxis(nm): The direction and length of the cylinder. The spine line segment goes from center - axis/2 to center + axis/2 the full length of the cylinder is norm(axis).\nradius(nm): Radius of cylinder.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/src/cadherins/possiblecadherinsite.html",
    "href": "docstrings/src/cadherins/possiblecadherinsite.html",
    "title": "src/cadherins/possiblecadherinsite.jl",
    "section": "",
    "text": "Possible Cadherin Site: one end fixed on vertex, other end on filament. For fend within max to min range are linkable. If they have matching state with vertexstate and monomerstate."
  },
  {
    "objectID": "docstrings/src/cadherins/possiblecadherinsite.html#medyan.vertexstate-450b7005d2acebe8",
    "href": "docstrings/src/cadherins/possiblecadherinsite.html#medyan.vertexstate-450b7005d2acebe8",
    "title": "src/cadherins/possiblecadherinsite.jl",
    "section": "",
    "text": "Possible Cadherin Site: one end fixed on vertex, other end on filament. For fend within max to min range are linkable. If they have matching state with vertexstate and monomerstate."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html",
    "href": "docstrings/src/util/stableindex.html",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Whether an ID is in use.\n\n\n\n\n\n\n\n\n\n\n\n\nTotal number of IDs in use.\n\n\n\n\n\n\n\n\n\n\n\n\nGet index at ID.\n\n\n\n\n\n\n\n\n\n\n\n\nMap ID to a new index. The ID must be in use.\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a new index. Returns its ID.\n\n\n\n\n\n\n\n\n\n\n\n\nRemove a recorded index at ID.\n\n\n\n\n\n\n\n\n\n\n\n\nClear all index records.\n\n\n\n\n\n\n\n\n\n\n\n\nIterates through valid IDs in the StableIndex."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.haskey-e7d3f961991e2663",
    "href": "docstrings/src/util/stableindex.html#base.haskey-e7d3f961991e2663",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Whether an ID is in use."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.length-7ea31a421de7d258",
    "href": "docstrings/src/util/stableindex.html#base.length-7ea31a421de7d258",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Total number of IDs in use."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.getindex-f593dde852851bc8",
    "href": "docstrings/src/util/stableindex.html#base.getindex-f593dde852851bc8",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Get index at ID."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.setindex--725f722fff4cfa6d",
    "href": "docstrings/src/util/stableindex.html#base.setindex--725f722fff4cfa6d",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Map ID to a new index. The ID must be in use."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.push--8715d52e2302aaeb",
    "href": "docstrings/src/util/stableindex.html#base.push--8715d52e2302aaeb",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Add a new index. Returns its ID."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.delete--56ef520341df3c06",
    "href": "docstrings/src/util/stableindex.html#base.delete--56ef520341df3c06",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Remove a recorded index at ID."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.empty--418304748816268d",
    "href": "docstrings/src/util/stableindex.html#base.empty--418304748816268d",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Clear all index records."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.iterate-5228367cd62c0bf2",
    "href": "docstrings/src/util/stableindex.html#base.iterate-5228367cd62c0bf2",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Iterates through valid IDs in the StableIndex."
  },
  {
    "objectID": "docstrings/src/filament/functions.html",
    "href": "docstrings/src/filament/functions.html",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "num_fila_types(c::MEDYAN.Context) -&gt; Int64\nReturn the number of filament types.\n\n\n\n\n\n\n\n\n\n\n\n\nnum_fila(c::MEDYAN.Context; type) -&gt; Int64\nReturn the number of filaments of a given type.\n\n\n\n\n\n\n\n\n\n\n\n\nfila_mono_ids(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; UnitRange{Int64}\nReturn a UnitRange{Int64} of monomer IDs on a filament.\n\n\n\n\n\n\n\n\n\n\n\n\nfila_mono_states(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Vector{UInt8}\nReturn a read only Vector of monomer states on a filament.\nThis can be invalid after any mutations to context, so copy if needed.\n\n\n\n\n\n\n\n\n\n\n\n\nfila_num_nodes(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Int64\nReturn the number of mechanical node positions of a filament.\n\n\n\n\n\n\n\n\n\n\n\n\nfila_node_mids(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Vector{Int64}\nReturn the node_mids of the filament.\nThe node_mids are the monomer ids at (slightly plus side of) the node_positions\n                                 |\n                      -----+-----|-----+-----\n  minus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                      -----+-----|-----+-----\n                                 |\n                                 ^ A node position is indicated by the line.\n\nThe monomer id with parenthesis (M) will in `node_mids`\nThe first monomer id is the first monomer id on the filament. The last monomer id is the last monomer id on the filament + 1\n\n\n\n\n\n\n\n\n\n\n\n\nfila_node_positions(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Vector{StaticArraysCore.SVector{3, Float64}}\nReturn the mechanical node positions of the filament.\n\n\n\n\n\n\n\n\n\n\n\n\nfila_tip_tags(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Pair{MEDYAN.Tag{MEDYAN.FilaTipIdx}, MEDYAN.Tag{MEDYAN.FilaTipIdx}}\nReturn the pair of minus end, plus end filament tip tags.\n\n\n\n\n\n\n\n\n\n\n\n\nfila_num_unmin_ends(\n    c::MEDYAN.Context,\n    fila_idx::MEDYAN.FilaIdx\n) -&gt; Pair{Int64, Int64}\nReturn a pair (minus =&gt; plus) of the number of unminimized monomers on the minus and plus end of a filament.\nThis will be reset to (0 =&gt; 0) by minimize_energy!\nWhen an end is depolymerized this will decrease, but saturate at 0. When an end is polymerized this will increase.\nFor example if after minimization a filament has a plus end depolymerization, this function will return (0 =&gt; 0). Then if a plus end polymerization happens, this function will return (0 =&gt; 1), even though the net change in filament length is zero.\n\n\n\n\n\n\n\n\n\n\n\n\nis_minimized(c::Context, p::Union{FilaMonoIdx, FilaTipIdx, Tag})::Bool\nReturn true iff the monomer or tip has been minimized. Throw an error if p doesn’t exist.\n\n\n\n\n\n\n\n\n\n\n\n\npick_rand_fila_mono_site(c::Context, chem_voxel, fila_typeid, fsid)::Union{FilaMonoIdx, Nothing}\nReturn a FilaMonoIdx of a random filamonosite, or return nothing if rejected weighted by counts, using the default RNG.\n\n\n\n\n\n\n\n\n\n\n\n\npick_rand_fila_tip_site(c::Context, chem_voxel, fila_typeid, fesid)::Union{FilaTipIdx, Nothing}\nReturn a FilaTipIdx of a random filaendsite, or return nothing if rejected weighted by counts, using the default RNG."
  },
  {
    "objectID": "docstrings/src/filament/functions.html#medyan.num_fila_types-1698969c2a51ad88",
    "href": "docstrings/src/filament/functions.html#medyan.num_fila_types-1698969c2a51ad88",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "num_fila_types(c::MEDYAN.Context) -&gt; Int64\nReturn the number of filament types."
  },
  {
    "objectID": "docstrings/src/filament/functions.html#medyan.num_fila-6aa6f32d094c895e",
    "href": "docstrings/src/filament/functions.html#medyan.num_fila-6aa6f32d094c895e",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "num_fila(c::MEDYAN.Context; type) -&gt; Int64\nReturn the number of filaments of a given type."
  },
  {
    "objectID": "docstrings/src/filament/functions.html#medyan.fila_mono_ids-946d70c3169126dd",
    "href": "docstrings/src/filament/functions.html#medyan.fila_mono_ids-946d70c3169126dd",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "fila_mono_ids(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; UnitRange{Int64}\nReturn a UnitRange{Int64} of monomer IDs on a filament."
  },
  {
    "objectID": "docstrings/src/filament/functions.html#medyan.fila_mono_states-bf83d6c80fc4d691",
    "href": "docstrings/src/filament/functions.html#medyan.fila_mono_states-bf83d6c80fc4d691",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "fila_mono_states(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Vector{UInt8}\nReturn a read only Vector of monomer states on a filament.\nThis can be invalid after any mutations to context, so copy if needed."
  },
  {
    "objectID": "docstrings/src/filament/functions.html#medyan.fila_num_nodes-a3efee39b1440945",
    "href": "docstrings/src/filament/functions.html#medyan.fila_num_nodes-a3efee39b1440945",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "fila_num_nodes(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Int64\nReturn the number of mechanical node positions of a filament."
  },
  {
    "objectID": "docstrings/src/filament/functions.html#medyan.fila_node_mids-35de9fc339cbec42",
    "href": "docstrings/src/filament/functions.html#medyan.fila_node_mids-35de9fc339cbec42",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "fila_node_mids(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Vector{Int64}\nReturn the node_mids of the filament.\nThe node_mids are the monomer ids at (slightly plus side of) the node_positions\n                                 |\n                      -----+-----|-----+-----\n  minus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                      -----+-----|-----+-----\n                                 |\n                                 ^ A node position is indicated by the line.\n\nThe monomer id with parenthesis (M) will in `node_mids`\nThe first monomer id is the first monomer id on the filament. The last monomer id is the last monomer id on the filament + 1"
  },
  {
    "objectID": "docstrings/src/filament/functions.html#medyan.fila_node_positions-f4c5bac0dcb570ff",
    "href": "docstrings/src/filament/functions.html#medyan.fila_node_positions-f4c5bac0dcb570ff",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "fila_node_positions(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Vector{StaticArraysCore.SVector{3, Float64}}\nReturn the mechanical node positions of the filament."
  },
  {
    "objectID": "docstrings/src/filament/functions.html#medyan.fila_tip_tags-f05dfa7a845b20ea",
    "href": "docstrings/src/filament/functions.html#medyan.fila_tip_tags-f05dfa7a845b20ea",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "fila_tip_tags(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Pair{MEDYAN.Tag{MEDYAN.FilaTipIdx}, MEDYAN.Tag{MEDYAN.FilaTipIdx}}\nReturn the pair of minus end, plus end filament tip tags."
  },
  {
    "objectID": "docstrings/src/filament/functions.html#medyan.fila_num_unmin_ends-09448ccb823dbeac",
    "href": "docstrings/src/filament/functions.html#medyan.fila_num_unmin_ends-09448ccb823dbeac",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "fila_num_unmin_ends(\n    c::MEDYAN.Context,\n    fila_idx::MEDYAN.FilaIdx\n) -&gt; Pair{Int64, Int64}\nReturn a pair (minus =&gt; plus) of the number of unminimized monomers on the minus and plus end of a filament.\nThis will be reset to (0 =&gt; 0) by minimize_energy!\nWhen an end is depolymerized this will decrease, but saturate at 0. When an end is polymerized this will increase.\nFor example if after minimization a filament has a plus end depolymerization, this function will return (0 =&gt; 0). Then if a plus end polymerization happens, this function will return (0 =&gt; 1), even though the net change in filament length is zero."
  },
  {
    "objectID": "docstrings/src/filament/functions.html#medyan.is_minimized-ff3858ada5447c46",
    "href": "docstrings/src/filament/functions.html#medyan.is_minimized-ff3858ada5447c46",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "is_minimized(c::Context, p::Union{FilaMonoIdx, FilaTipIdx, Tag})::Bool\nReturn true iff the monomer or tip has been minimized. Throw an error if p doesn’t exist."
  },
  {
    "objectID": "docstrings/src/filament/functions.html#medyan.pick_rand_fila_mono_site-6641f66ed8873af1",
    "href": "docstrings/src/filament/functions.html#medyan.pick_rand_fila_mono_site-6641f66ed8873af1",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "pick_rand_fila_mono_site(c::Context, chem_voxel, fila_typeid, fsid)::Union{FilaMonoIdx, Nothing}\nReturn a FilaMonoIdx of a random filamonosite, or return nothing if rejected weighted by counts, using the default RNG."
  },
  {
    "objectID": "docstrings/src/filament/functions.html#medyan.pick_rand_fila_tip_site-d1418d43027273e9",
    "href": "docstrings/src/filament/functions.html#medyan.pick_rand_fila_tip_site-d1418d43027273e9",
    "title": "src/filament/functions.jl",
    "section": "",
    "text": "pick_rand_fila_tip_site(c::Context, chem_voxel, fila_typeid, fesid)::Union{FilaTipIdx, Nothing}\nReturn a FilaTipIdx of a random filaendsite, or return nothing if rejected weighted by counts, using the default RNG."
  },
  {
    "objectID": "docstrings/src/filament/depolymerize_fila.html",
    "href": "docstrings/src/filament/depolymerize_fila.html",
    "title": "src/filament/depolymerize_fila.jl",
    "section": "",
    "text": "depolymerize_fila!(c::Context, fila_tip_idx::FilaTipIdx)\nRemove a monomer from the end of the filament.\nThis doesn’t affect the other monomer states, positions, or change any of the monomer ids.\nError if the filament isn’t initially over 2 monomers long.\nUnlink any monomers on the filament that are referenced by any links. The links will not be removed, but will have a null reference. Links attached to the filament tip will remain attached."
  },
  {
    "objectID": "docstrings/src/filament/depolymerize_fila.html#medyan.depolymerize_fila--7aae43ce27544212",
    "href": "docstrings/src/filament/depolymerize_fila.html#medyan.depolymerize_fila--7aae43ce27544212",
    "title": "src/filament/depolymerize_fila.jl",
    "section": "",
    "text": "depolymerize_fila!(c::Context, fila_tip_idx::FilaTipIdx)\nRemove a monomer from the end of the filament.\nThis doesn’t affect the other monomer states, positions, or change any of the monomer ids.\nError if the filament isn’t initially over 2 monomers long.\nUnlink any monomers on the filament that are referenced by any links. The links will not be removed, but will have a null reference. Links attached to the filament tip will remain attached."
  },
  {
    "objectID": "docstrings/src/filament/make_fila.html",
    "href": "docstrings/src/filament/make_fila.html",
    "title": "src/filament/make_fila.jl",
    "section": "",
    "text": "make_fila!(c::Context;\n    type=1,\n    mono_states,\n    node_mids,\n    node_positions,\n)::Tag{FilaTipIdx}\nReturn the tag of the plus tip of the new filament. Error if the filament isn’t initially over 2 monomers long. Newly added filaments can’t be selected from nearby monomers until after minimization.\n\n\n\ntype=1: filament type id or symbol.\nmono_states: Collection of the MonomerState of the monomers in the new filament. In order from minus end to plus end. length(mono_states)&gt;1\nnode_positions: Collection of SVector{3,Float64}. The positions of the nodes, monomers are between nodes.\nnode_mids: Collection of Integer. The monomer ids at (slightly plus side of) the node_positions | ––-+––-|––-+––- minus end &lt;–– M | M | (M) | M ––&gt; plus end ––-+––-|––-+––- | ^ A node_position is indicated by the line.\nThe monomer id with parenthesis (M) will in node_mids length(node_mids) == length(node_positions) - 1\ntip_load_forces=(0.0=&gt;0.0): tip load forces, usually don’t use this, because load forces will automatically get updated at the next minimization."
  },
  {
    "objectID": "docstrings/src/filament/make_fila.html#medyan.make_fila--f2346a40b4792de5",
    "href": "docstrings/src/filament/make_fila.html#medyan.make_fila--f2346a40b4792de5",
    "title": "src/filament/make_fila.jl",
    "section": "",
    "text": "make_fila!(c::Context;\n    type=1,\n    mono_states,\n    node_mids,\n    node_positions,\n)::Tag{FilaTipIdx}\nReturn the tag of the plus tip of the new filament. Error if the filament isn’t initially over 2 monomers long. Newly added filaments can’t be selected from nearby monomers until after minimization.\n\n\n\ntype=1: filament type id or symbol.\nmono_states: Collection of the MonomerState of the monomers in the new filament. In order from minus end to plus end. length(mono_states)&gt;1\nnode_positions: Collection of SVector{3,Float64}. The positions of the nodes, monomers are between nodes.\nnode_mids: Collection of Integer. The monomer ids at (slightly plus side of) the node_positions | ––-+––-|––-+––- minus end &lt;–– M | M | (M) | M ––&gt; plus end ––-+––-|––-+––- | ^ A node_position is indicated by the line.\nThe monomer id with parenthesis (M) will in node_mids length(node_mids) == length(node_positions) - 1\ntip_load_forces=(0.0=&gt;0.0): tip load forces, usually don’t use this, because load forces will automatically get updated at the next minimization."
  },
  {
    "objectID": "docstrings/src/filament/sever_fila.html",
    "href": "docstrings/src/filament/sever_fila.html",
    "title": "src/filament/sever_fila.jl",
    "section": "",
    "text": "sever_fila!(c::Context, place::FilaMonoIdx)::Tag{FilaTipIdx}\nReturn the tag of the new filament plus end.\nThe split will happen between place and the monomer slightly towards the minus end.\nThe split cannot create a filament with less than 2 monomers."
  },
  {
    "objectID": "docstrings/src/filament/sever_fila.html#medyan.sever_fila--161c869bc5d06d6a",
    "href": "docstrings/src/filament/sever_fila.html#medyan.sever_fila--161c869bc5d06d6a",
    "title": "src/filament/sever_fila.jl",
    "section": "",
    "text": "sever_fila!(c::Context, place::FilaMonoIdx)::Tag{FilaTipIdx}\nReturn the tag of the new filament plus end.\nThe split will happen between place and the monomer slightly towards the minus end.\nThe split cannot create a filament with less than 2 monomers."
  },
  {
    "objectID": "docstrings/src/filament/remove_fila.html",
    "href": "docstrings/src/filament/remove_fila.html",
    "title": "src/filament/remove_fila.jl",
    "section": "",
    "text": "remove_fila!(c::Context, filaidx::Union{FilaIdx, Tag})\nRemove the filament.\nUnlink any monomers or tips on the filament that are referenced by any links. The links will not be removed, but will have a null reference."
  },
  {
    "objectID": "docstrings/src/filament/remove_fila.html#medyan.remove_fila--9938182befad3cb9",
    "href": "docstrings/src/filament/remove_fila.html#medyan.remove_fila--9938182befad3cb9",
    "title": "src/filament/remove_fila.jl",
    "section": "",
    "text": "remove_fila!(c::Context, filaidx::Union{FilaIdx, Tag})\nRemove the filament.\nUnlink any monomers or tips on the filament that are referenced by any links. The links will not be removed, but will have a null reference."
  },
  {
    "objectID": "docstrings/src/grids.html",
    "href": "docstrings/src/grids.html",
    "title": "src/grids.jl",
    "section": "",
    "text": "CubicGrid(num_voxels::SVector{3,Int}, compartmentsize::Float64)\n\nn::StaticArraysCore.SVector{3, Int64}\ncompartmentsize::Float64\n\n\n\n\n\n\n\n\n\n\n\n\n\nBase.length(grid::CubicGrid)\nTotal number of compartments in the grid\n\n\n\n\n\n\n\n\n\n\n\n\ngrididat(grid::CubicGrid, location)\nReturn the grid id of location The origin is in the center. Returns a close by voxel if out of the grid\n\n\n\n\n\n\n\n\n\n\n\n\nfilter_grididat(f, grid::CubicGrid, location)\nReturn the nearest grid id of location where f(id) evaluates to true. The origin is in the center. errors if there is no id that evaluates to true. Returns a close by voxel if out of the grid.\n\n\n\n\n\n\n\n\n\n\n\n\ncenterof(grid::CubicGrid, cid)\nReturn the location of the center of a grid id The origin is in the center.\n\n\n\n\n\n\n\n\n\ncenterof(grid::CubicGrid)\nReturn the location of the center the grid The origin is in the center.\n\n\n\n\n\n\n\n\n\n\n\n\nrandompoint(grid::CubicGrid,cid)::SVector{3,Float64}\nReturn a random point in a voxel Note, due to floating point rounding, there is a small chance the returned point may be in a nearby voxel.\n\n\n\n\n\n\n\n\n\nrandompoint(grid::CubicGrid)::SVector{3,Float64}\nReturn a random point in the grid"
  },
  {
    "objectID": "docstrings/src/grids.html#medyan.cubicgrid-fe4b7cc2dceb0431",
    "href": "docstrings/src/grids.html#medyan.cubicgrid-fe4b7cc2dceb0431",
    "title": "src/grids.jl",
    "section": "",
    "text": "CubicGrid(num_voxels::SVector{3,Int}, compartmentsize::Float64)\n\nn::StaticArraysCore.SVector{3, Int64}\ncompartmentsize::Float64"
  },
  {
    "objectID": "docstrings/src/grids.html#base.length-7ea31a421de7d258",
    "href": "docstrings/src/grids.html#base.length-7ea31a421de7d258",
    "title": "src/grids.jl",
    "section": "",
    "text": "Base.length(grid::CubicGrid)\nTotal number of compartments in the grid"
  },
  {
    "objectID": "docstrings/src/grids.html#medyan.grididat-8671e01413346deb",
    "href": "docstrings/src/grids.html#medyan.grididat-8671e01413346deb",
    "title": "src/grids.jl",
    "section": "",
    "text": "grididat(grid::CubicGrid, location)\nReturn the grid id of location The origin is in the center. Returns a close by voxel if out of the grid"
  },
  {
    "objectID": "docstrings/src/grids.html#medyan.filter_grididat-58a94154d21e32b0",
    "href": "docstrings/src/grids.html#medyan.filter_grididat-58a94154d21e32b0",
    "title": "src/grids.jl",
    "section": "",
    "text": "filter_grididat(f, grid::CubicGrid, location)\nReturn the nearest grid id of location where f(id) evaluates to true. The origin is in the center. errors if there is no id that evaluates to true. Returns a close by voxel if out of the grid."
  },
  {
    "objectID": "docstrings/src/grids.html#medyan.centerof-e902b9bb7b2a6caf",
    "href": "docstrings/src/grids.html#medyan.centerof-e902b9bb7b2a6caf",
    "title": "src/grids.jl",
    "section": "",
    "text": "centerof(grid::CubicGrid, cid)\nReturn the location of the center of a grid id The origin is in the center.\n\n\n\n\n\n\n\n\n\ncenterof(grid::CubicGrid)\nReturn the location of the center the grid The origin is in the center."
  },
  {
    "objectID": "docstrings/src/grids.html#medyan.randompoint-83e939bdee528294",
    "href": "docstrings/src/grids.html#medyan.randompoint-83e939bdee528294",
    "title": "src/grids.jl",
    "section": "",
    "text": "randompoint(grid::CubicGrid,cid)::SVector{3,Float64}\nReturn a random point in a voxel Note, due to floating point rounding, there is a small chance the returned point may be in a nearby voxel.\n\n\n\n\n\n\n\n\n\nrandompoint(grid::CubicGrid)::SVector{3,Float64}\nReturn a random point in the grid"
  },
  {
    "objectID": "docstrings/src/auxprocs.html",
    "href": "docstrings/src/auxprocs.html",
    "title": "src/auxprocs.jl",
    "section": "",
    "text": "Remesh all membrane meshes.\nAlso remove unreferenced MembVertIdx tags.\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an AABB tree corresponding to up-to-date membrane mesh triangles, resolve all filament-membrane intersections.\nRequires\n\nup-to-date unit normals of all triangles in the meshes.\nup-to-date AABB tree corresponding to all membrane meshes.\n\n\n\n\n\n\n\n\n\n\n\n\n\nUpdates all membrane geometries used across various parts of MEDYAN.\nThe list of all items can be found in the document for MEDYAN.compute_geometry!_system function.\nKeyword parameters:\n\ninclude_ff::Bool: If true, compute_geometry! used in energy computations will be applied as well, requiring vectorization of the membrane. This happens before system geometry computation in case some fields are overriden."
  },
  {
    "objectID": "docstrings/src/auxprocs.html#medyan.adapt_membranes--1d26092defd0f4fa",
    "href": "docstrings/src/auxprocs.html#medyan.adapt_membranes--1d26092defd0f4fa",
    "title": "src/auxprocs.jl",
    "section": "",
    "text": "Remesh all membrane meshes.\nAlso remove unreferenced MembVertIdx tags."
  },
  {
    "objectID": "docstrings/src/auxprocs.html#medyan.resolve_all_filament_mesh_crossing--a8be83a7d2ad65c7",
    "href": "docstrings/src/auxprocs.html#medyan.resolve_all_filament_mesh_crossing--a8be83a7d2ad65c7",
    "title": "src/auxprocs.jl",
    "section": "",
    "text": "Given an AABB tree corresponding to up-to-date membrane mesh triangles, resolve all filament-membrane intersections.\nRequires\n\nup-to-date unit normals of all triangles in the meshes.\nup-to-date AABB tree corresponding to all membrane meshes."
  },
  {
    "objectID": "docstrings/src/auxprocs.html#medyan.compute_all_membrane_geometry-_system-05b4d2a32e31560c",
    "href": "docstrings/src/auxprocs.html#medyan.compute_all_membrane_geometry-_system-05b4d2a32e31560c",
    "title": "src/auxprocs.jl",
    "section": "",
    "text": "Updates all membrane geometries used across various parts of MEDYAN.\nThe list of all items can be found in the document for MEDYAN.compute_geometry!_system function.\nKeyword parameters:\n\ninclude_ff::Bool: If true, compute_geometry! used in energy computations will be applied as well, requiring vectorization of the membrane. This happens before system geometry computation in case some fields are overriden."
  },
  {
    "objectID": "docstrings/src/membrane/membranesites.html",
    "href": "docstrings/src/membrane/membranesites.html",
    "title": "src/membrane/membranesites.jl",
    "section": "",
    "text": "Allows up to 1 membrane diffusing species as reactants. Also stores net stoich of membrane diffusing species.\n\nid_membranediffusing_reactant::Int64: Set to 0 if no membrane diffusing species is involved.\ncanchangerate_bypotentialenergy::Bool: Whether the reaction rate depends on reactant species potential energy.\nmembranediffusingnet_stoich::Vector{Pair{Int64, Int64}}: Pairs of membrane diffusing species index =&gt; Δcount"
  },
  {
    "objectID": "docstrings/src/membrane/membranesites.html#medyan.membranesitediffusing-66734014eb12ddb1",
    "href": "docstrings/src/membrane/membranesites.html#medyan.membranesitediffusing-66734014eb12ddb1",
    "title": "src/membrane/membranesites.jl",
    "section": "",
    "text": "Allows up to 1 membrane diffusing species as reactants. Also stores net stoich of membrane diffusing species.\n\nid_membranediffusing_reactant::Int64: Set to 0 if no membrane diffusing species is involved.\ncanchangerate_bypotentialenergy::Bool: Whether the reaction rate depends on reactant species potential energy.\nmembranediffusingnet_stoich::Vector{Pair{Int64, Int64}}: Pairs of membrane diffusing species index =&gt; Δcount"
  },
  {
    "objectID": "docstrings/src/links/link-manager.html",
    "href": "docstrings/src/links/link-manager.html",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "num_link_types(c::Context)::Int\nReturn the number of link types.\n\n\n\n\n\n\n\n\n\n\n\n\nplace2tag(c::Context, p::Place)::Tag\nReturn the tag of the place. Throw an error if !has_tag(p).\n\n\n\n\n\n\n\n\n\n\n\n\ntag!(c::Context, p::Place)::Tag\nReturn the tag of the place. Throw an error if !place_exists(p). Create a new tag if !has_tag(p).\n\n\n\n\n\n\n\n\n\n\n\n\nhas_tag(c::Context, p::Place)::Bool\nReturn true iff p has a tag. Otherwise return false. If !place_exists(c, p) return false.\n\n\n\n\n\n\n\n\n\n\n\n\ntag2place(c::Context, t::Tag)::Place\nReturn the place of the tag. Throw an error if !tag_exists(t).\n\n\n\n\n\n\n\n\n\n\n\n\nget_position(c::Context, x::Union{Tag, Place})::SVector{3, Float64}\nReturn the position of x. Throw an error if x doesn’t exist.\n\n\n\n\n\n\n\n\n\n\n\n\nget_directions(c::Context, x::Union{Tag, Place})::SVector{N, SVector{3, Float64}}\nReturn the directions of x. N is from num_directions. Throw an error if x doesn’t exist.\n\n\n\n\n\n\n\n\n\n\n\n\nget_chem_state(c::Context, x::Union{Tag, Place})\nReturn the chemical state of x. Each type of place has a different type of chemical state. If the chemical state of a place changes, any attached links will have their reaction rates recalculated. Throw an error if x doesn’t exist.\n\n\n\n\n\n\n\n\n\n\n\n\ntag_exists(c::Context, t::Tag)::Bool\nReturn true iff tag t exists in context c. Otherwise return false.\n\n\n\n\n\n\n\n\n\n\n\n\nget_all_tags(c::Context, p::Place) -&gt; Tag{typeof(p)} iterator\nReturn an iterator of existing tags for the type of p.\n\n\n\n\n\n\n\n\n\n\n\n\nlink2tags(c::Context, link::Link, [d::LinkData]) -&gt; Tag tuple\nReturn a tuple of tags of places that link is attached to. If one of the places of link is not attached that tag will be null. Throw an error if link doesn’t exist.\n\n\n\n\n\n\n\n\n\n\n\n\nget_state(c::Context, link::Link, [d::LinkData])\nReturn the state of the link. Throw an error if link doesn’t exist.\n\n\n\n\n\n\n\n\n\n\n\n\nget_bond_states(c::Context, link::Link, [d::LinkData])\nReturn the bond_states of the link. Throw an error if link doesn’t exist.\n\n\n\n\n\n\n\n\n\n\n\n\nget_bond_enabled(c::Context, link::Link, [d::LinkData])\nReturn the bond_enabled flags of the link. Throw an error if link doesn’t exist.\n\n\n\n\n\n\n\n\n\n\n\n\nget_reaction_enabled(c::Context, link::Link, [d::LinkData])\nReturn the reaction_enabled flags of the link. Throw an error if link doesn’t exist.\n\n\n\n\n\n\n\n\n\n\n\n\nis_minimized(c::Context, link::Link, [d::LinkData])::Bool\nReturn the is_minimized flag of the link. Throw an error if link doesn’t exist.\n\n\n\n\n\n\n\n\n\n\n\n\nlink_exists(c::Context, link::Link)::Bool\nReturn true iff link exists in context c. Otherwise return false.\n\n\n\n\n\n\n\n\n\n\n\n\nplace2links(c::Context, p::Place) -&gt; Link iterator\nReturn an iterator of Links attached to p. If !place_exists(c, p) return an empty iterator.\n\n\n\n\n\n\n\n\n\n\n\n\ntag2links(c::Context, t::Tag) -&gt; Link iterator\nReturn an iterator of Links attached to t. If !tag_exists(c, t) return an empty iterator.\n\n\n\n\n\n\n\n\n\n\n\n\nmake_link!(c::Context; kwargs...)::Link\nReturn the new link.\nThe type keyword argument is required.\nThe other keyword arguments can be used to change the link from default.\n\n\n\ntype::Union{Symbol,Integer}: the link type id or symbol.\nplaces=(): places or tags to attach to the link.\nSet an element to nothing not change the attached place. Set an element to a null place or tag to detach that place.\nstate=(;): state properties to change.\nA NamedTuple of changes. For example, state = (;k1 = 3.6, k7 = 2.0,) to change state.k1 to 3.6 and state.k7 to 2.0.\nbond_states=(): bond state properties to change.\nA Tuple of changes. If an element in the tuple is nothing, the corresponding bond state isn’t changed. For example, bond_states = (nothing, (;L0 = 3.6,)) to change bond_states[2].L0 to 3.6.\nbond_enabled=(): bond enable flags to change.\nA Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding bond enable flag isn't changed. For example,bond_enabled = (nothing, true, false)` to not change bond 1, enable bond 2, and disable bond 3.\nreaction_enabled=(): reaction enable flags to change.\nA Tuple of Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding reaction enable flag or flags aren't changed. For example,reaction_enabled = (nothing, (true, nothing, false))` to not change any reactions on place 1, enable reaction 1 on place 2, and disable reaction 3 on place 2.\nis_minimized::Bool=false: is the link marked as minimized.\nBy default links are marked as minimized at the end of mechanics when updated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nremove_link!(c::Context, link::Link)::Nothing\nRemove the link.\n\n\n\n\n\n\n\n\n\n\n\n\nupdate_link!(c::Context, link::Link; kwargs...)::Nothing\nUpdate the link.\n\n\n\nplaces=(): places or tags to attach to the link.\nSet an element to nothing not change the attached place. Set an element to a null place or tag to detach that place.\nstate=(;): state properties to change.\nA NamedTuple of changes. For example, state = (;k1 = 3.6, k7 = 2.0,) to change state.k1 to 3.6 and state.k7 to 2.0.\nbond_states=(): bond state properties to change.\nA Tuple of changes. If an element in the tuple is nothing, the corresponding bond state isn’t changed. For example, bond_states = (nothing, (;L0 = 3.6,)) to change bond_states[2].L0 to 3.6.\nbond_enabled=(): bond enable flags to change.\nA Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding bond enable flag isn't changed. For example,bond_enabled = (nothing, true, false)` to not change bond 1, enable bond 2, and disable bond 3.\nreaction_enabled=(): reaction enable flags to change.\nA Tuple of Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding reaction enable flag or flags aren't changed. For example,reaction_enabled = (nothing, (true, nothing, false))` to not change any reactions on place 1, enable reaction 1 on place 2, and disable reaction 3 on place 2.\nis_minimized::Bool=false: is the link marked as minimized.\nBy default links are marked as minimized at the end of mechanics when updated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nget_all_links(c::Context; type::Union{Symbol,Integer}) -&gt; Link iterator\nReturn an iterator of all Links of type type."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.num_link_types-2d203a5799bbfdcc",
    "href": "docstrings/src/links/link-manager.html#medyan.num_link_types-2d203a5799bbfdcc",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "num_link_types(c::Context)::Int\nReturn the number of link types."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.place2tag-9d62565424ca3705",
    "href": "docstrings/src/links/link-manager.html#medyan.place2tag-9d62565424ca3705",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "place2tag(c::Context, p::Place)::Tag\nReturn the tag of the place. Throw an error if !has_tag(p)."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.tag--518214eeb95e748e",
    "href": "docstrings/src/links/link-manager.html#medyan.tag--518214eeb95e748e",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "tag!(c::Context, p::Place)::Tag\nReturn the tag of the place. Throw an error if !place_exists(p). Create a new tag if !has_tag(p)."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.has_tag-d550430128572035",
    "href": "docstrings/src/links/link-manager.html#medyan.has_tag-d550430128572035",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "has_tag(c::Context, p::Place)::Bool\nReturn true iff p has a tag. Otherwise return false. If !place_exists(c, p) return false."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.tag2place-68ab43363a4c1760",
    "href": "docstrings/src/links/link-manager.html#medyan.tag2place-68ab43363a4c1760",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "tag2place(c::Context, t::Tag)::Place\nReturn the place of the tag. Throw an error if !tag_exists(t)."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.get_position-5ca1f4a736664040",
    "href": "docstrings/src/links/link-manager.html#medyan.get_position-5ca1f4a736664040",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "get_position(c::Context, x::Union{Tag, Place})::SVector{3, Float64}\nReturn the position of x. Throw an error if x doesn’t exist."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.get_directions-326e10fbe4341527",
    "href": "docstrings/src/links/link-manager.html#medyan.get_directions-326e10fbe4341527",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "get_directions(c::Context, x::Union{Tag, Place})::SVector{N, SVector{3, Float64}}\nReturn the directions of x. N is from num_directions. Throw an error if x doesn’t exist."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.get_chem_state-a69539a7b114572a",
    "href": "docstrings/src/links/link-manager.html#medyan.get_chem_state-a69539a7b114572a",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "get_chem_state(c::Context, x::Union{Tag, Place})\nReturn the chemical state of x. Each type of place has a different type of chemical state. If the chemical state of a place changes, any attached links will have their reaction rates recalculated. Throw an error if x doesn’t exist."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.tag_exists-c112bb84254d0b58",
    "href": "docstrings/src/links/link-manager.html#medyan.tag_exists-c112bb84254d0b58",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "tag_exists(c::Context, t::Tag)::Bool\nReturn true iff tag t exists in context c. Otherwise return false."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.get_all_tags-3a8e6bc0634c8a4d",
    "href": "docstrings/src/links/link-manager.html#medyan.get_all_tags-3a8e6bc0634c8a4d",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "get_all_tags(c::Context, p::Place) -&gt; Tag{typeof(p)} iterator\nReturn an iterator of existing tags for the type of p."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.link2tags-645330bedbf54254",
    "href": "docstrings/src/links/link-manager.html#medyan.link2tags-645330bedbf54254",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "link2tags(c::Context, link::Link, [d::LinkData]) -&gt; Tag tuple\nReturn a tuple of tags of places that link is attached to. If one of the places of link is not attached that tag will be null. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.get_state-e99d22cacff37374",
    "href": "docstrings/src/links/link-manager.html#medyan.get_state-e99d22cacff37374",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "get_state(c::Context, link::Link, [d::LinkData])\nReturn the state of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.get_bond_states-b314ae6ee2a2b3cf",
    "href": "docstrings/src/links/link-manager.html#medyan.get_bond_states-b314ae6ee2a2b3cf",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "get_bond_states(c::Context, link::Link, [d::LinkData])\nReturn the bond_states of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.get_bond_enabled-c3461fb32deb4276",
    "href": "docstrings/src/links/link-manager.html#medyan.get_bond_enabled-c3461fb32deb4276",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "get_bond_enabled(c::Context, link::Link, [d::LinkData])\nReturn the bond_enabled flags of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.get_reaction_enabled-95b8e03d3766db53",
    "href": "docstrings/src/links/link-manager.html#medyan.get_reaction_enabled-95b8e03d3766db53",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "get_reaction_enabled(c::Context, link::Link, [d::LinkData])\nReturn the reaction_enabled flags of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.is_minimized-ff3858ada5447c46",
    "href": "docstrings/src/links/link-manager.html#medyan.is_minimized-ff3858ada5447c46",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "is_minimized(c::Context, link::Link, [d::LinkData])::Bool\nReturn the is_minimized flag of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.link_exists-0f95437072169f8d",
    "href": "docstrings/src/links/link-manager.html#medyan.link_exists-0f95437072169f8d",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "link_exists(c::Context, link::Link)::Bool\nReturn true iff link exists in context c. Otherwise return false."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.place2links-0b74317627f4b920",
    "href": "docstrings/src/links/link-manager.html#medyan.place2links-0b74317627f4b920",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "place2links(c::Context, p::Place) -&gt; Link iterator\nReturn an iterator of Links attached to p. If !place_exists(c, p) return an empty iterator."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.tag2links-e8376daf0b29e2fd",
    "href": "docstrings/src/links/link-manager.html#medyan.tag2links-e8376daf0b29e2fd",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "tag2links(c::Context, t::Tag) -&gt; Link iterator\nReturn an iterator of Links attached to t. If !tag_exists(c, t) return an empty iterator."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.make_link--0fd0bab9dac08837",
    "href": "docstrings/src/links/link-manager.html#medyan.make_link--0fd0bab9dac08837",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "make_link!(c::Context; kwargs...)::Link\nReturn the new link.\nThe type keyword argument is required.\nThe other keyword arguments can be used to change the link from default.\n\n\n\ntype::Union{Symbol,Integer}: the link type id or symbol.\nplaces=(): places or tags to attach to the link.\nSet an element to nothing not change the attached place. Set an element to a null place or tag to detach that place.\nstate=(;): state properties to change.\nA NamedTuple of changes. For example, state = (;k1 = 3.6, k7 = 2.0,) to change state.k1 to 3.6 and state.k7 to 2.0.\nbond_states=(): bond state properties to change.\nA Tuple of changes. If an element in the tuple is nothing, the corresponding bond state isn’t changed. For example, bond_states = (nothing, (;L0 = 3.6,)) to change bond_states[2].L0 to 3.6.\nbond_enabled=(): bond enable flags to change.\nA Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding bond enable flag isn't changed. For example,bond_enabled = (nothing, true, false)` to not change bond 1, enable bond 2, and disable bond 3.\nreaction_enabled=(): reaction enable flags to change.\nA Tuple of Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding reaction enable flag or flags aren't changed. For example,reaction_enabled = (nothing, (true, nothing, false))` to not change any reactions on place 1, enable reaction 1 on place 2, and disable reaction 3 on place 2.\nis_minimized::Bool=false: is the link marked as minimized.\nBy default links are marked as minimized at the end of mechanics when updated."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.remove_link--01531e04ef5077e7",
    "href": "docstrings/src/links/link-manager.html#medyan.remove_link--01531e04ef5077e7",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "remove_link!(c::Context, link::Link)::Nothing\nRemove the link."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.update_link--67d413cca6fe82eb",
    "href": "docstrings/src/links/link-manager.html#medyan.update_link--67d413cca6fe82eb",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "update_link!(c::Context, link::Link; kwargs...)::Nothing\nUpdate the link.\n\n\n\nplaces=(): places or tags to attach to the link.\nSet an element to nothing not change the attached place. Set an element to a null place or tag to detach that place.\nstate=(;): state properties to change.\nA NamedTuple of changes. For example, state = (;k1 = 3.6, k7 = 2.0,) to change state.k1 to 3.6 and state.k7 to 2.0.\nbond_states=(): bond state properties to change.\nA Tuple of changes. If an element in the tuple is nothing, the corresponding bond state isn’t changed. For example, bond_states = (nothing, (;L0 = 3.6,)) to change bond_states[2].L0 to 3.6.\nbond_enabled=(): bond enable flags to change.\nA Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding bond enable flag isn't changed. For example,bond_enabled = (nothing, true, false)` to not change bond 1, enable bond 2, and disable bond 3.\nreaction_enabled=(): reaction enable flags to change.\nA Tuple of Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding reaction enable flag or flags aren't changed. For example,reaction_enabled = (nothing, (true, nothing, false))` to not change any reactions on place 1, enable reaction 1 on place 2, and disable reaction 3 on place 2.\nis_minimized::Bool=false: is the link marked as minimized.\nBy default links are marked as minimized at the end of mechanics when updated."
  },
  {
    "objectID": "docstrings/src/links/link-manager.html#medyan.get_all_links-fe0d12c0df825f7e",
    "href": "docstrings/src/links/link-manager.html#medyan.get_all_links-fe0d12c0df825f7e",
    "title": "src/links/link-manager.jl",
    "section": "",
    "text": "get_all_links(c::Context; type::Union{Symbol,Integer}) -&gt; Link iterator\nReturn an iterator of all Links of type type."
  },
  {
    "objectID": "docstrings/src/links/place-indexes.html",
    "href": "docstrings/src/links/place-indexes.html",
    "title": "src/links/place-indexes.jl",
    "section": "",
    "text": "num_directions(::Union{Place, Type{&lt;:Place}})::Int\nReturn the number of directions associated with a place."
  },
  {
    "objectID": "docstrings/src/links/place-indexes.html#medyan.num_directions-89697a0fca8de12f",
    "href": "docstrings/src/links/place-indexes.html#medyan.num_directions-89697a0fca8de12f",
    "title": "src/links/place-indexes.jl",
    "section": "",
    "text": "num_directions(::Union{Place, Type{&lt;:Place}})::Int\nReturn the number of directions associated with a place."
  },
  {
    "objectID": "docstrings/medyan.make_fila_rand--7c63c7a09ece60c8.html",
    "href": "docstrings/medyan.make_fila_rand--7c63c7a09ece60c8.html",
    "title": "MEDYAN.make_fila_rand!",
    "section": "",
    "text": "make_fila_rand!(c::Context, mono_states; iterations = 10^9, type = 1)::Tag{FilaTipIdx}\nAdd a filament to the Context with random center position and direction.\nReturn the tag of the plus tip of the new filament.\nmono_states is a collection of the MonomerState of the monomers in the new filament.\nThe filament will be inside the mech boundary.\nErrors if it fails to add a filament.\nThe monomer are spaced by the value in the filament type’s mechanical parameters.\n\n\n\ntype=1: filament type id or symbol.\niterations = 10^9: number of positions to try before failing with an error."
  },
  {
    "objectID": "docstrings/medyan.make_fila_rand--7c63c7a09ece60c8.html#tuple-medyan.context--any--86fc06bb8cbd13e8",
    "href": "docstrings/medyan.make_fila_rand--7c63c7a09ece60c8.html#tuple-medyan.context--any--86fc06bb8cbd13e8",
    "title": "MEDYAN.make_fila_rand!",
    "section": "",
    "text": "make_fila_rand!(c::Context, mono_states; iterations = 10^9, type = 1)::Tag{FilaTipIdx}\nAdd a filament to the Context with random center position and direction.\nReturn the tag of the plus tip of the new filament.\nmono_states is a collection of the MonomerState of the monomers in the new filament.\nThe filament will be inside the mech boundary.\nErrors if it fails to add a filament.\nThe monomer are spaced by the value in the filament type’s mechanical parameters.\n\n\n\ntype=1: filament type id or symbol.\niterations = 10^9: number of positions to try before failing with an error."
  },
  {
    "objectID": "docstrings/medyan.set_enable_cylinder_volume_exclusion--38c20ab68ab8bf1a.html",
    "href": "docstrings/medyan.set_enable_cylinder_volume_exclusion--38c20ab68ab8bf1a.html",
    "title": "MEDYAN.set_enable_cylinder_volume_exclusion!",
    "section": "",
    "text": "set_enable_cylinder_volume_exclusion!(\n    c::MEDYAN.Context,\n    x::Bool\n) -&gt; Bool\nAre cylinder volume exclusion forces calculated."
  },
  {
    "objectID": "docstrings/medyan.set_enable_cylinder_volume_exclusion--38c20ab68ab8bf1a.html#tuple-medyan.context--bool--89b229b1eef6a22c",
    "href": "docstrings/medyan.set_enable_cylinder_volume_exclusion--38c20ab68ab8bf1a.html#tuple-medyan.context--bool--89b229b1eef6a22c",
    "title": "MEDYAN.set_enable_cylinder_volume_exclusion!",
    "section": "",
    "text": "set_enable_cylinder_volume_exclusion!(\n    c::MEDYAN.Context,\n    x::Bool\n) -&gt; Bool\nAre cylinder volume exclusion forces calculated."
  },
  {
    "objectID": "docstrings/medyan.place2tag-9d62565424ca3705.html",
    "href": "docstrings/medyan.place2tag-9d62565424ca3705.html",
    "title": "MEDYAN.place2tag",
    "section": "",
    "text": "place2tag(c::Context, p::Place)::Tag\nReturn the tag of the place. Throw an error if !has_tag(p)."
  },
  {
    "objectID": "docstrings/medyan.place2tag-9d62565424ca3705.html#union-tuple-p---tuple-medyan.context--p---where-p--medyan.place-316eaf4f0092762b",
    "href": "docstrings/medyan.place2tag-9d62565424ca3705.html#union-tuple-p---tuple-medyan.context--p---where-p--medyan.place-316eaf4f0092762b",
    "title": "MEDYAN.place2tag",
    "section": "",
    "text": "place2tag(c::Context, p::Place)::Tag\nReturn the tag of the place. Throw an error if !has_tag(p)."
  },
  {
    "objectID": "docstrings/medyan.compute_all_membrane_geometry-_system-05b4d2a32e31560c.html",
    "href": "docstrings/medyan.compute_all_membrane_geometry-_system-05b4d2a32e31560c.html",
    "title": "MEDYAN.compute_all_membrane_geometry!_system",
    "section": "",
    "text": "Updates all membrane geometries used across various parts of MEDYAN.\nThe list of all items can be found in the document for MEDYAN.compute_geometry!_system function.\nKeyword parameters:\n\ninclude_ff::Bool: If true, compute_geometry! used in energy computations will be applied as well, requiring vectorization of the membrane. This happens before system geometry computation in case some fields are overriden."
  },
  {
    "objectID": "docstrings/medyan.compute_all_membrane_geometry-_system-05b4d2a32e31560c.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.compute_all_membrane_geometry-_system-05b4d2a32e31560c.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.compute_all_membrane_geometry!_system",
    "section": "",
    "text": "Updates all membrane geometries used across various parts of MEDYAN.\nThe list of all items can be found in the document for MEDYAN.compute_geometry!_system function.\nKeyword parameters:\n\ninclude_ff::Bool: If true, compute_geometry! used in energy computations will be applied as well, requiring vectorization of the membrane. This happens before system geometry computation in case some fields are overriden."
  },
  {
    "objectID": "docstrings/base.haskey-e7d3f961991e2663.html",
    "href": "docstrings/base.haskey-e7d3f961991e2663.html",
    "title": "Base.haskey",
    "section": "",
    "text": "Whether an ID is in use."
  },
  {
    "objectID": "docstrings/base.haskey-e7d3f961991e2663.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "href": "docstrings/base.haskey-e7d3f961991e2663.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "title": "Base.haskey",
    "section": "",
    "text": "Whether an ID is in use."
  },
  {
    "objectID": "docstrings/medyan.run_chemistry--dda22fac5c555b9e.html",
    "href": "docstrings/medyan.run_chemistry--dda22fac5c555b9e.html",
    "title": "MEDYAN.run_chemistry!",
    "section": "",
    "text": "run_chemistry!(c::Context, Δt)\nRun chemistry for Δt time.\nUpdate c.time."
  },
  {
    "objectID": "docstrings/medyan.run_chemistry--dda22fac5c555b9e.html#tuple-medyan.context--any--86fc06bb8cbd13e8",
    "href": "docstrings/medyan.run_chemistry--dda22fac5c555b9e.html#tuple-medyan.context--any--86fc06bb8cbd13e8",
    "title": "MEDYAN.run_chemistry!",
    "section": "",
    "text": "run_chemistry!(c::Context, Δt)\nRun chemistry for Δt time.\nUpdate c.time."
  },
  {
    "objectID": "docstrings/medyan.addfilamentendsite--95612d72d1fda05f.html",
    "href": "docstrings/medyan.addfilamentendsite--95612d72d1fda05f.html",
    "title": "MEDYAN.addfilamentendsite!",
    "section": "",
    "text": "addfilamentendsite!(s::SysDef,filamenttypename::Symbol,filamentendsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.addfilamentendsite--95612d72d1fda05f.html#tuple-medyan.sysdef--symbol--symbol--any--b9a0ed342fa77751",
    "href": "docstrings/medyan.addfilamentendsite--95612d72d1fda05f.html#tuple-medyan.sysdef--symbol--symbol--any--b9a0ed342fa77751",
    "title": "MEDYAN.addfilamentendsite!",
    "section": "",
    "text": "addfilamentendsite!(s::SysDef,filamenttypename::Symbol,filamentendsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.refresh_chem_cache--f90ebca1f896ad2c.html",
    "href": "docstrings/medyan.refresh_chem_cache--f90ebca1f896ad2c.html",
    "title": "MEDYAN.refresh_chem_cache!",
    "section": "",
    "text": "refresh_chem_cache!(c::Context)::Nothing\nNormally this isn’t needed as it will happen automatically."
  },
  {
    "objectID": "docstrings/medyan.refresh_chem_cache--f90ebca1f896ad2c.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.refresh_chem_cache--f90ebca1f896ad2c.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.refresh_chem_cache!",
    "section": "",
    "text": "refresh_chem_cache!(c::Context)::Nothing\nNormally this isn’t needed as it will happen automatically."
  },
  {
    "objectID": "docstrings/medyan.tag2place-68ab43363a4c1760.html",
    "href": "docstrings/medyan.tag2place-68ab43363a4c1760.html",
    "title": "MEDYAN.tag2place",
    "section": "",
    "text": "tag2place(c::Context, t::Tag)::Place\nReturn the place of the tag. Throw an error if !tag_exists(t)."
  },
  {
    "objectID": "docstrings/medyan.tag2place-68ab43363a4c1760.html#union-tuple-p---tuple-medyan.context--medyan.tag-p----where-p-f3255fd0d268d21a",
    "href": "docstrings/medyan.tag2place-68ab43363a4c1760.html#union-tuple-p---tuple-medyan.context--medyan.tag-p----where-p-f3255fd0d268d21a",
    "title": "MEDYAN.tag2place",
    "section": "",
    "text": "tag2place(c::Context, t::Tag)::Place\nReturn the place of the tag. Throw an error if !tag_exists(t)."
  },
  {
    "objectID": "docstrings/medyan.polymerize_fila--ef96193868627e48.html",
    "href": "docstrings/medyan.polymerize_fila--ef96193868627e48.html",
    "title": "MEDYAN.polymerize_fila!",
    "section": "",
    "text": "polymerize_fila!(c::Context, fila_tip_idx::FilaTipIdx, newstate::Union{Symbol,MonomerState})\nAdd a monomer with state newstate to the end of the filament.\nThis doesn’t affect the other monomer states, positions, or change any of the monomer ids. New monomers are not linkable until after minimization."
  },
  {
    "objectID": "docstrings/medyan.polymerize_fila--ef96193868627e48.html#tuple-medyan.context--medyan.filatipidx--union-uint8--symbol---0e9280d25a5258b3",
    "href": "docstrings/medyan.polymerize_fila--ef96193868627e48.html#tuple-medyan.context--medyan.filatipidx--union-uint8--symbol---0e9280d25a5258b3",
    "title": "MEDYAN.polymerize_fila!",
    "section": "",
    "text": "polymerize_fila!(c::Context, fila_tip_idx::FilaTipIdx, newstate::Union{Symbol,MonomerState})\nAdd a monomer with state newstate to the end of the filament.\nThis doesn’t affect the other monomer states, positions, or change any of the monomer ids. New monomers are not linkable until after minimization."
  },
  {
    "objectID": "docstrings/medyan.fila_tip_tags-f05dfa7a845b20ea.html",
    "href": "docstrings/medyan.fila_tip_tags-f05dfa7a845b20ea.html",
    "title": "MEDYAN.fila_tip_tags",
    "section": "",
    "text": "fila_tip_tags(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Pair{MEDYAN.Tag{MEDYAN.FilaTipIdx}, MEDYAN.Tag{MEDYAN.FilaTipIdx}}\nReturn the pair of minus end, plus end filament tip tags."
  },
  {
    "objectID": "docstrings/medyan.fila_tip_tags-f05dfa7a845b20ea.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "href": "docstrings/medyan.fila_tip_tags-f05dfa7a845b20ea.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "title": "MEDYAN.fila_tip_tags",
    "section": "",
    "text": "fila_tip_tags(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Pair{MEDYAN.Tag{MEDYAN.FilaTipIdx}, MEDYAN.Tag{MEDYAN.FilaTipIdx}}\nReturn the pair of minus end, plus end filament tip tags."
  },
  {
    "objectID": "docstrings/medyan.get_bond_states-b314ae6ee2a2b3cf.html",
    "href": "docstrings/medyan.get_bond_states-b314ae6ee2a2b3cf.html",
    "title": "MEDYAN.get_bond_states",
    "section": "",
    "text": "get_bond_states(c::Context, link::Link, [d::LinkData])\nReturn the bond_states of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.get_bond_states-b314ae6ee2a2b3cf.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--any---03b671600f22589f",
    "href": "docstrings/medyan.get_bond_states-b314ae6ee2a2b3cf.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--any---03b671600f22589f",
    "title": "MEDYAN.get_bond_states",
    "section": "",
    "text": "get_bond_states(c::Context, link::Link, [d::LinkData])\nReturn the bond_states of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.remove_link--01531e04ef5077e7.html",
    "href": "docstrings/medyan.remove_link--01531e04ef5077e7.html",
    "title": "MEDYAN.remove_link!",
    "section": "",
    "text": "remove_link!(c::Context, link::Link)::Nothing\nRemove the link."
  },
  {
    "objectID": "docstrings/medyan.remove_link--01531e04ef5077e7.html#tuple-medyan.context--medyan.link--d37b229d2ebf6962",
    "href": "docstrings/medyan.remove_link--01531e04ef5077e7.html#tuple-medyan.context--medyan.link--d37b229d2ebf6962",
    "title": "MEDYAN.remove_link!",
    "section": "",
    "text": "remove_link!(c::Context, link::Link)::Nothing\nRemove the link."
  },
  {
    "objectID": "docstrings/medyan.centerof-e902b9bb7b2a6caf.html",
    "href": "docstrings/medyan.centerof-e902b9bb7b2a6caf.html",
    "title": "MEDYAN.centerof",
    "section": "",
    "text": "centerof(grid::CubicGrid, cid)\nReturn the location of the center of a grid id The origin is in the center.\n\n\n\n\n\n\n\n\n\n\n\n\ncenterof(grid::CubicGrid)\nReturn the location of the center the grid The origin is in the center."
  },
  {
    "objectID": "docstrings/medyan.centerof-e902b9bb7b2a6caf.html#tuple-medyan.cubicgrid--any--1be3c03f7960c1a3",
    "href": "docstrings/medyan.centerof-e902b9bb7b2a6caf.html#tuple-medyan.cubicgrid--any--1be3c03f7960c1a3",
    "title": "MEDYAN.centerof",
    "section": "",
    "text": "centerof(grid::CubicGrid, cid)\nReturn the location of the center of a grid id The origin is in the center."
  },
  {
    "objectID": "docstrings/medyan.centerof-e902b9bb7b2a6caf.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "href": "docstrings/medyan.centerof-e902b9bb7b2a6caf.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "title": "MEDYAN.centerof",
    "section": "",
    "text": "centerof(grid::CubicGrid)\nReturn the location of the center the grid The origin is in the center."
  },
  {
    "objectID": "docstrings/medyan.addfilament_reaction--63195cbff2ab4237.html",
    "href": "docstrings/medyan.addfilament_reaction--63195cbff2ab4237.html",
    "title": "MEDYAN.addfilament_reaction!",
    "section": "",
    "text": "Add filament reaction. Return s. Add a filamentsite and reaction with callback to change the monomer state. This can be used for filament aging, filament catalyzed reactions, or simple binding reactions.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentsitename::Symbol: the new name of the filamentsite added. This can be used as a catalyst in other reactions.\nchangedstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the monomer states, the first is the states to match. The second is the new monomer states after the reaction. both should be the same length. Ordered minus end first.\ncenter::Int: Which index of changedstatenames.first is the actual location of the filamentsite. Used for determining what compartment the reaction goes in.\nreactantexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentsite.$(filamenttypename).$(filamentsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. volumefactor only applies to this reaction not any other reaction using filamentsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    filamentnames= [(:filname,[\n                            :a,\n                            :b,\n                            :c,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\naddfilament_reaction!(s, :filname, :ab,\n    [:a]=&gt;[:b], 1,\n    \"--&gt;\", 1.75E-3, 0,\n)\naddfilament_reaction!(s, :filname, :aabc,\n    [:a,:a]=&gt;[:b,:c], 2,\n    \"--&gt;\", 1.75E-3, 0,\n)"
  },
  {
    "objectID": "docstrings/medyan.addfilament_reaction--63195cbff2ab4237.html#tuple-medyan.sysdef--symbol--symbol--pair-vector-symbol---vector-symbol----int64--abstractstring--float64--int64--51c2a9e2acbeb27c",
    "href": "docstrings/medyan.addfilament_reaction--63195cbff2ab4237.html#tuple-medyan.sysdef--symbol--symbol--pair-vector-symbol---vector-symbol----int64--abstractstring--float64--int64--51c2a9e2acbeb27c",
    "title": "MEDYAN.addfilament_reaction!",
    "section": "",
    "text": "Add filament reaction. Return s. Add a filamentsite and reaction with callback to change the monomer state. This can be used for filament aging, filament catalyzed reactions, or simple binding reactions.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentsitename::Symbol: the new name of the filamentsite added. This can be used as a catalyst in other reactions.\nchangedstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the monomer states, the first is the states to match. The second is the new monomer states after the reaction. both should be the same length. Ordered minus end first.\ncenter::Int: Which index of changedstatenames.first is the actual location of the filamentsite. Used for determining what compartment the reaction goes in.\nreactantexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentsite.$(filamenttypename).$(filamentsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. volumefactor only applies to this reaction not any other reaction using filamentsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    filamentnames= [(:filname,[\n                            :a,\n                            :b,\n                            :c,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\naddfilament_reaction!(s, :filname, :ab,\n    [:a]=&gt;[:b], 1,\n    \"--&gt;\", 1.75E-3, 0,\n)\naddfilament_reaction!(s, :filname, :aabc,\n    [:a,:a]=&gt;[:b,:c], 2,\n    \"--&gt;\", 1.75E-3, 0,\n)"
  },
  {
    "objectID": "docstrings/base.---a21e771ed8ea7d6f.html",
    "href": "docstrings/base.---a21e771ed8ea7d6f.html",
    "title": "Base.:*",
    "section": "",
    "text": "scale the volume and area\n\n\n\n\n\n\n\n\n\n\n\n\nscale the volume and area by different amounts in each direction"
  },
  {
    "objectID": "docstrings/base.---a21e771ed8ea7d6f.html#tuple-medyan.planecuboidslicingresult--real--351897cd93ec653f",
    "href": "docstrings/base.---a21e771ed8ea7d6f.html#tuple-medyan.planecuboidslicingresult--real--351897cd93ec653f",
    "title": "Base.:*",
    "section": "",
    "text": "scale the volume and area"
  },
  {
    "objectID": "docstrings/base.---a21e771ed8ea7d6f.html#tuple-medyan.planecuboidslicingresult--abstractvector--a044ea7870b5bb9c",
    "href": "docstrings/base.---a21e771ed8ea7d6f.html#tuple-medyan.planecuboidslicingresult--abstractvector--a044ea7870b5bb9c",
    "title": "Base.:*",
    "section": "",
    "text": "scale the volume and area by different amounts in each direction"
  },
  {
    "objectID": "docstrings/medyan.addfilamentsite--eb6bfd871a21b6f4.html",
    "href": "docstrings/medyan.addfilamentsite--eb6bfd871a21b6f4.html",
    "title": "MEDYAN.addfilamentsite!",
    "section": "",
    "text": "addfilamentsite!(s::SysDef,filamenttypename::Symbol,filamentsitename::Symbol,site)"
  },
  {
    "objectID": "docstrings/medyan.addfilamentsite--eb6bfd871a21b6f4.html#tuple-medyan.sysdef--symbol--symbol--any--b9a0ed342fa77751",
    "href": "docstrings/medyan.addfilamentsite--eb6bfd871a21b6f4.html#tuple-medyan.sysdef--symbol--symbol--any--b9a0ed342fa77751",
    "title": "MEDYAN.addfilamentsite!",
    "section": "",
    "text": "addfilamentsite!(s::SysDef,filamenttypename::Symbol,filamentsitename::Symbol,site)"
  },
  {
    "objectID": "docstrings/medyan.get_link_mechanics-57ba2f1a141d0156.html",
    "href": "docstrings/medyan.get_link_mechanics-57ba2f1a141d0156.html",
    "title": "MEDYAN.get_link_mechanics",
    "section": "",
    "text": "get_link_mechanics(c::Context, link::Link, [d::LinkData])\nReturn a NamedTuple of (;energy, inputs, forces, torques) of the link. Throw an error if link doesn’t exist. Parts of inputs that do not exist will be set to NaN."
  },
  {
    "objectID": "docstrings/medyan.get_link_mechanics-57ba2f1a141d0156.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--medyan.linkdata---c8d94eda9cfd0bb4",
    "href": "docstrings/medyan.get_link_mechanics-57ba2f1a141d0156.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--medyan.linkdata---c8d94eda9cfd0bb4",
    "title": "MEDYAN.get_link_mechanics",
    "section": "",
    "text": "get_link_mechanics(c::Context, link::Link, [d::LinkData])\nReturn a NamedTuple of (;energy, inputs, forces, torques) of the link. Throw an error if link doesn’t exist. Parts of inputs that do not exist will be set to NaN."
  },
  {
    "objectID": "docstrings/medyan.get_position-5ca1f4a736664040.html",
    "href": "docstrings/medyan.get_position-5ca1f4a736664040.html",
    "title": "MEDYAN.get_position",
    "section": "",
    "text": "get_position(c::Context, x::Union{Tag, Place})::SVector{3, Float64}\nReturn the position of x. Throw an error if x doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.get_position-5ca1f4a736664040.html#tuple-medyan.context--medyan.tag--fedde092ce150cde",
    "href": "docstrings/medyan.get_position-5ca1f4a736664040.html#tuple-medyan.context--medyan.tag--fedde092ce150cde",
    "title": "MEDYAN.get_position",
    "section": "",
    "text": "get_position(c::Context, x::Union{Tag, Place})::SVector{3, Float64}\nReturn the position of x. Throw an error if x doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.set_time--a6dd8f73f68a3759.html",
    "href": "docstrings/medyan.set_time--a6dd8f73f68a3759.html",
    "title": "MEDYAN.set_time!",
    "section": "",
    "text": "set_time!(c::MEDYAN.Context, x::Float64) -&gt; Float64\nTime (s)"
  },
  {
    "objectID": "docstrings/medyan.set_time--a6dd8f73f68a3759.html#tuple-medyan.context--float64--5f0fd8a48f76a337",
    "href": "docstrings/medyan.set_time--a6dd8f73f68a3759.html#tuple-medyan.context--float64--5f0fd8a48f76a337",
    "title": "MEDYAN.set_time!",
    "section": "",
    "text": "set_time!(c::MEDYAN.Context, x::Float64) -&gt; Float64\nTime (s)"
  },
  {
    "objectID": "reference/fileformats.html",
    "href": "reference/fileformats.html",
    "title": "File Formats",
    "section": "",
    "text": "MEDYAN.jl uses Zarr v2 zip store for saving snapshots.\n\n\n\n\n\n\nOther Languages\n\n\n\nTo open the snapshots in python use zarr\n\n\n\n\nTrajectory outputs and logs are stored in a directory.\nThe output directory contains a traj sub directory with a header.json file, many $(most significant digits)/$(3 least significant digits).zip files, and finally a footer.json.\nThe initial state returned by setup is stored in traj/0/000.zip.\nInside the traj/$(i)/$(j).zip there is a snap/medyan group containing the snapshot of the MEDYAN.Context after the step. Other state may be stored in child groups of snap.\nThe header.json file also has a top level \"medyan\" key with a value describing the system being simulated.\nOther header information may be under other top level keys.\nSee https://github.com/medyan-dev/MEDYANSimRunner.jl for more details on the output directory structure.\n\n\n\nheader.json[\"medyan\"] contains static metadata about the simulation.\n\n\n\nusing MEDYAN\nimport JSON3\ncinit, s = MEDYAN.example_all_sites_context()\nJSON3.pretty(MEDYAN.header(cinit); allow_inf = true)\n\n{\n    \"version\": \"0.13.0\",\n    \"medyanInfo\": {\n        \"title\": \"MEDYAN.jl\",\n        \"version\": \"0.2.1\",\n        \"sourceCodeUrl\": \"https://github.com/medyan-dev/MEDYAN.jl\"\n    },\n    \"size\": {\n        \"x(nm)\": 2000,\n        \"y(nm)\": 500,\n        \"z(nm)\": 500\n    },\n    \"chem_grid_size\": {\n        \"nx\": 4,\n        \"ny\": 1,\n        \"nz\": 1,\n        \"voxel_x(nm)\": 500,\n        \"voxel_y(nm)\": 500,\n        \"voxel_z(nm)\": 500\n    },\n    \"diffusing_species\": [\n        {\n            \"name\": \"b\"\n        },\n        {\n            \"name\": \"c\"\n        }\n    ],\n    \"membrane_diffusing_species\": [\n        {\n            \"name\": \"ma\"\n        },\n        {\n            \"name\": \"mb\"\n        },\n        {\n            \"name\": \"mc\"\n        }\n    ],\n    \"fixed_species\": [\n        {\n            \"name\": \"d\"\n        },\n        {\n            \"name\": \"a\"\n        }\n    ],\n    \"fila\": [\n        {\n            \"name\": \"a\",\n            \"radius(nm)\": 3,\n            \"monomerstates\": [\n                \"me\",\n                \"a\",\n                \"b\",\n                \"c\",\n                \"pe\"\n            ]\n        },\n        {\n            \"name\": \"b\",\n            \"radius(nm)\": 3,\n            \"monomerstates\": [\n                \"me\",\n                \"a\",\n                \"b\",\n                \"c\",\n                \"pe\"\n            ]\n        }\n    ],\n    \"links\": [\n        {\n            \"name\": \"fila_tip_restraint\",\n            \"places\": [\n                \"fila_tip\"\n            ]\n        },\n        {\n            \"name\": \"fila_mono_restraint\",\n            \"places\": [\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"fila_mono_dummy\",\n            \"places\": [\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"fila_mono_2bonds\",\n            \"places\": [\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"fila_mono_distance_bond\",\n            \"places\": [\n                \"fila_mono\",\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"a\",\n            \"places\": [\n                \"fila_mono\",\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"b\",\n            \"places\": [\n                \"fila_mono\",\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"c\",\n            \"places\": [\n                \"fila_mono\",\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"memb_vert_restraint\",\n            \"places\": [\n                \"memb_vert\"\n            ]\n        }\n    ]\n}\n\n\n\n\n\n\nA snapshot describes the state of a Context at a single point in time.\nA snapshot can be used to set the state of a Context if it was constructed with the same system and parameters as the Context used to create the snapshot. Trying to load a snapshot into a Context constructed with a different system or parameters may lead to unexpected results.\nBy default units are in nm, pN, and s. Coordinates are relative to the center of the grid.\nThe snapshot doesn’t hold the exact full state of a Context, simulations restarted from a snapshot may not have the exact same results because:\n\nThe snapshot doesn’t store the state of the random number generator.\nCoordinates may be rounded to save disk space.\nDictionaries and other internal data structures may get reordered and or resorted when the snapshot is loaded.\nMultithreading may be non deterministic.\n\nBut if rounding isn’t too extreme, the reloaded Context should have the same statistics.\n\n\nThe snapshot format is versioned by the “version” attribute. The current snapshot version is:\n\nusing MEDYAN\nMEDYAN.SNAPSHOT_VERSION\n\nv\"0.13.0\"\n\n\nCurrently before snapshot version 1.0.0 anything goes.\nAfter snapshot version 1.0.0 is released.\nSnapshots written with a previous snapshot version above v\"1\" should be readable. Snapshots written with a newer snapshot version are generally not readable.\nIf new agent types are added to MEDYAN.jl, usually only the minor version needs to be updated, as nothing special needs to be done to read older snapshot versions without that added agent type.\nIf new data is added to an existing agent type, also usually only the minor version needs to be increment, though the case of the new data not existing must be handled with some default.\nIf the way an existing agent type is stored significantly changes, such that external code analyzing the snapshot would need to be modified, the major version must be incremented. Also if possible there should be a function to update a snapshot from the old version to the new version.\n\n\nAny group, dataset, or attribute name prefixed with with “#” can change format or be removed without changing the snapshot version.\n“#experimental” is used for saving new types of agents or other data that doesn’t have a stable format yet.\n“#comment” is used for saving human readable comments that could change in format or wording.\n\n\n\n\n\nusing MEDYAN\nusing SmallZarrGroups\ncinit, s = MEDYAN.example_all_sites_context()\ngroup = MEDYAN.snapshot(cinit)\n\n\n\n\n\n\n\nSnapshot 📂\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\ntime (s)\n\nattrs(group)[\"time (s)\"]\nDefault: No change\nSee MEDYAN.set_time!\n\n\n\nversion\n\nattrs(group)[\"version\"]\nDefault: No change\nSee Snapshot Versioning\n\n\n\nuuid\n\nattrs(group)[\"uuid\"]\nMust be set to exactly “37eee81f-88ae-4d11-b6b3-d38e1ccf0a08”\nto be considered a valid MEDYAN snapshot.\n\n\n\n\n\n\n\n\n\n\n🔢\n\n\n\n\n\n\n\ndiffusingcounts\n\ncollect(group[\"diffusingcounts\"])\nDefault: Empty\nIndexed by [species id, compartment id] to give count.\nSee MEDYAN.chem_adddiffusingcount!\n\n\n\nfixedcounts\n\ncollect(group[\"fixedcounts\"])\nDefault: Empty\nIndexed by [species id, compartment id] to give count.\nSee MEDYAN.chem_addfixedcount!\n\n\n\n\n\n\n\n\n\n\n\n📂\n\n\n\n\n\n\n\n\n\n\n\n\nchemboundary\n\n\n\n\n\nThere is a dataset for each type of boundary, the total boundary is an intersection of the following.\nSee MEDYAN.Boundary\n\n\n🔢 capsules\n\ncollect(group[\"chemboundary/capsules\"])\nDefault: Empty\nEach column of the dataset is a capsule.\n\n\n\n🔢 planes\n\ncollect(group[\"chemboundary/planes\"])\nDefault: Empty\nEach column of the dataset is a plane.\n\n\n\n\n\n\n\n\n\n\n\n\nfila\n\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\nversion\n\nattrs(group[\"fila\"])[\"version\"]\nfila data major version, version 1 is described here.\n\n\n\nposition_scale\n\nattrs(group[\"fila\"])[\"position_scale\"]\nDefault: No effect\nFilament positions were rounded to the nearest 2^-position_scale nm when saved.\n\n\n\n\n\nThere is a subgroup for each filament type with at least one filament. The subgroups are named by their filament typeid. For example:\n\n\n\n\n\n\n\n📂 1\n\n\n\n\n\n\n\n🔢 load\n\ncollect(group[\"fila/1/load\"])\nFilament end load forces (pN).\nEach row is the load force on the minus and plus ends of a filament.\n\n\n\n🔢 newm\n\ncollect(group[\"fila/1/newm\"])\nNumber of newly added monomers to the filament minus ends since last minimization.\n\n\n\n🔢 newp\n\ncollect(group[\"fila/1/newp\"])\nNumber of newly added monomers to the filament plus ends since last minimization.\n\n\n\n🔢 clen\n\ncollect(group[\"fila/1/clen\"])\nNumber of cylinders per filament.\n\n\n\n🔢 mlen\n\ncollect(group[\"fila/1/mlen\"])\nNumber of monomers per filament.\n\n\n\n🔢 nm\n\ncollect(group[\"fila/1/nm\"])\nThe monomer ids at the minus ends of the cylinders.\n                                   |\n                        -----+-----|-----+-----\n    minus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                        -----+-----|-----+-----\n                                   |\n                                   ^ A nodeposition is indicated by the line.\nThe monomer id with parenthesis (M) will in node_mids\n\n\n\n🔢 np\n\ncollect(group[\"fila/1/np\"])\nEach row is a node position in nm.\n\n\n\n🔢 ms\n\ncollect(group[\"fila/1/ms\"])\nMonomer states.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlinks\n\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\nversion\n\nattrs(group[\"links\"])[\"version\"]\nlink data major version, version 1 is described here.\n\n\n\n\n\nThere is a subgroup for each link type with at least one current or past link. The subgroups are named by their link typeid. For example:\n\n\n\n\n\n\n\n📂 8\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\nnum_links\n\nattrs(group[\"links/8\"])[\"num_links\"]\nNumber of links of this type.\n\n\n\nnext_lid\n\nattrs(group[\"links/8\"])[\"next_lid\"]\nThe default next link id for new links.\nThis should be greater than all the existing link ids of this type.\n\n\n\n\n\n\n🔢 be\n\ncollect(group[\"links/8/be\"])\nThe bonds that are enabled.\nEach row of this matrix represents a link, each column represents a bond.\n\n\n\n🔢 ids\n\ncollect(group[\"links/8/ids\"])\nThe link ids.\n\n\n\n🔢 im\n\ncollect(group[\"links/8/im\"])\nIs the link minimized. A link is marked as not minimized when created, and then marked as minimized after running mechanics.\n\n\n\n🔢 re\n\ncollect(group[\"links/8/re\"])\nThe reactions that are enabled.\nEach row of this matrix represents a link, each column represents a reaction.\n\n\n\n🔢 tags\n\ncollect(group[\"links/8/tags\"])\nThe tags of the places the links are attached to.\nEach row of this matrix represents a link.\nEach place has two adjacent columns. First a index into the tags, and next a tag generation. The place type can be found in the header file. If the place is not attached, the generation and index will be zero.\n\n\n\n📂 bs\n\nDefault: default bond states\nSee MEDYAN.update_link!.\nThe state of link bonds, organized in a nested struct of vector like form. Any static arrays will be unwrapped into a tuple of vectors, in column major order. The “name” attribute of each subgroup and dataset is the corresponding property name in the StructArray Any property in the default state that isn’t in the snapshot will stay at its default value.\n\ngroup[\"links/8/bs\"]\n\n📂\n└─ 📂 1 🏷️ name =&gt; \"1\",\n   ├─ 🔢 1: 4 Float64  🏷️ name =&gt; \"k\",\n   └─ 🔢 2: 4 Float64  🏷️ name =&gt; \"L0\",\n\n\n\n\n\n📂 s\n\nDefault: default states\nSee MEDYAN.update_link!.\nThe state of link, organized in a nested struct of vector like form. Any static arrays will be unwrapped into a tuple of vectors, in column major order. The “name” attribute of each subgroup and dataset is the corresponding property name in the StructArray Any property in the default state that isn’t in the snapshot will stay at its default value.\n\ngroup[\"links/8/s\"]\n\n📂\n├─ 🔢 1: 4 Int64  🏷️ name =&gt; \"a\",\n└─ 🔢 2: 4 Float64  🏷️ name =&gt; \"b\",\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmechboundary\n\n\n\n\n\nThere is a dataset for each type of boundary, the total boundary is an intersection of the following.\nSee MEDYAN.Boundary\n\n\n🔢 capsules\n\ncollect(group[\"mechboundary/capsules\"])\nDefault: Empty\nEach column of the dataset is a capsule.\n\n\n\n🔢 planes\n\ncollect(group[\"mechboundary/planes\"])\nDefault: Empty\nEach column of the dataset is a plane.\n\n\n\n\n\n\n\n\n\n\n\n\nmemb\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\nversion\n\nattrs(group[\"memb\"])[\"version\"]\nmemb data major version, version 1 is described here.\n\n\n\nnum_membranes\n\nattrs(group[\"memb\"])[\"num_membranes\"]\nTotal number of membranes.\n\n\n\nposition_scale\n\nattrs(group[\"memb\"])[\"position_scale\"]\nDefault: No effect\nPositions were rounded to the nearest 2^-position_scale nm when saved.\n\n\n\n\nThere is a subgroup for each membrane. The subgroups are named by the membrane index. For example:\n\n\n\n\n\n\n\n📂 1\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\ntypeid\n\nattrs(group[\"memb/1\"])[\"typeid\"]\nThis membrane’s type id.\n\n\n\n\n\n\n🔢 trilist\n\ncollect(group[\"memb/1/trilist\"])\nEach column is the 3 vertex indexes of a triangle. Indexes are one based, and follow the right hand rule. Looking at the triangle from the outside in, they have counterclockwise winding.\n\n\n\n🔢 vertlist\n\ncollect(group[\"memb/1/vertlist\"])\nEach column is a vertex coordinate in nm.\n\n\n\noptional 🔢 copynumbers\n\ncollect(group[\"memb/1/copynumbers\"])\nArray of vertex membrane species copynumbers. If the membrane has no defined species this dataset will not exist.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTags\n\n\n\n\n\nThere is a subgroup for each tag type with at least one current or past tag. Each tag type stores tag generations as a vector of UInt32 in g and packed places in p_n where n is the packed format version. If the generation is odd the tag is valid. otherwise the tag is an empty slot à la https://docs.rs/slotmap/latest/slotmap/.\n\n\n\n\n\n\n📂 fila_mono\n\n\n\n\n\n\n\n🔢 p_1\n\ncollect(group[\"tags/fila_mono/p_1\"])\nThe filament monomer places for each tag stored as a vector of UInt64. Not all monomers will have tags. For tag i of n total tags, p_1[i]&gt;&gt;&gt;32 is the filament type id, (p_1[i]%UInt32)&gt;&gt;1 is the filament index, and p_1[i+n] is the zigzag encoded monomer id.\n\n\n\n\n\n\n\n\n\n\n📂 fila_tip\n\n\n\n\n\n\n\n🔢 p_1\n\ncollect(group[\"tags/fila_tip/p_1\"])\nThe filament tip places for each tag stored as a vector of UInt64. All filament tips will have tags. For tag i of n total tags, p_1[i]&gt;&gt;&gt;32 is the filament type id, (p_1[i]%UInt32)&gt;&gt;1 is the filament index, and p_1[i] is odd for the minus end of the filament and even for the plus end.",
    "crumbs": [
      "Reference",
      "File Formats"
    ]
  },
  {
    "objectID": "reference/fileformats.html#trajectory-output-directory",
    "href": "reference/fileformats.html#trajectory-output-directory",
    "title": "File Formats",
    "section": "",
    "text": "Trajectory outputs and logs are stored in a directory.\nThe output directory contains a traj sub directory with a header.json file, many $(most significant digits)/$(3 least significant digits).zip files, and finally a footer.json.\nThe initial state returned by setup is stored in traj/0/000.zip.\nInside the traj/$(i)/$(j).zip there is a snap/medyan group containing the snapshot of the MEDYAN.Context after the step. Other state may be stored in child groups of snap.\nThe header.json file also has a top level \"medyan\" key with a value describing the system being simulated.\nOther header information may be under other top level keys.\nSee https://github.com/medyan-dev/MEDYANSimRunner.jl for more details on the output directory structure.",
    "crumbs": [
      "Reference",
      "File Formats"
    ]
  },
  {
    "objectID": "reference/fileformats.html#medyan-header-json-object.",
    "href": "reference/fileformats.html#medyan-header-json-object.",
    "title": "File Formats",
    "section": "",
    "text": "header.json[\"medyan\"] contains static metadata about the simulation.\n\n\n\nusing MEDYAN\nimport JSON3\ncinit, s = MEDYAN.example_all_sites_context()\nJSON3.pretty(MEDYAN.header(cinit); allow_inf = true)\n\n{\n    \"version\": \"0.13.0\",\n    \"medyanInfo\": {\n        \"title\": \"MEDYAN.jl\",\n        \"version\": \"0.2.1\",\n        \"sourceCodeUrl\": \"https://github.com/medyan-dev/MEDYAN.jl\"\n    },\n    \"size\": {\n        \"x(nm)\": 2000,\n        \"y(nm)\": 500,\n        \"z(nm)\": 500\n    },\n    \"chem_grid_size\": {\n        \"nx\": 4,\n        \"ny\": 1,\n        \"nz\": 1,\n        \"voxel_x(nm)\": 500,\n        \"voxel_y(nm)\": 500,\n        \"voxel_z(nm)\": 500\n    },\n    \"diffusing_species\": [\n        {\n            \"name\": \"b\"\n        },\n        {\n            \"name\": \"c\"\n        }\n    ],\n    \"membrane_diffusing_species\": [\n        {\n            \"name\": \"ma\"\n        },\n        {\n            \"name\": \"mb\"\n        },\n        {\n            \"name\": \"mc\"\n        }\n    ],\n    \"fixed_species\": [\n        {\n            \"name\": \"d\"\n        },\n        {\n            \"name\": \"a\"\n        }\n    ],\n    \"fila\": [\n        {\n            \"name\": \"a\",\n            \"radius(nm)\": 3,\n            \"monomerstates\": [\n                \"me\",\n                \"a\",\n                \"b\",\n                \"c\",\n                \"pe\"\n            ]\n        },\n        {\n            \"name\": \"b\",\n            \"radius(nm)\": 3,\n            \"monomerstates\": [\n                \"me\",\n                \"a\",\n                \"b\",\n                \"c\",\n                \"pe\"\n            ]\n        }\n    ],\n    \"links\": [\n        {\n            \"name\": \"fila_tip_restraint\",\n            \"places\": [\n                \"fila_tip\"\n            ]\n        },\n        {\n            \"name\": \"fila_mono_restraint\",\n            \"places\": [\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"fila_mono_dummy\",\n            \"places\": [\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"fila_mono_2bonds\",\n            \"places\": [\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"fila_mono_distance_bond\",\n            \"places\": [\n                \"fila_mono\",\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"a\",\n            \"places\": [\n                \"fila_mono\",\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"b\",\n            \"places\": [\n                \"fila_mono\",\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"c\",\n            \"places\": [\n                \"fila_mono\",\n                \"fila_mono\"\n            ]\n        },\n        {\n            \"name\": \"memb_vert_restraint\",\n            \"places\": [\n                \"memb_vert\"\n            ]\n        }\n    ]\n}",
    "crumbs": [
      "Reference",
      "File Formats"
    ]
  },
  {
    "objectID": "reference/fileformats.html#snapshot-group",
    "href": "reference/fileformats.html#snapshot-group",
    "title": "File Formats",
    "section": "",
    "text": "A snapshot describes the state of a Context at a single point in time.\nA snapshot can be used to set the state of a Context if it was constructed with the same system and parameters as the Context used to create the snapshot. Trying to load a snapshot into a Context constructed with a different system or parameters may lead to unexpected results.\nBy default units are in nm, pN, and s. Coordinates are relative to the center of the grid.\nThe snapshot doesn’t hold the exact full state of a Context, simulations restarted from a snapshot may not have the exact same results because:\n\nThe snapshot doesn’t store the state of the random number generator.\nCoordinates may be rounded to save disk space.\nDictionaries and other internal data structures may get reordered and or resorted when the snapshot is loaded.\nMultithreading may be non deterministic.\n\nBut if rounding isn’t too extreme, the reloaded Context should have the same statistics.\n\n\nThe snapshot format is versioned by the “version” attribute. The current snapshot version is:\n\nusing MEDYAN\nMEDYAN.SNAPSHOT_VERSION\n\nv\"0.13.0\"\n\n\nCurrently before snapshot version 1.0.0 anything goes.\nAfter snapshot version 1.0.0 is released.\nSnapshots written with a previous snapshot version above v\"1\" should be readable. Snapshots written with a newer snapshot version are generally not readable.\nIf new agent types are added to MEDYAN.jl, usually only the minor version needs to be updated, as nothing special needs to be done to read older snapshot versions without that added agent type.\nIf new data is added to an existing agent type, also usually only the minor version needs to be increment, though the case of the new data not existing must be handled with some default.\nIf the way an existing agent type is stored significantly changes, such that external code analyzing the snapshot would need to be modified, the major version must be incremented. Also if possible there should be a function to update a snapshot from the old version to the new version.\n\n\nAny group, dataset, or attribute name prefixed with with “#” can change format or be removed without changing the snapshot version.\n“#experimental” is used for saving new types of agents or other data that doesn’t have a stable format yet.\n“#comment” is used for saving human readable comments that could change in format or wording.\n\n\n\n\n\nusing MEDYAN\nusing SmallZarrGroups\ncinit, s = MEDYAN.example_all_sites_context()\ngroup = MEDYAN.snapshot(cinit)\n\n\n\n\n\n\n\nSnapshot 📂\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\ntime (s)\n\nattrs(group)[\"time (s)\"]\nDefault: No change\nSee MEDYAN.set_time!\n\n\n\nversion\n\nattrs(group)[\"version\"]\nDefault: No change\nSee Snapshot Versioning\n\n\n\nuuid\n\nattrs(group)[\"uuid\"]\nMust be set to exactly “37eee81f-88ae-4d11-b6b3-d38e1ccf0a08”\nto be considered a valid MEDYAN snapshot.\n\n\n\n\n\n\n\n\n\n\n🔢\n\n\n\n\n\n\n\ndiffusingcounts\n\ncollect(group[\"diffusingcounts\"])\nDefault: Empty\nIndexed by [species id, compartment id] to give count.\nSee MEDYAN.chem_adddiffusingcount!\n\n\n\nfixedcounts\n\ncollect(group[\"fixedcounts\"])\nDefault: Empty\nIndexed by [species id, compartment id] to give count.\nSee MEDYAN.chem_addfixedcount!\n\n\n\n\n\n\n\n\n\n\n\n📂\n\n\n\n\n\n\n\n\n\n\n\n\nchemboundary\n\n\n\n\n\nThere is a dataset for each type of boundary, the total boundary is an intersection of the following.\nSee MEDYAN.Boundary\n\n\n🔢 capsules\n\ncollect(group[\"chemboundary/capsules\"])\nDefault: Empty\nEach column of the dataset is a capsule.\n\n\n\n🔢 planes\n\ncollect(group[\"chemboundary/planes\"])\nDefault: Empty\nEach column of the dataset is a plane.\n\n\n\n\n\n\n\n\n\n\n\n\nfila\n\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\nversion\n\nattrs(group[\"fila\"])[\"version\"]\nfila data major version, version 1 is described here.\n\n\n\nposition_scale\n\nattrs(group[\"fila\"])[\"position_scale\"]\nDefault: No effect\nFilament positions were rounded to the nearest 2^-position_scale nm when saved.\n\n\n\n\n\nThere is a subgroup for each filament type with at least one filament. The subgroups are named by their filament typeid. For example:\n\n\n\n\n\n\n\n📂 1\n\n\n\n\n\n\n\n🔢 load\n\ncollect(group[\"fila/1/load\"])\nFilament end load forces (pN).\nEach row is the load force on the minus and plus ends of a filament.\n\n\n\n🔢 newm\n\ncollect(group[\"fila/1/newm\"])\nNumber of newly added monomers to the filament minus ends since last minimization.\n\n\n\n🔢 newp\n\ncollect(group[\"fila/1/newp\"])\nNumber of newly added monomers to the filament plus ends since last minimization.\n\n\n\n🔢 clen\n\ncollect(group[\"fila/1/clen\"])\nNumber of cylinders per filament.\n\n\n\n🔢 mlen\n\ncollect(group[\"fila/1/mlen\"])\nNumber of monomers per filament.\n\n\n\n🔢 nm\n\ncollect(group[\"fila/1/nm\"])\nThe monomer ids at the minus ends of the cylinders.\n                                   |\n                        -----+-----|-----+-----\n    minus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                        -----+-----|-----+-----\n                                   |\n                                   ^ A nodeposition is indicated by the line.\nThe monomer id with parenthesis (M) will in node_mids\n\n\n\n🔢 np\n\ncollect(group[\"fila/1/np\"])\nEach row is a node position in nm.\n\n\n\n🔢 ms\n\ncollect(group[\"fila/1/ms\"])\nMonomer states.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlinks\n\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\nversion\n\nattrs(group[\"links\"])[\"version\"]\nlink data major version, version 1 is described here.\n\n\n\n\n\nThere is a subgroup for each link type with at least one current or past link. The subgroups are named by their link typeid. For example:\n\n\n\n\n\n\n\n📂 8\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\nnum_links\n\nattrs(group[\"links/8\"])[\"num_links\"]\nNumber of links of this type.\n\n\n\nnext_lid\n\nattrs(group[\"links/8\"])[\"next_lid\"]\nThe default next link id for new links.\nThis should be greater than all the existing link ids of this type.\n\n\n\n\n\n\n🔢 be\n\ncollect(group[\"links/8/be\"])\nThe bonds that are enabled.\nEach row of this matrix represents a link, each column represents a bond.\n\n\n\n🔢 ids\n\ncollect(group[\"links/8/ids\"])\nThe link ids.\n\n\n\n🔢 im\n\ncollect(group[\"links/8/im\"])\nIs the link minimized. A link is marked as not minimized when created, and then marked as minimized after running mechanics.\n\n\n\n🔢 re\n\ncollect(group[\"links/8/re\"])\nThe reactions that are enabled.\nEach row of this matrix represents a link, each column represents a reaction.\n\n\n\n🔢 tags\n\ncollect(group[\"links/8/tags\"])\nThe tags of the places the links are attached to.\nEach row of this matrix represents a link.\nEach place has two adjacent columns. First a index into the tags, and next a tag generation. The place type can be found in the header file. If the place is not attached, the generation and index will be zero.\n\n\n\n📂 bs\n\nDefault: default bond states\nSee MEDYAN.update_link!.\nThe state of link bonds, organized in a nested struct of vector like form. Any static arrays will be unwrapped into a tuple of vectors, in column major order. The “name” attribute of each subgroup and dataset is the corresponding property name in the StructArray Any property in the default state that isn’t in the snapshot will stay at its default value.\n\ngroup[\"links/8/bs\"]\n\n📂\n└─ 📂 1 🏷️ name =&gt; \"1\",\n   ├─ 🔢 1: 4 Float64  🏷️ name =&gt; \"k\",\n   └─ 🔢 2: 4 Float64  🏷️ name =&gt; \"L0\",\n\n\n\n\n\n📂 s\n\nDefault: default states\nSee MEDYAN.update_link!.\nThe state of link, organized in a nested struct of vector like form. Any static arrays will be unwrapped into a tuple of vectors, in column major order. The “name” attribute of each subgroup and dataset is the corresponding property name in the StructArray Any property in the default state that isn’t in the snapshot will stay at its default value.\n\ngroup[\"links/8/s\"]\n\n📂\n├─ 🔢 1: 4 Int64  🏷️ name =&gt; \"a\",\n└─ 🔢 2: 4 Float64  🏷️ name =&gt; \"b\",\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmechboundary\n\n\n\n\n\nThere is a dataset for each type of boundary, the total boundary is an intersection of the following.\nSee MEDYAN.Boundary\n\n\n🔢 capsules\n\ncollect(group[\"mechboundary/capsules\"])\nDefault: Empty\nEach column of the dataset is a capsule.\n\n\n\n🔢 planes\n\ncollect(group[\"mechboundary/planes\"])\nDefault: Empty\nEach column of the dataset is a plane.\n\n\n\n\n\n\n\n\n\n\n\n\nmemb\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\nversion\n\nattrs(group[\"memb\"])[\"version\"]\nmemb data major version, version 1 is described here.\n\n\n\nnum_membranes\n\nattrs(group[\"memb\"])[\"num_membranes\"]\nTotal number of membranes.\n\n\n\nposition_scale\n\nattrs(group[\"memb\"])[\"position_scale\"]\nDefault: No effect\nPositions were rounded to the nearest 2^-position_scale nm when saved.\n\n\n\n\nThere is a subgroup for each membrane. The subgroups are named by the membrane index. For example:\n\n\n\n\n\n\n\n📂 1\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\ntypeid\n\nattrs(group[\"memb/1\"])[\"typeid\"]\nThis membrane’s type id.\n\n\n\n\n\n\n🔢 trilist\n\ncollect(group[\"memb/1/trilist\"])\nEach column is the 3 vertex indexes of a triangle. Indexes are one based, and follow the right hand rule. Looking at the triangle from the outside in, they have counterclockwise winding.\n\n\n\n🔢 vertlist\n\ncollect(group[\"memb/1/vertlist\"])\nEach column is a vertex coordinate in nm.\n\n\n\noptional 🔢 copynumbers\n\ncollect(group[\"memb/1/copynumbers\"])\nArray of vertex membrane species copynumbers. If the membrane has no defined species this dataset will not exist.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTags\n\n\n\n\n\nThere is a subgroup for each tag type with at least one current or past tag. Each tag type stores tag generations as a vector of UInt32 in g and packed places in p_n where n is the packed format version. If the generation is odd the tag is valid. otherwise the tag is an empty slot à la https://docs.rs/slotmap/latest/slotmap/.\n\n\n\n\n\n\n📂 fila_mono\n\n\n\n\n\n\n\n🔢 p_1\n\ncollect(group[\"tags/fila_mono/p_1\"])\nThe filament monomer places for each tag stored as a vector of UInt64. Not all monomers will have tags. For tag i of n total tags, p_1[i]&gt;&gt;&gt;32 is the filament type id, (p_1[i]%UInt32)&gt;&gt;1 is the filament index, and p_1[i+n] is the zigzag encoded monomer id.\n\n\n\n\n\n\n\n\n\n\n📂 fila_tip\n\n\n\n\n\n\n\n🔢 p_1\n\ncollect(group[\"tags/fila_tip/p_1\"])\nThe filament tip places for each tag stored as a vector of UInt64. All filament tips will have tags. For tag i of n total tags, p_1[i]&gt;&gt;&gt;32 is the filament type id, (p_1[i]%UInt32)&gt;&gt;1 is the filament index, and p_1[i] is odd for the minus end of the filament and even for the plus end.",
    "crumbs": [
      "Reference",
      "File Formats"
    ]
  },
  {
    "objectID": "docstrings.html",
    "href": "docstrings.html",
    "title": "Docstrings",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\n\n\n\n\n\nBase.:*\n\n\n\n\n\n\nBase.delete!\n\n\n\n\n\n\nBase.empty!\n\n\n\n\n\n\nBase.getindex\n\n\n\n\n\n\nBase.haskey\n\n\n\n\n\n\nBase.iterate\n\n\n\n\n\n\nBase.length\n\n\n\n\n\n\nBase.push!\n\n\n\n\n\n\nBase.setindex!\n\n\n\n\n\n\nMEDYAN.AgentNames\n\n\n\n\n\n\nMEDYAN.Boundary\n\n\n\n\n\n\nMEDYAN.Context\n\n\n\n\n\n\nMEDYAN.CubicGrid\n\n\n\n\n\n\nMEDYAN.Decimated2MonSiteMinAngleRange\n\n\n\n\n\n\nMEDYAN.Decimated2MonSiteRange\n\n\n\n\n\n\nMEDYAN.FilamentEndSiteGeneral\n\n\n\n\n\n\nMEDYAN.FilamentSiteGeneral\n\n\n\n\n\n\nMEDYAN.MembraneSiteDiffusing\n\n\n\n\n\n\nMEDYAN.MembraneSpeciesParams\n\n\n\n\n\n\nMEDYAN.SysDef\n\n\n\n\n\n\nMEDYAN.VertexName\n\n\n\n\n\n\nMEDYAN.VertexState\n\n\n\n\n\n\nMEDYAN.adapt_membranes!\n\n\n\n\n\n\nMEDYAN.add_decimated_2mon_site!\n\n\n\n\n\n\nMEDYAN.add_diffusing_count!\n\n\n\n\n\n\nMEDYAN.add_diffusion_coeff!\n\n\n\n\n\n\nMEDYAN.add_filament_params!\n\n\n\n\n\n\nMEDYAN.add_membranesitereaction!\n\n\n\n\n\n\nMEDYAN.adddiffusingcount_rand!\n\n\n\n\n\n\nMEDYAN.addfilament_reaction!\n\n\n\n\n\n\nMEDYAN.addfilamentend_reaction!\n\n\n\n\n\n\nMEDYAN.addfilamentendsite!\n\n\n\n\n\n\nMEDYAN.addfilamentsite!\n\n\n\n\n\n\nMEDYAN.addmembranediffusingcount_rand!\n\n\n\n\n\n\nMEDYAN.addmembranesite!\n\n\n\n\n\n\nMEDYAN.addpossiblecadherinsite!\n\n\n\n\n\n\nMEDYAN.addreaction!\n\n\n\n\n\n\nMEDYAN.addreactioncallback!\n\n\n\n\n\n\nMEDYAN.boundary_box\n\n\n\n\n\n\nMEDYAN.boundary_capsule\n\n\n\n\n\n\nMEDYAN.boundary_cylinder\n\n\n\n\n\n\nMEDYAN.boundary_plane\n\n\n\n\n\n\nMEDYAN.centerof\n\n\n\n\n\n\nMEDYAN.chem_adddiffusingcount!\n\n\n\n\n\n\nMEDYAN.chem_addfixedcount!\n\n\n\n\n\n\nMEDYAN.compute_all_membrane_geometry!_system\n\n\n\n\n\n\nMEDYAN.defer_chem_caching!\n\n\n\n\n\n\nMEDYAN.depolymerize_fila!\n\n\n\n\n\n\nMEDYAN.fila_mono_ids\n\n\n\n\n\n\nMEDYAN.fila_mono_states\n\n\n\n\n\n\nMEDYAN.fila_node_mids\n\n\n\n\n\n\nMEDYAN.fila_node_positions\n\n\n\n\n\n\nMEDYAN.fila_num_nodes\n\n\n\n\n\n\nMEDYAN.fila_num_unmin_ends\n\n\n\n\n\n\nMEDYAN.fila_tip_tags\n\n\n\n\n\n\nMEDYAN.filter_grididat\n\n\n\n\n\n\nMEDYAN.get_all_links\n\n\n\n\n\n\nMEDYAN.get_all_tags\n\n\n\n\n\n\nMEDYAN.get_bond_enabled\n\n\n\n\n\n\nMEDYAN.get_bond_states\n\n\n\n\n\n\nMEDYAN.get_chem_state\n\n\n\n\n\n\nMEDYAN.get_directions\n\n\n\n\n\n\nMEDYAN.get_link_mechanics\n\n\n\n\n\n\nMEDYAN.get_position\n\n\n\n\n\n\nMEDYAN.get_reaction_enabled\n\n\n\n\n\n\nMEDYAN.get_state\n\n\n\n\n\n\nMEDYAN.grididat\n\n\n\n\n\n\nMEDYAN.has_tag\n\n\n\n\n\n\nMEDYAN.is_chem_cache_valid\n\n\n\n\n\n\nMEDYAN.is_minimized\n\n\n\n\n\n\nMEDYAN.link2tags\n\n\n\n\n\n\nMEDYAN.link_exists\n\n\n\n\n\n\nMEDYAN.load_snapshot!\n\n\n\n\n\n\nMEDYAN.make_fila!\n\n\n\n\n\n\nMEDYAN.make_fila_rand!\n\n\n\n\n\n\nMEDYAN.make_link!\n\n\n\n\n\n\nMEDYAN.minimize_energy!\n\n\n\n\n\n\nMEDYAN.newmembrane!\n\n\n\n\n\n\nMEDYAN.num_directions\n\n\n\n\n\n\nMEDYAN.num_fila\n\n\n\n\n\n\nMEDYAN.num_fila_types\n\n\n\n\n\n\nMEDYAN.num_link_types\n\n\n\n\n\n\nMEDYAN.num_vertexwithstate\n\n\n\n\n\n\nMEDYAN.pick_rand_fila_mono_site\n\n\n\n\n\n\nMEDYAN.pick_rand_fila_tip_site\n\n\n\n\n\n\nMEDYAN.place2links\n\n\n\n\n\n\nMEDYAN.place2tag\n\n\n\n\n\n\nMEDYAN.place_exists\n\n\n\n\n\n\nMEDYAN.polymerize_fila!\n\n\n\n\n\n\nMEDYAN.randompoint\n\n\n\n\n\n\nMEDYAN.refresh_chem_cache!\n\n\n\n\n\n\nMEDYAN.remove_fila!\n\n\n\n\n\n\nMEDYAN.remove_link!\n\n\n\n\n\n\nMEDYAN.resolve_all_filament_mesh_crossing!\n\n\n\n\n\n\nMEDYAN.run_chemistry!\n\n\n\n\n\n\nMEDYAN.set_chemboundary!\n\n\n\n\n\n\nMEDYAN.set_enable_cylinder_volume_exclusion!\n\n\n\n\n\n\nMEDYAN.set_mechboundary!\n\n\n\n\n\n\nMEDYAN.set_time!\n\n\n\n\n\n\nMEDYAN.sever_fila!\n\n\n\n\n\n\nMEDYAN.tag!\n\n\n\n\n\n\nMEDYAN.tag2links\n\n\n\n\n\n\nMEDYAN.tag2place\n\n\n\n\n\n\nMEDYAN.tag_exists\n\n\n\n\n\n\nMEDYAN.update_fila_mono_state!\n\n\n\n\n\n\nMEDYAN.update_link!\n\n\n\n\n\n\nsrc/auxprocs.jl\n\n\n\n\n\n\nsrc/boundary.jl\n\n\n\n\n\n\nsrc/cadherins/possiblecadherinsite.jl\n\n\n\n\n\n\nsrc/context.jl\n\n\n\n\n\n\nsrc/decimated_2mon_sites.jl\n\n\n\n\n\n\nsrc/filament/depolymerize_fila.jl\n\n\n\n\n\n\nsrc/filament/endsites.jl\n\n\n\n\n\n\nsrc/filament/functions.jl\n\n\n\n\n\n\nsrc/filament/make_fila.jl\n\n\n\n\n\n\nsrc/filament/make_fila_rand.jl\n\n\n\n\n\n\nsrc/filament/polymerize_fila.jl\n\n\n\n\n\n\nsrc/filament/remove_fila.jl\n\n\n\n\n\n\nsrc/filament/sever_fila.jl\n\n\n\n\n\n\nsrc/filament/sites.jl\n\n\n\n\n\n\nsrc/filament/update_fila_mono_state.jl\n\n\n\n\n\n\nsrc/grids.jl\n\n\n\n\n\n\nsrc/links/link-chemistry.jl\n\n\n\n\n\n\nsrc/links/link-manager.jl\n\n\n\n\n\n\nsrc/links/place-indexes.jl\n\n\n\n\n\n\nsrc/links/places.jl\n\n\n\n\n\n\nsrc/membrane/membranesites.jl\n\n\n\n\n\n\nsrc/membrane/meshadapt.jl\n\n\n\n\n\n\nsrc/minimize_energy.jl\n\n\n\n\n\n\nsrc/sys_def-types.jl\n\n\n\n\n\n\nsrc/sys_def.jl\n\n\n\n\n\n\nsrc/trajectory-io/snapshot.jl\n\n\n\n\n\n\nsrc/util/math/cuboidslicing.jl\n\n\n\n\n\n\nsrc/util/stableindex.jl\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Reference",
      "Docstrings"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html",
    "href": "tutorials/2rdme.html",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "Inspired by:\nhttps://www.youtube.com/watch?v=TORwMc2AaRE&t=0s\n\n\nOpen a julia REPL or jupyter notebook using the medyan-tutorial environment you created in tutorial 1.\nLoad MEDYAN with MEDYANVis for visualization\n\nusing MEDYAN\nusing MEDYANVis\nusing CairoMakie\nusing Random\nusing SmallZarrGroups\nRandom.seed!(1234);\n\n\n\n\nThe first step is declaring the names of agents in the system.\nThis system will contain three diffusing species.\n\nagent_names = MEDYAN.AgentNames(;\n    diffusingspeciesnames=[\n        :R, # Rock\n        :P, # Paper\n        :S, # Scissors\n    ],\n)\n\nMEDYAN.AgentNames([:R, :P, :S], Symbol[], Symbol[], Symbol[], Tuple{Symbol, Vector{Symbol}}[], Symbol[])\n\n\n\n\n\nAfter the agent names are declared, the system can be defined.\nThis is done by constructing a MEDYAN.SysDef object from the agent_names and then mutating it to add parameters, reactions, and callbacks.\n\ns = MEDYAN.SysDef(agent_names)\n\nMEDYAN.SysDef\n Diffusing species:\n  R: 0.0 nm²/s\n  P: 0.0 nm²/s\n  S: 0.0 nm²/s\n\n\nAdd a diffusion coefficient of 1E6 nm²/s to all species. All units are based on nm, s, pN\nadd_diffusion_coeff!\n\nD = 1E6\nadd_diffusion_coeff!(s, :R, D) # nm²/s\nadd_diffusion_coeff!(s, :P, D) # nm²/s\nadd_diffusion_coeff!(s, :S, D) # nm²/s\n\nMEDYAN.SysDef\n Diffusing species:\n  R: 1.0e6 nm²/s\n  P: 1.0e6 nm²/s\n  S: 1.0e6 nm²/s\n\n\nAdd reactions, paper “beats” rock, scissors “beats” paper, rock “beats” scissors. In this simulation “beats” means convert to self type.\nIn this case because the reaction is between two diffusing species, it has units of nm³/s. You can think of this as the volume where if exactly one of each reactant existed the rate would be 1 per second.\naddreaction!\n\nrate = 50.0*(500.0^3) # nm³/s\naddreaction!(s,\n    \"diffusing.P + diffusing.R --&gt; 2diffusing.P\",\n    rate,\n    1,\n)\naddreaction!(s,\n    \"diffusing.S + diffusing.P --&gt; 2diffusing.S\",\n    rate,\n    1,\n)\naddreaction!(s,\n    \"diffusing.R + diffusing.S --&gt; 2diffusing.R\",\n    rate,\n    1,\n)\n\nMEDYAN.SysDef\n Diffusing species:\n  R: 1.0e6 nm²/s\n  P: 1.0e6 nm²/s\n  S: 1.0e6 nm²/s\n Compartment reactions without callbacks:\n  \"diffusing.P + diffusing.R --&gt; 2diffusing.P\" 6.25e9 nm³/s\n  \"diffusing.S + diffusing.P --&gt; 2diffusing.S\" 6.25e9 nm³/s\n  \"diffusing.R + diffusing.S --&gt; 2diffusing.R\" 6.25e9 nm³/s\n\n\n\n\n\nAll simulations run in a grid.\nThis is a box that contains the simulation.\nThe grid is composed of chemistry voxels, small cubes that can have different counts of the various diffusing species.\nCreate a 50 by 50 by 1 grid of 500 nm side length voxels.\n\nL = 50\ngrid = CubicGrid((L,L,1),500.0)\n\nCubicGrid([50, 50, 1], 500.0)\n\n\n\n\n\nThe Context is the object the handles the state of a running simulation.\nCreate a Context using s and grid\n\nc = MEDYAN.Context(s, grid)\n\nMEDYAN.Context at time 0.0s in MEDYAN.CubicGrid([50, 50, 1], 500.0)\n\n\n\n\n\nThe context starts empty.\nDistribute 2000 of each species randomly to the chem voxels by mutating the context.\nadddiffusingcount_rand!\n\nadddiffusingcount_rand!(c, s.diffusing.R, 2000)\nadddiffusingcount_rand!(c, s.diffusing.P, 2000)\nadddiffusingcount_rand!(c, s.diffusing.S, 2000)\n\n\n\n\nRun chemistry for 1.0s and visualize the results.\n\nvis = Visualizer()\nsetvisible!(vis[\"/Grid\"], false)\nsetvisible!(vis[\"/Axes\"], false)\nsetvisible!(vis[\"/Background\"], false)\n\nIf you open the visualizer in a browser with open(vis) and run the following you should get an animated version of below.\n\nfor i in 1:100\n    run_chemistry!(c, 0.01)\n    MEDYANVis.drawdiffusing!(vis[\"diffusing\"], c.grid, c.chemistryengine, s; size = 0.8)\n    sleep(0.02)\nend\n\n\n\n    \n    \n    \n    \n\n\n\n\n\nNext we will see how to plot quantities from the simulation.\nIf you want to analyze a trajectory in detail, or load a system state, one method is to use snapshots. For details see snapshot group reference\nMEDYAN.load_snapshot! can be used to reload snapshots, this is very useful for restarting simulations, or changing the simulation state in a different programming language, but not needed in this tutorial.\nSmallZarrGroups.jl can be used to save/load snapshot groups to/from disk, in zip files, or in directories.\nRun chemistry for another 1.0s and store a snapshot every 0.01s in a vector.\n\nusing SmallZarrGroups\nsnapshots = ZGroup[]\nfor i in 1:100\n    run_chemistry!(c, 0.01)\n    push!(snapshots, MEDYAN.snapshot(c))\nend\n\nNow that the simulation is done the results can be analyzed. For longer simulations, these snapshots should be saved to disk with for example:\nSmallZarrGroups.save_dir(\"snapshot$i.zarr.zip\",MEDYAN.snapshot(c))\nto avoid needed to rerun the simulation and to avoid using too much RAM.\n\ntotal_rocks = Int[]\ntotal_papers = Int[]\ntotal_scissors = Int[]\ntimes = Float64[]\nfor group in snapshots\n    totals = sum(collect(group[\"diffusingcounts\"]);dims=2)\n    push!(times, attrs(group)[\"time (s)\"])\n    push!(total_rocks, totals[s.diffusing.R])\n    push!(total_papers, totals[s.diffusing.P])\n    push!(total_scissors, totals[s.diffusing.S])\nend\n\n\nfigure, axis, lineplot = lines(times, total_rocks; label=\"rock\")\nlines!(times, total_papers; label=\"paper\")\nlines!(times, total_scissors; label=\"scissors\")\nlines!(\n    times,\n    total_scissors.+total_papers.+total_rocks;\n    label=\"combined\")\naxislegend()\ncurrent_figure()\n\n\n\n\nIf you are using VSCode or Jupyter the figure will be displayed.\nIf you are using the REPL, save the figure as a PDF to view it.\nsave(\"tutorial2-plot.pdf\", current_figure())",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#setup",
    "href": "tutorials/2rdme.html#setup",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "Open a julia REPL or jupyter notebook using the medyan-tutorial environment you created in tutorial 1.\nLoad MEDYAN with MEDYANVis for visualization\n\nusing MEDYAN\nusing MEDYANVis\nusing CairoMakie\nusing Random\nusing SmallZarrGroups\nRandom.seed!(1234);",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#declaring-agent-names",
    "href": "tutorials/2rdme.html#declaring-agent-names",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "The first step is declaring the names of agents in the system.\nThis system will contain three diffusing species.\n\nagent_names = MEDYAN.AgentNames(;\n    diffusingspeciesnames=[\n        :R, # Rock\n        :P, # Paper\n        :S, # Scissors\n    ],\n)\n\nMEDYAN.AgentNames([:R, :P, :S], Symbol[], Symbol[], Symbol[], Tuple{Symbol, Vector{Symbol}}[], Symbol[])",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#defining-system",
    "href": "tutorials/2rdme.html#defining-system",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "After the agent names are declared, the system can be defined.\nThis is done by constructing a MEDYAN.SysDef object from the agent_names and then mutating it to add parameters, reactions, and callbacks.\n\ns = MEDYAN.SysDef(agent_names)\n\nMEDYAN.SysDef\n Diffusing species:\n  R: 0.0 nm²/s\n  P: 0.0 nm²/s\n  S: 0.0 nm²/s\n\n\nAdd a diffusion coefficient of 1E6 nm²/s to all species. All units are based on nm, s, pN\nadd_diffusion_coeff!\n\nD = 1E6\nadd_diffusion_coeff!(s, :R, D) # nm²/s\nadd_diffusion_coeff!(s, :P, D) # nm²/s\nadd_diffusion_coeff!(s, :S, D) # nm²/s\n\nMEDYAN.SysDef\n Diffusing species:\n  R: 1.0e6 nm²/s\n  P: 1.0e6 nm²/s\n  S: 1.0e6 nm²/s\n\n\nAdd reactions, paper “beats” rock, scissors “beats” paper, rock “beats” scissors. In this simulation “beats” means convert to self type.\nIn this case because the reaction is between two diffusing species, it has units of nm³/s. You can think of this as the volume where if exactly one of each reactant existed the rate would be 1 per second.\naddreaction!\n\nrate = 50.0*(500.0^3) # nm³/s\naddreaction!(s,\n    \"diffusing.P + diffusing.R --&gt; 2diffusing.P\",\n    rate,\n    1,\n)\naddreaction!(s,\n    \"diffusing.S + diffusing.P --&gt; 2diffusing.S\",\n    rate,\n    1,\n)\naddreaction!(s,\n    \"diffusing.R + diffusing.S --&gt; 2diffusing.R\",\n    rate,\n    1,\n)\n\nMEDYAN.SysDef\n Diffusing species:\n  R: 1.0e6 nm²/s\n  P: 1.0e6 nm²/s\n  S: 1.0e6 nm²/s\n Compartment reactions without callbacks:\n  \"diffusing.P + diffusing.R --&gt; 2diffusing.P\" 6.25e9 nm³/s\n  \"diffusing.S + diffusing.P --&gt; 2diffusing.S\" 6.25e9 nm³/s\n  \"diffusing.R + diffusing.S --&gt; 2diffusing.R\" 6.25e9 nm³/s",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#creating-a-grid",
    "href": "tutorials/2rdme.html#creating-a-grid",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "All simulations run in a grid.\nThis is a box that contains the simulation.\nThe grid is composed of chemistry voxels, small cubes that can have different counts of the various diffusing species.\nCreate a 50 by 50 by 1 grid of 500 nm side length voxels.\n\nL = 50\ngrid = CubicGrid((L,L,1),500.0)\n\nCubicGrid([50, 50, 1], 500.0)",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#creating-a-context",
    "href": "tutorials/2rdme.html#creating-a-context",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "The Context is the object the handles the state of a running simulation.\nCreate a Context using s and grid\n\nc = MEDYAN.Context(s, grid)\n\nMEDYAN.Context at time 0.0s in MEDYAN.CubicGrid([50, 50, 1], 500.0)",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#add-agents-to-the-context",
    "href": "tutorials/2rdme.html#add-agents-to-the-context",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "The context starts empty.\nDistribute 2000 of each species randomly to the chem voxels by mutating the context.\nadddiffusingcount_rand!\n\nadddiffusingcount_rand!(c, s.diffusing.R, 2000)\nadddiffusingcount_rand!(c, s.diffusing.P, 2000)\nadddiffusingcount_rand!(c, s.diffusing.S, 2000)",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#run-chemistry",
    "href": "tutorials/2rdme.html#run-chemistry",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "Run chemistry for 1.0s and visualize the results.\n\nvis = Visualizer()\nsetvisible!(vis[\"/Grid\"], false)\nsetvisible!(vis[\"/Axes\"], false)\nsetvisible!(vis[\"/Background\"], false)\n\nIf you open the visualizer in a browser with open(vis) and run the following you should get an animated version of below.\n\nfor i in 1:100\n    run_chemistry!(c, 0.01)\n    MEDYANVis.drawdiffusing!(vis[\"diffusing\"], c.grid, c.chemistryengine, s; size = 0.8)\n    sleep(0.02)\nend",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#snapshots-and-plotting",
    "href": "tutorials/2rdme.html#snapshots-and-plotting",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "Next we will see how to plot quantities from the simulation.\nIf you want to analyze a trajectory in detail, or load a system state, one method is to use snapshots. For details see snapshot group reference\nMEDYAN.load_snapshot! can be used to reload snapshots, this is very useful for restarting simulations, or changing the simulation state in a different programming language, but not needed in this tutorial.\nSmallZarrGroups.jl can be used to save/load snapshot groups to/from disk, in zip files, or in directories.\nRun chemistry for another 1.0s and store a snapshot every 0.01s in a vector.\n\nusing SmallZarrGroups\nsnapshots = ZGroup[]\nfor i in 1:100\n    run_chemistry!(c, 0.01)\n    push!(snapshots, MEDYAN.snapshot(c))\nend\n\nNow that the simulation is done the results can be analyzed. For longer simulations, these snapshots should be saved to disk with for example:\nSmallZarrGroups.save_dir(\"snapshot$i.zarr.zip\",MEDYAN.snapshot(c))\nto avoid needed to rerun the simulation and to avoid using too much RAM.\n\ntotal_rocks = Int[]\ntotal_papers = Int[]\ntotal_scissors = Int[]\ntimes = Float64[]\nfor group in snapshots\n    totals = sum(collect(group[\"diffusingcounts\"]);dims=2)\n    push!(times, attrs(group)[\"time (s)\"])\n    push!(total_rocks, totals[s.diffusing.R])\n    push!(total_papers, totals[s.diffusing.P])\n    push!(total_scissors, totals[s.diffusing.S])\nend\n\n\nfigure, axis, lineplot = lines(times, total_rocks; label=\"rock\")\nlines!(times, total_papers; label=\"paper\")\nlines!(times, total_scissors; label=\"scissors\")\nlines!(\n    times,\n    total_scissors.+total_papers.+total_rocks;\n    label=\"combined\")\naxislegend()\ncurrent_figure()\n\n\n\n\nIf you are using VSCode or Jupyter the figure will be displayed.\nIf you are using the REPL, save the figure as a PDF to view it.\nsave(\"tutorial2-plot.pdf\", current_figure())",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/1install.html",
    "href": "tutorials/1install.html",
    "title": "1. Installing MEDYAN.jl",
    "section": "",
    "text": "MEDYAN.jl is a julia package so first install the julia programming language.\nThis tutorial was generated using:\n\n\nJulia Version 1.11.6\nCommit 9615af0f269 (2025-07-09 12:58 UTC)\nBuild Info:\n  Official https://julialang.org/ release\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 16 × Intel(R) Core(TM) i7-10700KF CPU @ 3.80GHz\n  WORD_SIZE: 64\n  LLVM: libLLVM-16.0.6 (ORCJIT, skylake)\nThreads: 1 default, 0 interactive, 1 GC (on 16 virtual cores)\nEnvironment:\n  LD_LIBRARY_PATH = /home/gh-actions1/actions-runner6/_work/_tool/julia/1.11.6/x64/bin/../lib/julia:/home/gh-actions1/actions-runner6/_work/_tool/julia/1.11.6/x64/bin/../lib\n  JULIA_PROJECT = @.\n  JULIA_LOAD_PATH = @:@stdlib\n\n\nThe tutorials should work on newer versions of julia, and on MacOS and Windows, please create an issue if you have a problem or question.\nJulia can be installed with juliaup.\nYou can also download julia here.\nDo not install julia using apt install julia or module load julia, as these don’t have a recent version of julia.\nAfter installing julia, open the REPL with the julia command in terminal.\n\n\n\nDownload the exact julia environment used to generate the tutorials.\nClick to Download\nNext extract this zip file and cd into the extracted directory.\nNow run\njulia --project -e 'import Pkg; Pkg.instantiate()'\nTo start the julia REPL in the correct environment to run the tutorials, use:\njulia --project\nFrom inside the medyan-tutorial directory.\nYou can also save julia files in this directory and use the VSCode julia extension to set the environment, and run code blocks, if you prefer that over the REPL.\nhttps://code.visualstudio.com/docs/languages/julia\n\n\n\nThese tests may take a few minutes to run.\njulia lib/MEDYAN/test/install-deps.jl\njulia --project=lib/MEDYAN/test lib/MEDYAN/test/runtests.jl\nIf you have any errors or failing tests create an issue",
    "crumbs": [
      "Tutorials",
      "1. Installing MEDYAN.jl"
    ]
  },
  {
    "objectID": "tutorials/1install.html#install-julia",
    "href": "tutorials/1install.html#install-julia",
    "title": "1. Installing MEDYAN.jl",
    "section": "",
    "text": "MEDYAN.jl is a julia package so first install the julia programming language.\nThis tutorial was generated using:\n\n\nJulia Version 1.11.6\nCommit 9615af0f269 (2025-07-09 12:58 UTC)\nBuild Info:\n  Official https://julialang.org/ release\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 16 × Intel(R) Core(TM) i7-10700KF CPU @ 3.80GHz\n  WORD_SIZE: 64\n  LLVM: libLLVM-16.0.6 (ORCJIT, skylake)\nThreads: 1 default, 0 interactive, 1 GC (on 16 virtual cores)\nEnvironment:\n  LD_LIBRARY_PATH = /home/gh-actions1/actions-runner6/_work/_tool/julia/1.11.6/x64/bin/../lib/julia:/home/gh-actions1/actions-runner6/_work/_tool/julia/1.11.6/x64/bin/../lib\n  JULIA_PROJECT = @.\n  JULIA_LOAD_PATH = @:@stdlib\n\n\nThe tutorials should work on newer versions of julia, and on MacOS and Windows, please create an issue if you have a problem or question.\nJulia can be installed with juliaup.\nYou can also download julia here.\nDo not install julia using apt install julia or module load julia, as these don’t have a recent version of julia.\nAfter installing julia, open the REPL with the julia command in terminal.",
    "crumbs": [
      "Tutorials",
      "1. Installing MEDYAN.jl"
    ]
  },
  {
    "objectID": "tutorials/1install.html#install-packages-needed-for-tutorials",
    "href": "tutorials/1install.html#install-packages-needed-for-tutorials",
    "title": "1. Installing MEDYAN.jl",
    "section": "",
    "text": "Download the exact julia environment used to generate the tutorials.\nClick to Download\nNext extract this zip file and cd into the extracted directory.\nNow run\njulia --project -e 'import Pkg; Pkg.instantiate()'\nTo start the julia REPL in the correct environment to run the tutorials, use:\njulia --project\nFrom inside the medyan-tutorial directory.\nYou can also save julia files in this directory and use the VSCode julia extension to set the environment, and run code blocks, if you prefer that over the REPL.\nhttps://code.visualstudio.com/docs/languages/julia",
    "crumbs": [
      "Tutorials",
      "1. Installing MEDYAN.jl"
    ]
  },
  {
    "objectID": "tutorials/1install.html#running-tests",
    "href": "tutorials/1install.html#running-tests",
    "title": "1. Installing MEDYAN.jl",
    "section": "",
    "text": "These tests may take a few minutes to run.\njulia lib/MEDYAN/test/install-deps.jl\njulia --project=lib/MEDYAN/test lib/MEDYAN/test/runtests.jl\nIf you have any errors or failing tests create an issue",
    "crumbs": [
      "Tutorials",
      "1. Installing MEDYAN.jl"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html",
    "href": "tutorials/3treadmill.html",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "Using reactions and rates from\nDitlev JA, Vacanti NM, Novak IL, Loew LM. An open model of actin dendritic nucleation. Biophys J. 2009;96(9):3529-3542. doi:10.1016/j.bpj.2009.01.037\nThis example doesn’t have any of the actin binding proteins, or filament severing or annealing.\n\n\nOpen a julia REPL or jupyter notebook using the medyan-tutorial environment you created in tutorial 1.\nLoad MEDYAN with MeshCat for visualization\n\nusing MEDYAN\nusing MEDYANVis\nusing CairoMakie\nusing Random\nusing SmallZarrGroups\nusing StaticArrays\nusing LinearAlgebra\nRandom.seed!(1234);\n\n\n\n\nThe first step is declaring the names of agents in the system.\nThis system will contain three diffusing species.\nThe system will also contain one filament type.\nThe monomers that make up this filament can be in one of 9 states.\n\nagent_names = MEDYAN.AgentNames(;\n    diffusingspeciesnames=[\n        :GA, # G-Actin with no bound nucleotide\n        :GAD, # G-Actin in the ADP form\n        :GADPi, # G-Actin in the ADP Pi form\n        :GAT, # G-Actin in the ATP form\n    ],\n    filamentnames=[\n        (:actin, [\n            # Monomer states\n            :FAD, # F-Actin in the ADP form\n            :FADPi, # F-Actin in the ADP Pi form\n            :FAT, # F-Actin in the ATP form\n            :BarbedD, # Barbed end in the ADP form\n            :BarbedDPi, # Barbed end in the ADP Pi form\n            :BarbedT, # Barbed end in the ATP form\n            :PointedD, # Pointed end in the ADP form\n            :PointedDPi, # Pointed end in the ADP Pi form\n            :PointedT, # Pointed end in the ATP form\n        ])\n    ]\n)\n\nMEDYAN.AgentNames([:GA, :GAD, :GADPi, :GAT], Symbol[], Symbol[], Symbol[], [(:actin, [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT])], Symbol[])\n\n\n\n\n\nAfter the agent names are declared, the system can be defined.\nThis is done by constructing a MEDYAN.SysDef object from the agent_names and then mutating it to add parameters, reactions, and callbacks.\n\ns = MEDYAN.SysDef(agent_names)\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 0.0 nm²/s\n  GAD: 0.0 nm²/s\n  GADPi: 0.0 nm²/s\n  GAT: 0.0 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(NaN, NaN, NaN, NaN, -1, -1)\n\n\nAdd a diffusion coefficient of 5E6 nm²/s to all diffusing species. All units are based on nm, s, pN\nadd_diffusion_coeff!\n\nDGActin = 5E6\nfor name in keys(s.diffusing)\n    add_diffusion_coeff!(s, name, DGActin) # nm²/s\nend\n\nAdd the default actin filament parameters.\n\nadd_filament_params!(s, :actin, MEDYAN.ACTIN_FIL_PARAMS)\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 5.0e6 nm²/s\n  GAD: 5.0e6 nm²/s\n  GADPi: 5.0e6 nm²/s\n  GAT: 5.0e6 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(3.0, 2.7, 4000.0, 26880.0, 40, 1)\n\n\nAdd reactions between diffusing species. These represent G-Actin interacting with ATP ADP and Pi.\naddreaction!\n\n# Assume ATP, Pi, and ADP concentrations are fixed\nATP = 10000.0 * MEDYAN.μM⁻¹_per_nm³\nPi = 2000.0 * MEDYAN.μM⁻¹_per_nm³\nADP = 2000.0 * MEDYAN.μM⁻¹_per_nm³\nKfGATPoint  = 1.3/MEDYAN.μM⁻¹_per_nm³\nKrGATPoint  = 0.8\nKfGADPoint  = 0.16/MEDYAN.μM⁻¹_per_nm³\nKrGADPoint  = 0.3\nKfGATBarb   = 10.0/MEDYAN.μM⁻¹_per_nm³\nKrGATBarb   = 1.0\nKfGADBarb   = 2.5/MEDYAN.μM⁻¹_per_nm³\nKrGADBarb   = 4.25\nKfPiRelease = 0.0026\nKrPiRelease = 5.20E-6/MEDYAN.μM⁻¹_per_nm³\n\n# 100\naddreaction!(s,\n    \"diffusing.GADPi --&gt; diffusing.GAD\",\n    0.0312,\n    0,\n)\naddreaction!(s,\n    \"diffusing.GAD --&gt; diffusing.GADPi\",\n    KrPiRelease*Pi,\n    0,\n)\n\n# 104\naddreaction!(s,\n    \"diffusing.GA --&gt; diffusing.GAT\",\n    1.7/MEDYAN.μM⁻¹_per_nm³*ATP,\n    0,\n)\naddreaction!(s,\n    \"diffusing.GAT --&gt; diffusing.GA\",\n    0.011,\n    0,\n)\n\n# 109\naddreaction!(s,\n    \"diffusing.GA --&gt; diffusing.GAD\",\n    0.9/MEDYAN.μM⁻¹_per_nm³*ADP,\n    0,\n)\naddreaction!(s,\n    \"diffusing.GAD --&gt; diffusing.GA\",\n    0.071,\n    0,\n)\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 5.0e6 nm²/s\n  GAD: 5.0e6 nm²/s\n  GADPi: 5.0e6 nm²/s\n  GAT: 5.0e6 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(3.0, 2.7, 4000.0, 26880.0, 40, 1)\n Compartment reactions without callbacks:\n  \"diffusing.GADPi --&gt; diffusing.GAD\" 0.0312 1/s\n  \"diffusing.GAD --&gt; diffusing.GADPi\" 0.0104 1/s\n  \"diffusing.GA --&gt; diffusing.GAT\" 17000.0 1/s\n  \"diffusing.GAT --&gt; diffusing.GA\" 0.011 1/s\n  \"diffusing.GA --&gt; diffusing.GAD\" 1799.9999999999998 1/s\n  \"diffusing.GAD --&gt; diffusing.GA\" 0.071 1/s\n\n\nNext add filament reactions.\nThe barbed end is the plus end and the pointed end is the minus end.\n\nmonomerspacing=2.7 # nm\n\n\nnucleotide_states = (\"T\", \"DPi\", \"D\")\n\n# Barbed end polymerization and depolymerization\nbarbed_rates = [\n    (\"T\", KfGATBarb, KrGATBarb),\n    (\"DPi\", KfGATBarb, KrGATBarb),\n    (\"D\", KfGADBarb, KrGADBarb),\n]\nfor (new_nuc, forward_rate, reverse_rate) in barbed_rates\n    for base_nuc in nucleotide_states\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"f\", \"GA\", new_nuc, \"_to_Barbed\", base_nuc),\n            false,\n            [Symbol(\"Barbed\", base_nuc)]=&gt;[Symbol(\"FA\", base_nuc), Symbol(\"Barbed\", new_nuc)],\n            monomerspacing,\n            \"diffusing.GA\"*new_nuc*\" --&gt;\",\n            forward_rate,\n            1,\n        )\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"r\", \"GA\", new_nuc, \"_to_Barbed\", base_nuc),\n            false,\n            [Symbol(\"FA\", base_nuc), Symbol(\"Barbed\", new_nuc)]=&gt;[Symbol(\"Barbed\", base_nuc)],\n            0.0,\n            \"--&gt; diffusing.GA\"*new_nuc,\n            reverse_rate,\n            0,\n        )\n    end\nend\n\n# Pointed end polymerization and depolymerization\npointed_rates = [\n    (\"T\", KfGATPoint, KrGATPoint),\n    (\"DPi\", KfGATPoint, KrGATPoint),\n    (\"D\", KfGADPoint, KrGADPoint),\n]\nfor (new_nuc, forward_rate, reverse_rate) in pointed_rates\n    for base_nuc in nucleotide_states\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"f\", \"GA\", new_nuc, \"_to_Pointed\", base_nuc),\n            true,\n            [Symbol(\"Pointed\", base_nuc)]=&gt;[Symbol(\"Pointed\", new_nuc), Symbol(\"FA\", base_nuc)],\n            monomerspacing,\n            \"diffusing.GA\"*new_nuc*\" --&gt;\",\n            forward_rate,\n            1,\n        )\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"r\", \"GA\", new_nuc, \"_to_Pointed\", base_nuc),\n            true,\n            [Symbol(\"Pointed\", new_nuc), Symbol(\"FA\", base_nuc)]=&gt;[Symbol(\"Pointed\", base_nuc)],\n            0.0,\n            \"--&gt; diffusing.GA\"*new_nuc,\n            reverse_rate,\n            0,\n        )\n    end\nend\n\n# Filament ATP hydrolysis and Pi Dissociation\nfor monomer_state in (\"FA\", \"Barbed\", \"Pointed\")\n    addfilament_reaction!(s,\n        :actin,\n        Symbol(monomer_state, \"T_to_\", monomer_state, \"DPi\"),\n        [Symbol(monomer_state, \"T\")]=&gt;[Symbol(monomer_state, \"DPi\")],\n        1,\n        \"--&gt;\",\n        0.3,\n        0,\n    )\n    addfilament_reaction!(s,\n        :actin,\n        Symbol(monomer_state, \"DPi_to_\", monomer_state, \"D\"),\n        [Symbol(monomer_state, \"DPi\")]=&gt;[Symbol(monomer_state, \"D\")],\n        1,\n        \"--&gt;\",\n        KfPiRelease,\n        0,\n    )\n    addfilament_reaction!(s,\n        :actin,\n        Symbol(monomer_state, \"D_to_\", monomer_state, \"DPi\"),\n        [Symbol(monomer_state, \"D\")]=&gt;[Symbol(monomer_state, \"DPi\")],\n        1,\n        \"--&gt;\",\n        KrPiRelease*Pi,\n        0,\n    )\nend\ns\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 5.0e6 nm²/s\n  GAD: 5.0e6 nm²/s\n  GADPi: 5.0e6 nm²/s\n  GAT: 5.0e6 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(3.0, 2.7, 4000.0, 26880.0, 40, 1)\n   filament sites:\n    FAT_to_FADPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x03])\n    FADPi_to_FAD: MEDYAN.FilamentSiteGeneral(1, UInt8[0x02])\n    FAD_to_FADPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x01])\n    BarbedT_to_BarbedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x06])\n    BarbedDPi_to_BarbedD: MEDYAN.FilamentSiteGeneral(1, UInt8[0x05])\n    BarbedD_to_BarbedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x04])\n    PointedT_to_PointedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x09])\n    PointedDPi_to_PointedD: MEDYAN.FilamentSiteGeneral(1, UInt8[0x08])\n    PointedD_to_PointedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x07])\n   filament end sites:\n    fGAT_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x06], 2.7, 1)\n    rGAT_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x03, 0x06], 0.0, 0)\n    fGAT_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x05], 2.7, 1)\n    rGAT_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x02, 0x06], 0.0, 0)\n    fGAT_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x04], 2.7, 1)\n    rGAT_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x01, 0x06], 0.0, 0)\n    fGADPi_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x06], 2.7, 1)\n    rGADPi_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x03, 0x05], 0.0, 0)\n    fGADPi_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x05], 2.7, 1)\n    rGADPi_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x02, 0x05], 0.0, 0)\n    fGADPi_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x04], 2.7, 1)\n    rGADPi_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x01, 0x05], 0.0, 0)\n    fGAD_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x06], 2.7, 1)\n    rGAD_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x03, 0x04], 0.0, 0)\n    fGAD_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x05], 2.7, 1)\n    rGAD_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x02, 0x04], 0.0, 0)\n    fGAD_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x04], 2.7, 1)\n    rGAD_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x01, 0x04], 0.0, 0)\n    fGAT_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09], 2.7, 1)\n    rGAT_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09, 0x03], 0.0, 0)\n    fGAT_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08], 2.7, 1)\n    rGAT_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09, 0x02], 0.0, 0)\n    fGAT_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07], 2.7, 1)\n    rGAT_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09, 0x01], 0.0, 0)\n    fGADPi_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09], 2.7, 1)\n    rGADPi_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08, 0x03], 0.0, 0)\n    fGADPi_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08], 2.7, 1)\n    rGADPi_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08, 0x02], 0.0, 0)\n    fGADPi_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07], 2.7, 1)\n    rGADPi_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08, 0x01], 0.0, 0)\n    fGAD_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09], 2.7, 1)\n    rGAD_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07, 0x03], 0.0, 0)\n    fGAD_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08], 2.7, 1)\n    rGAD_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07, 0x02], 0.0, 0)\n    fGAD_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07], 2.7, 1)\n    rGAD_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07, 0x01], 0.0, 0)\n Compartment reactions with callbacks:\n  1. \"filamentsite.actin.PointedD_to_PointedDPi --&gt; filamentsite.actin.PointedD_to_PointedDPi\" 0.0104 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 9, 1, UInt8[0x08], Pair{Int64, Int64}[])\n  2. \"filamentsite.actin.PointedDPi_to_PointedD --&gt; filamentsite.actin.PointedDPi_to_PointedD\" 0.0026 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 8, 1, UInt8[0x07], Pair{Int64, Int64}[])\n  3. \"filamentsite.actin.PointedT_to_PointedDPi --&gt; filamentsite.actin.PointedT_to_PointedDPi\" 0.3 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 7, 1, UInt8[0x08], Pair{Int64, Int64}[])\n  4. \"filamentsite.actin.BarbedD_to_BarbedDPi --&gt; filamentsite.actin.BarbedD_to_BarbedDPi\" 0.0104 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 6, 1, UInt8[0x05], Pair{Int64, Int64}[])\n  5. \"filamentsite.actin.BarbedDPi_to_BarbedD --&gt; filamentsite.actin.BarbedDPi_to_BarbedD\" 0.0026 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 5, 1, UInt8[0x04], Pair{Int64, Int64}[])\n  6. \"filamentsite.actin.BarbedT_to_BarbedDPi --&gt; filamentsite.actin.BarbedT_to_BarbedDPi\" 0.3 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 4, 1, UInt8[0x05], Pair{Int64, Int64}[])\n  7. \"filamentsite.actin.FAD_to_FADPi --&gt; filamentsite.actin.FAD_to_FADPi\" 0.0104 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 3, 1, UInt8[0x02], Pair{Int64, Int64}[])\n  8. \"filamentsite.actin.FADPi_to_FAD --&gt; filamentsite.actin.FADPi_to_FAD\" 0.0026 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 2, 1, UInt8[0x01], Pair{Int64, Int64}[])\n  9. \"filamentsite.actin.FAT_to_FADPi --&gt; filamentsite.actin.FAT_to_FADPi\" 0.3 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 1, 1, UInt8[0x02], Pair{Int64, Int64}[])\n  10. \"filamentendsite.actin.rGAD_to_PointedD --&gt; filamentendsite.actin.rGAD_to_PointedD\" 0.3 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 36, -1, UInt8[0x07], [2 =&gt; 1])\n  11. \"diffusing.GAD + filamentendsite.actin.fGAD_to_PointedD --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_PointedD\" 265686.2507478155 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 35, 1, UInt8[0x07, 0x01], [2 =&gt; -1])\n  12. \"filamentendsite.actin.rGAD_to_PointedDPi --&gt; filamentendsite.actin.rGAD_to_PointedDPi\" 0.3 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 34, -1, UInt8[0x08], [2 =&gt; 1])\n  13. \"diffusing.GAD + filamentendsite.actin.fGAD_to_PointedDPi --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_PointedDPi\" 265686.2507478155 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 33, 1, UInt8[0x07, 0x02], [2 =&gt; -1])\n  14. \"filamentendsite.actin.rGAD_to_PointedT --&gt; filamentendsite.actin.rGAD_to_PointedT\" 0.3 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 32, -1, UInt8[0x09], [2 =&gt; 1])\n  15. \"diffusing.GAD + filamentendsite.actin.fGAD_to_PointedT --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_PointedT\" 265686.2507478155 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 31, 1, UInt8[0x07, 0x03], [2 =&gt; -1])\n  16. \"filamentendsite.actin.rGADPi_to_PointedD --&gt; filamentendsite.actin.rGADPi_to_PointedD\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 30, -1, UInt8[0x07], [3 =&gt; 1])\n  17. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedD --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedD\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 29, 1, UInt8[0x08, 0x01], [3 =&gt; -1])\n  18. \"filamentendsite.actin.rGADPi_to_PointedDPi --&gt; filamentendsite.actin.rGADPi_to_PointedDPi\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 28, -1, UInt8[0x08], [3 =&gt; 1])\n  19. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedDPi --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedDPi\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 27, 1, UInt8[0x08, 0x02], [3 =&gt; -1])\n  20. \"filamentendsite.actin.rGADPi_to_PointedT --&gt; filamentendsite.actin.rGADPi_to_PointedT\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 26, -1, UInt8[0x09], [3 =&gt; 1])\n  21. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedT --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedT\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 25, 1, UInt8[0x08, 0x03], [3 =&gt; -1])\n  22. \"filamentendsite.actin.rGAT_to_PointedD --&gt; filamentendsite.actin.rGAT_to_PointedD\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 24, -1, UInt8[0x07], [4 =&gt; 1])\n  23. \"diffusing.GAT + filamentendsite.actin.fGAT_to_PointedD --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_PointedD\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 23, 1, UInt8[0x09, 0x01], [4 =&gt; -1])\n  24. \"filamentendsite.actin.rGAT_to_PointedDPi --&gt; filamentendsite.actin.rGAT_to_PointedDPi\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 22, -1, UInt8[0x08], [4 =&gt; 1])\n  25. \"diffusing.GAT + filamentendsite.actin.fGAT_to_PointedDPi --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_PointedDPi\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 21, 1, UInt8[0x09, 0x02], [4 =&gt; -1])\n  26. \"filamentendsite.actin.rGAT_to_PointedT --&gt; filamentendsite.actin.rGAT_to_PointedT\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 20, -1, UInt8[0x09], [4 =&gt; 1])\n  27. \"diffusing.GAT + filamentendsite.actin.fGAT_to_PointedT --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_PointedT\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 19, 1, UInt8[0x09, 0x03], [4 =&gt; -1])\n  28. \"filamentendsite.actin.rGAD_to_BarbedD --&gt; filamentendsite.actin.rGAD_to_BarbedD\" 4.25 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 18, -1, UInt8[0x04], [2 =&gt; 1])\n  29. \"diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedD --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedD\" 4.151347667934617e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 17, 1, UInt8[0x01, 0x04], [2 =&gt; -1])\n  30. \"filamentendsite.actin.rGAD_to_BarbedDPi --&gt; filamentendsite.actin.rGAD_to_BarbedDPi\" 4.25 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 16, -1, UInt8[0x05], [2 =&gt; 1])\n  31. \"diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedDPi --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedDPi\" 4.151347667934617e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 15, 1, UInt8[0x02, 0x04], [2 =&gt; -1])\n  32. \"filamentendsite.actin.rGAD_to_BarbedT --&gt; filamentendsite.actin.rGAD_to_BarbedT\" 4.25 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 14, -1, UInt8[0x06], [2 =&gt; 1])\n  33. \"diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedT --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedT\" 4.151347667934617e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 13, 1, UInt8[0x03, 0x04], [2 =&gt; -1])\n  34. \"filamentendsite.actin.rGADPi_to_BarbedD --&gt; filamentendsite.actin.rGADPi_to_BarbedD\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 12, -1, UInt8[0x04], [3 =&gt; 1])\n  35. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedD --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedD\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 11, 1, UInt8[0x01, 0x05], [3 =&gt; -1])\n  36. \"filamentendsite.actin.rGADPi_to_BarbedDPi --&gt; filamentendsite.actin.rGADPi_to_BarbedDPi\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 10, -1, UInt8[0x05], [3 =&gt; 1])\n  37. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedDPi --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedDPi\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 9, 1, UInt8[0x02, 0x05], [3 =&gt; -1])\n  38. \"filamentendsite.actin.rGADPi_to_BarbedT --&gt; filamentendsite.actin.rGADPi_to_BarbedT\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 8, -1, UInt8[0x06], [3 =&gt; 1])\n  39. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedT --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedT\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 7, 1, UInt8[0x03, 0x05], [3 =&gt; -1])\n  40. \"filamentendsite.actin.rGAT_to_BarbedD --&gt; filamentendsite.actin.rGAT_to_BarbedD\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 6, -1, UInt8[0x04], [4 =&gt; 1])\n  41. \"diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedD --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedD\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 5, 1, UInt8[0x01, 0x06], [4 =&gt; -1])\n  42. \"filamentendsite.actin.rGAT_to_BarbedDPi --&gt; filamentendsite.actin.rGAT_to_BarbedDPi\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 4, -1, UInt8[0x05], [4 =&gt; 1])\n  43. \"diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedDPi --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedDPi\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 3, 1, UInt8[0x02, 0x06], [4 =&gt; -1])\n  44. \"filamentendsite.actin.rGAT_to_BarbedT --&gt; filamentendsite.actin.rGAT_to_BarbedT\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 2, -1, UInt8[0x06], [4 =&gt; 1])\n  45. \"diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedT --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedT\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 1, 1, UInt8[0x03, 0x06], [4 =&gt; -1])\n Compartment reactions without callbacks:\n  \"diffusing.GADPi --&gt; diffusing.GAD\" 0.0312 1/s\n  \"diffusing.GAD --&gt; diffusing.GADPi\" 0.0104 1/s\n  \"diffusing.GA --&gt; diffusing.GAT\" 17000.0 1/s\n  \"diffusing.GAT --&gt; diffusing.GA\" 0.011 1/s\n  \"diffusing.GA --&gt; diffusing.GAD\" 1799.9999999999998 1/s\n  \"diffusing.GAD --&gt; diffusing.GA\" 0.071 1/s\n\n\n\n\n\nCreate a 1 by 1 by 3 grid of 500 nm side length voxels.\n\nL = 3\ngrid = CubicGrid((1,1,L),500.0)\n\nCubicGrid([1, 1, 3], 500.0)\n\n\n\n\n\nThe Context is the object the handles the state of a running simulation.\nCreate a Context using s and grid\n\nc = MEDYAN.Context(s, grid)\n\nMEDYAN.Context at time 0.0s in MEDYAN.CubicGrid([1, 1, 3], 500.0)\n\n\n\n\n\n\nset_mechboundary!(c, MEDYAN.boundary_box(grid; stiffness=100.0))\n\nMEDYAN.Boundary(SVector{4, Float64}[[-10.0, 0.0, 0.0, 2500.0], [10.0, 0.0, 0.0, 2500.0], [0.0, -10.0, 0.0, 2500.0], [0.0, 10.0, 0.0, 2500.0], [0.0, 0.0, -10.0, 7500.0], [0.0, 0.0, 10.0, 7500.0]], SVector{8, Float64}[])\n\n\n\n\n\nThe context starts empty.\nDistribute 700 of GAT randomly to the chem voxels by mutating the context.\nadddiffusingcount_rand!\n\nadddiffusingcount_rand!(c, s.diffusing.GAT, 700)\n\nAdd a single short filament by mutating the context.\n\nmono_states = [s.state.actin.PointedD, s.state.actin.FADPi, s.state.actin.FAT, s.state.actin.BarbedT]\nnode_positions = [\n    SA[0.0,0.0,0.0], \n    SA[0.0,0.0,monomerspacing*length(mono_states)]\n]\nmake_fila!(c; type=:actin, mono_states, node_positions, node_mids=[1,])\n\nMEDYAN.Tag{FilaTipIdx}(0x00000002, 0x00000001)\n\n\n\n\n\nRun chemistry for 1.0s and visualize the results.\n\nvis = Visualizer()\nsetvisible!(vis[\"/Grid\"], false)\nsetvisible!(vis[\"/Axes\"], false)\nsetvisible!(vis[\"/Background\"], false)\n\nIf you open the visualizer in a browser and run the following you should get an animated version of below.\n\nfor i in 1:100\n    run_chemistry!(c, 0.01)\n    minimize_energy!(c)\n    draw_context!(vis, c, s)\nend",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#setup",
    "href": "tutorials/3treadmill.html#setup",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "Open a julia REPL or jupyter notebook using the medyan-tutorial environment you created in tutorial 1.\nLoad MEDYAN with MeshCat for visualization\n\nusing MEDYAN\nusing MEDYANVis\nusing CairoMakie\nusing Random\nusing SmallZarrGroups\nusing StaticArrays\nusing LinearAlgebra\nRandom.seed!(1234);",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#declaring-agent-names",
    "href": "tutorials/3treadmill.html#declaring-agent-names",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "The first step is declaring the names of agents in the system.\nThis system will contain three diffusing species.\nThe system will also contain one filament type.\nThe monomers that make up this filament can be in one of 9 states.\n\nagent_names = MEDYAN.AgentNames(;\n    diffusingspeciesnames=[\n        :GA, # G-Actin with no bound nucleotide\n        :GAD, # G-Actin in the ADP form\n        :GADPi, # G-Actin in the ADP Pi form\n        :GAT, # G-Actin in the ATP form\n    ],\n    filamentnames=[\n        (:actin, [\n            # Monomer states\n            :FAD, # F-Actin in the ADP form\n            :FADPi, # F-Actin in the ADP Pi form\n            :FAT, # F-Actin in the ATP form\n            :BarbedD, # Barbed end in the ADP form\n            :BarbedDPi, # Barbed end in the ADP Pi form\n            :BarbedT, # Barbed end in the ATP form\n            :PointedD, # Pointed end in the ADP form\n            :PointedDPi, # Pointed end in the ADP Pi form\n            :PointedT, # Pointed end in the ATP form\n        ])\n    ]\n)\n\nMEDYAN.AgentNames([:GA, :GAD, :GADPi, :GAT], Symbol[], Symbol[], Symbol[], [(:actin, [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT])], Symbol[])",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#defining-system",
    "href": "tutorials/3treadmill.html#defining-system",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "After the agent names are declared, the system can be defined.\nThis is done by constructing a MEDYAN.SysDef object from the agent_names and then mutating it to add parameters, reactions, and callbacks.\n\ns = MEDYAN.SysDef(agent_names)\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 0.0 nm²/s\n  GAD: 0.0 nm²/s\n  GADPi: 0.0 nm²/s\n  GAT: 0.0 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(NaN, NaN, NaN, NaN, -1, -1)\n\n\nAdd a diffusion coefficient of 5E6 nm²/s to all diffusing species. All units are based on nm, s, pN\nadd_diffusion_coeff!\n\nDGActin = 5E6\nfor name in keys(s.diffusing)\n    add_diffusion_coeff!(s, name, DGActin) # nm²/s\nend\n\nAdd the default actin filament parameters.\n\nadd_filament_params!(s, :actin, MEDYAN.ACTIN_FIL_PARAMS)\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 5.0e6 nm²/s\n  GAD: 5.0e6 nm²/s\n  GADPi: 5.0e6 nm²/s\n  GAT: 5.0e6 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(3.0, 2.7, 4000.0, 26880.0, 40, 1)\n\n\nAdd reactions between diffusing species. These represent G-Actin interacting with ATP ADP and Pi.\naddreaction!\n\n# Assume ATP, Pi, and ADP concentrations are fixed\nATP = 10000.0 * MEDYAN.μM⁻¹_per_nm³\nPi = 2000.0 * MEDYAN.μM⁻¹_per_nm³\nADP = 2000.0 * MEDYAN.μM⁻¹_per_nm³\nKfGATPoint  = 1.3/MEDYAN.μM⁻¹_per_nm³\nKrGATPoint  = 0.8\nKfGADPoint  = 0.16/MEDYAN.μM⁻¹_per_nm³\nKrGADPoint  = 0.3\nKfGATBarb   = 10.0/MEDYAN.μM⁻¹_per_nm³\nKrGATBarb   = 1.0\nKfGADBarb   = 2.5/MEDYAN.μM⁻¹_per_nm³\nKrGADBarb   = 4.25\nKfPiRelease = 0.0026\nKrPiRelease = 5.20E-6/MEDYAN.μM⁻¹_per_nm³\n\n# 100\naddreaction!(s,\n    \"diffusing.GADPi --&gt; diffusing.GAD\",\n    0.0312,\n    0,\n)\naddreaction!(s,\n    \"diffusing.GAD --&gt; diffusing.GADPi\",\n    KrPiRelease*Pi,\n    0,\n)\n\n# 104\naddreaction!(s,\n    \"diffusing.GA --&gt; diffusing.GAT\",\n    1.7/MEDYAN.μM⁻¹_per_nm³*ATP,\n    0,\n)\naddreaction!(s,\n    \"diffusing.GAT --&gt; diffusing.GA\",\n    0.011,\n    0,\n)\n\n# 109\naddreaction!(s,\n    \"diffusing.GA --&gt; diffusing.GAD\",\n    0.9/MEDYAN.μM⁻¹_per_nm³*ADP,\n    0,\n)\naddreaction!(s,\n    \"diffusing.GAD --&gt; diffusing.GA\",\n    0.071,\n    0,\n)\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 5.0e6 nm²/s\n  GAD: 5.0e6 nm²/s\n  GADPi: 5.0e6 nm²/s\n  GAT: 5.0e6 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(3.0, 2.7, 4000.0, 26880.0, 40, 1)\n Compartment reactions without callbacks:\n  \"diffusing.GADPi --&gt; diffusing.GAD\" 0.0312 1/s\n  \"diffusing.GAD --&gt; diffusing.GADPi\" 0.0104 1/s\n  \"diffusing.GA --&gt; diffusing.GAT\" 17000.0 1/s\n  \"diffusing.GAT --&gt; diffusing.GA\" 0.011 1/s\n  \"diffusing.GA --&gt; diffusing.GAD\" 1799.9999999999998 1/s\n  \"diffusing.GAD --&gt; diffusing.GA\" 0.071 1/s\n\n\nNext add filament reactions.\nThe barbed end is the plus end and the pointed end is the minus end.\n\nmonomerspacing=2.7 # nm\n\n\nnucleotide_states = (\"T\", \"DPi\", \"D\")\n\n# Barbed end polymerization and depolymerization\nbarbed_rates = [\n    (\"T\", KfGATBarb, KrGATBarb),\n    (\"DPi\", KfGATBarb, KrGATBarb),\n    (\"D\", KfGADBarb, KrGADBarb),\n]\nfor (new_nuc, forward_rate, reverse_rate) in barbed_rates\n    for base_nuc in nucleotide_states\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"f\", \"GA\", new_nuc, \"_to_Barbed\", base_nuc),\n            false,\n            [Symbol(\"Barbed\", base_nuc)]=&gt;[Symbol(\"FA\", base_nuc), Symbol(\"Barbed\", new_nuc)],\n            monomerspacing,\n            \"diffusing.GA\"*new_nuc*\" --&gt;\",\n            forward_rate,\n            1,\n        )\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"r\", \"GA\", new_nuc, \"_to_Barbed\", base_nuc),\n            false,\n            [Symbol(\"FA\", base_nuc), Symbol(\"Barbed\", new_nuc)]=&gt;[Symbol(\"Barbed\", base_nuc)],\n            0.0,\n            \"--&gt; diffusing.GA\"*new_nuc,\n            reverse_rate,\n            0,\n        )\n    end\nend\n\n# Pointed end polymerization and depolymerization\npointed_rates = [\n    (\"T\", KfGATPoint, KrGATPoint),\n    (\"DPi\", KfGATPoint, KrGATPoint),\n    (\"D\", KfGADPoint, KrGADPoint),\n]\nfor (new_nuc, forward_rate, reverse_rate) in pointed_rates\n    for base_nuc in nucleotide_states\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"f\", \"GA\", new_nuc, \"_to_Pointed\", base_nuc),\n            true,\n            [Symbol(\"Pointed\", base_nuc)]=&gt;[Symbol(\"Pointed\", new_nuc), Symbol(\"FA\", base_nuc)],\n            monomerspacing,\n            \"diffusing.GA\"*new_nuc*\" --&gt;\",\n            forward_rate,\n            1,\n        )\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"r\", \"GA\", new_nuc, \"_to_Pointed\", base_nuc),\n            true,\n            [Symbol(\"Pointed\", new_nuc), Symbol(\"FA\", base_nuc)]=&gt;[Symbol(\"Pointed\", base_nuc)],\n            0.0,\n            \"--&gt; diffusing.GA\"*new_nuc,\n            reverse_rate,\n            0,\n        )\n    end\nend\n\n# Filament ATP hydrolysis and Pi Dissociation\nfor monomer_state in (\"FA\", \"Barbed\", \"Pointed\")\n    addfilament_reaction!(s,\n        :actin,\n        Symbol(monomer_state, \"T_to_\", monomer_state, \"DPi\"),\n        [Symbol(monomer_state, \"T\")]=&gt;[Symbol(monomer_state, \"DPi\")],\n        1,\n        \"--&gt;\",\n        0.3,\n        0,\n    )\n    addfilament_reaction!(s,\n        :actin,\n        Symbol(monomer_state, \"DPi_to_\", monomer_state, \"D\"),\n        [Symbol(monomer_state, \"DPi\")]=&gt;[Symbol(monomer_state, \"D\")],\n        1,\n        \"--&gt;\",\n        KfPiRelease,\n        0,\n    )\n    addfilament_reaction!(s,\n        :actin,\n        Symbol(monomer_state, \"D_to_\", monomer_state, \"DPi\"),\n        [Symbol(monomer_state, \"D\")]=&gt;[Symbol(monomer_state, \"DPi\")],\n        1,\n        \"--&gt;\",\n        KrPiRelease*Pi,\n        0,\n    )\nend\ns\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 5.0e6 nm²/s\n  GAD: 5.0e6 nm²/s\n  GADPi: 5.0e6 nm²/s\n  GAT: 5.0e6 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(3.0, 2.7, 4000.0, 26880.0, 40, 1)\n   filament sites:\n    FAT_to_FADPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x03])\n    FADPi_to_FAD: MEDYAN.FilamentSiteGeneral(1, UInt8[0x02])\n    FAD_to_FADPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x01])\n    BarbedT_to_BarbedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x06])\n    BarbedDPi_to_BarbedD: MEDYAN.FilamentSiteGeneral(1, UInt8[0x05])\n    BarbedD_to_BarbedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x04])\n    PointedT_to_PointedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x09])\n    PointedDPi_to_PointedD: MEDYAN.FilamentSiteGeneral(1, UInt8[0x08])\n    PointedD_to_PointedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x07])\n   filament end sites:\n    fGAT_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x06], 2.7, 1)\n    rGAT_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x03, 0x06], 0.0, 0)\n    fGAT_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x05], 2.7, 1)\n    rGAT_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x02, 0x06], 0.0, 0)\n    fGAT_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x04], 2.7, 1)\n    rGAT_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x01, 0x06], 0.0, 0)\n    fGADPi_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x06], 2.7, 1)\n    rGADPi_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x03, 0x05], 0.0, 0)\n    fGADPi_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x05], 2.7, 1)\n    rGADPi_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x02, 0x05], 0.0, 0)\n    fGADPi_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x04], 2.7, 1)\n    rGADPi_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x01, 0x05], 0.0, 0)\n    fGAD_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x06], 2.7, 1)\n    rGAD_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x03, 0x04], 0.0, 0)\n    fGAD_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x05], 2.7, 1)\n    rGAD_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x02, 0x04], 0.0, 0)\n    fGAD_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x04], 2.7, 1)\n    rGAD_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x01, 0x04], 0.0, 0)\n    fGAT_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09], 2.7, 1)\n    rGAT_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09, 0x03], 0.0, 0)\n    fGAT_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08], 2.7, 1)\n    rGAT_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09, 0x02], 0.0, 0)\n    fGAT_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07], 2.7, 1)\n    rGAT_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09, 0x01], 0.0, 0)\n    fGADPi_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09], 2.7, 1)\n    rGADPi_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08, 0x03], 0.0, 0)\n    fGADPi_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08], 2.7, 1)\n    rGADPi_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08, 0x02], 0.0, 0)\n    fGADPi_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07], 2.7, 1)\n    rGADPi_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08, 0x01], 0.0, 0)\n    fGAD_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09], 2.7, 1)\n    rGAD_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07, 0x03], 0.0, 0)\n    fGAD_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08], 2.7, 1)\n    rGAD_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07, 0x02], 0.0, 0)\n    fGAD_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07], 2.7, 1)\n    rGAD_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07, 0x01], 0.0, 0)\n Compartment reactions with callbacks:\n  1. \"filamentsite.actin.PointedD_to_PointedDPi --&gt; filamentsite.actin.PointedD_to_PointedDPi\" 0.0104 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 9, 1, UInt8[0x08], Pair{Int64, Int64}[])\n  2. \"filamentsite.actin.PointedDPi_to_PointedD --&gt; filamentsite.actin.PointedDPi_to_PointedD\" 0.0026 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 8, 1, UInt8[0x07], Pair{Int64, Int64}[])\n  3. \"filamentsite.actin.PointedT_to_PointedDPi --&gt; filamentsite.actin.PointedT_to_PointedDPi\" 0.3 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 7, 1, UInt8[0x08], Pair{Int64, Int64}[])\n  4. \"filamentsite.actin.BarbedD_to_BarbedDPi --&gt; filamentsite.actin.BarbedD_to_BarbedDPi\" 0.0104 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 6, 1, UInt8[0x05], Pair{Int64, Int64}[])\n  5. \"filamentsite.actin.BarbedDPi_to_BarbedD --&gt; filamentsite.actin.BarbedDPi_to_BarbedD\" 0.0026 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 5, 1, UInt8[0x04], Pair{Int64, Int64}[])\n  6. \"filamentsite.actin.BarbedT_to_BarbedDPi --&gt; filamentsite.actin.BarbedT_to_BarbedDPi\" 0.3 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 4, 1, UInt8[0x05], Pair{Int64, Int64}[])\n  7. \"filamentsite.actin.FAD_to_FADPi --&gt; filamentsite.actin.FAD_to_FADPi\" 0.0104 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 3, 1, UInt8[0x02], Pair{Int64, Int64}[])\n  8. \"filamentsite.actin.FADPi_to_FAD --&gt; filamentsite.actin.FADPi_to_FAD\" 0.0026 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 2, 1, UInt8[0x01], Pair{Int64, Int64}[])\n  9. \"filamentsite.actin.FAT_to_FADPi --&gt; filamentsite.actin.FAT_to_FADPi\" 0.3 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 1, 1, UInt8[0x02], Pair{Int64, Int64}[])\n  10. \"filamentendsite.actin.rGAD_to_PointedD --&gt; filamentendsite.actin.rGAD_to_PointedD\" 0.3 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 36, -1, UInt8[0x07], [2 =&gt; 1])\n  11. \"diffusing.GAD + filamentendsite.actin.fGAD_to_PointedD --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_PointedD\" 265686.2507478155 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 35, 1, UInt8[0x07, 0x01], [2 =&gt; -1])\n  12. \"filamentendsite.actin.rGAD_to_PointedDPi --&gt; filamentendsite.actin.rGAD_to_PointedDPi\" 0.3 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 34, -1, UInt8[0x08], [2 =&gt; 1])\n  13. \"diffusing.GAD + filamentendsite.actin.fGAD_to_PointedDPi --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_PointedDPi\" 265686.2507478155 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 33, 1, UInt8[0x07, 0x02], [2 =&gt; -1])\n  14. \"filamentendsite.actin.rGAD_to_PointedT --&gt; filamentendsite.actin.rGAD_to_PointedT\" 0.3 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 32, -1, UInt8[0x09], [2 =&gt; 1])\n  15. \"diffusing.GAD + filamentendsite.actin.fGAD_to_PointedT --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_PointedT\" 265686.2507478155 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 31, 1, UInt8[0x07, 0x03], [2 =&gt; -1])\n  16. \"filamentendsite.actin.rGADPi_to_PointedD --&gt; filamentendsite.actin.rGADPi_to_PointedD\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 30, -1, UInt8[0x07], [3 =&gt; 1])\n  17. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedD --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedD\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 29, 1, UInt8[0x08, 0x01], [3 =&gt; -1])\n  18. \"filamentendsite.actin.rGADPi_to_PointedDPi --&gt; filamentendsite.actin.rGADPi_to_PointedDPi\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 28, -1, UInt8[0x08], [3 =&gt; 1])\n  19. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedDPi --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedDPi\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 27, 1, UInt8[0x08, 0x02], [3 =&gt; -1])\n  20. \"filamentendsite.actin.rGADPi_to_PointedT --&gt; filamentendsite.actin.rGADPi_to_PointedT\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 26, -1, UInt8[0x09], [3 =&gt; 1])\n  21. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedT --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedT\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 25, 1, UInt8[0x08, 0x03], [3 =&gt; -1])\n  22. \"filamentendsite.actin.rGAT_to_PointedD --&gt; filamentendsite.actin.rGAT_to_PointedD\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 24, -1, UInt8[0x07], [4 =&gt; 1])\n  23. \"diffusing.GAT + filamentendsite.actin.fGAT_to_PointedD --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_PointedD\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 23, 1, UInt8[0x09, 0x01], [4 =&gt; -1])\n  24. \"filamentendsite.actin.rGAT_to_PointedDPi --&gt; filamentendsite.actin.rGAT_to_PointedDPi\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 22, -1, UInt8[0x08], [4 =&gt; 1])\n  25. \"diffusing.GAT + filamentendsite.actin.fGAT_to_PointedDPi --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_PointedDPi\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 21, 1, UInt8[0x09, 0x02], [4 =&gt; -1])\n  26. \"filamentendsite.actin.rGAT_to_PointedT --&gt; filamentendsite.actin.rGAT_to_PointedT\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 20, -1, UInt8[0x09], [4 =&gt; 1])\n  27. \"diffusing.GAT + filamentendsite.actin.fGAT_to_PointedT --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_PointedT\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 19, 1, UInt8[0x09, 0x03], [4 =&gt; -1])\n  28. \"filamentendsite.actin.rGAD_to_BarbedD --&gt; filamentendsite.actin.rGAD_to_BarbedD\" 4.25 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 18, -1, UInt8[0x04], [2 =&gt; 1])\n  29. \"diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedD --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedD\" 4.151347667934617e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 17, 1, UInt8[0x01, 0x04], [2 =&gt; -1])\n  30. \"filamentendsite.actin.rGAD_to_BarbedDPi --&gt; filamentendsite.actin.rGAD_to_BarbedDPi\" 4.25 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 16, -1, UInt8[0x05], [2 =&gt; 1])\n  31. \"diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedDPi --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedDPi\" 4.151347667934617e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 15, 1, UInt8[0x02, 0x04], [2 =&gt; -1])\n  32. \"filamentendsite.actin.rGAD_to_BarbedT --&gt; filamentendsite.actin.rGAD_to_BarbedT\" 4.25 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 14, -1, UInt8[0x06], [2 =&gt; 1])\n  33. \"diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedT --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedT\" 4.151347667934617e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 13, 1, UInt8[0x03, 0x04], [2 =&gt; -1])\n  34. \"filamentendsite.actin.rGADPi_to_BarbedD --&gt; filamentendsite.actin.rGADPi_to_BarbedD\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 12, -1, UInt8[0x04], [3 =&gt; 1])\n  35. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedD --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedD\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 11, 1, UInt8[0x01, 0x05], [3 =&gt; -1])\n  36. \"filamentendsite.actin.rGADPi_to_BarbedDPi --&gt; filamentendsite.actin.rGADPi_to_BarbedDPi\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 10, -1, UInt8[0x05], [3 =&gt; 1])\n  37. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedDPi --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedDPi\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 9, 1, UInt8[0x02, 0x05], [3 =&gt; -1])\n  38. \"filamentendsite.actin.rGADPi_to_BarbedT --&gt; filamentendsite.actin.rGADPi_to_BarbedT\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 8, -1, UInt8[0x06], [3 =&gt; 1])\n  39. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedT --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedT\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 7, 1, UInt8[0x03, 0x05], [3 =&gt; -1])\n  40. \"filamentendsite.actin.rGAT_to_BarbedD --&gt; filamentendsite.actin.rGAT_to_BarbedD\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 6, -1, UInt8[0x04], [4 =&gt; 1])\n  41. \"diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedD --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedD\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 5, 1, UInt8[0x01, 0x06], [4 =&gt; -1])\n  42. \"filamentendsite.actin.rGAT_to_BarbedDPi --&gt; filamentendsite.actin.rGAT_to_BarbedDPi\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 4, -1, UInt8[0x05], [4 =&gt; 1])\n  43. \"diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedDPi --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedDPi\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 3, 1, UInt8[0x02, 0x06], [4 =&gt; -1])\n  44. \"filamentendsite.actin.rGAT_to_BarbedT --&gt; filamentendsite.actin.rGAT_to_BarbedT\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 2, -1, UInt8[0x06], [4 =&gt; 1])\n  45. \"diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedT --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedT\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 1, 1, UInt8[0x03, 0x06], [4 =&gt; -1])\n Compartment reactions without callbacks:\n  \"diffusing.GADPi --&gt; diffusing.GAD\" 0.0312 1/s\n  \"diffusing.GAD --&gt; diffusing.GADPi\" 0.0104 1/s\n  \"diffusing.GA --&gt; diffusing.GAT\" 17000.0 1/s\n  \"diffusing.GAT --&gt; diffusing.GA\" 0.011 1/s\n  \"diffusing.GA --&gt; diffusing.GAD\" 1799.9999999999998 1/s\n  \"diffusing.GAD --&gt; diffusing.GA\" 0.071 1/s",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#creating-a-grid",
    "href": "tutorials/3treadmill.html#creating-a-grid",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "Create a 1 by 1 by 3 grid of 500 nm side length voxels.\n\nL = 3\ngrid = CubicGrid((1,1,L),500.0)\n\nCubicGrid([1, 1, 3], 500.0)",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#creating-a-context",
    "href": "tutorials/3treadmill.html#creating-a-context",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "The Context is the object the handles the state of a running simulation.\nCreate a Context using s and grid\n\nc = MEDYAN.Context(s, grid)\n\nMEDYAN.Context at time 0.0s in MEDYAN.CubicGrid([1, 1, 3], 500.0)",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#add-mechanical-boundary",
    "href": "tutorials/3treadmill.html#add-mechanical-boundary",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "set_mechboundary!(c, MEDYAN.boundary_box(grid; stiffness=100.0))\n\nMEDYAN.Boundary(SVector{4, Float64}[[-10.0, 0.0, 0.0, 2500.0], [10.0, 0.0, 0.0, 2500.0], [0.0, -10.0, 0.0, 2500.0], [0.0, 10.0, 0.0, 2500.0], [0.0, 0.0, -10.0, 7500.0], [0.0, 0.0, 10.0, 7500.0]], SVector{8, Float64}[])",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#add-agents-to-the-context",
    "href": "tutorials/3treadmill.html#add-agents-to-the-context",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "The context starts empty.\nDistribute 700 of GAT randomly to the chem voxels by mutating the context.\nadddiffusingcount_rand!\n\nadddiffusingcount_rand!(c, s.diffusing.GAT, 700)\n\nAdd a single short filament by mutating the context.\n\nmono_states = [s.state.actin.PointedD, s.state.actin.FADPi, s.state.actin.FAT, s.state.actin.BarbedT]\nnode_positions = [\n    SA[0.0,0.0,0.0], \n    SA[0.0,0.0,monomerspacing*length(mono_states)]\n]\nmake_fila!(c; type=:actin, mono_states, node_positions, node_mids=[1,])\n\nMEDYAN.Tag{FilaTipIdx}(0x00000002, 0x00000001)",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#run-chemistry",
    "href": "tutorials/3treadmill.html#run-chemistry",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "Run chemistry for 1.0s and visualize the results.\n\nvis = Visualizer()\nsetvisible!(vis[\"/Grid\"], false)\nsetvisible!(vis[\"/Axes\"], false)\nsetvisible!(vis[\"/Background\"], false)\n\nIf you open the visualizer in a browser and run the following you should get an animated version of below.\n\nfor i in 1:100\n    run_chemistry!(c, 0.01)\n    minimize_energy!(c)\n    draw_context!(vis, c, s)\nend",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MEDYAN.jl",
    "section": "",
    "text": "Documentation for MEDYAN."
  },
  {
    "objectID": "index.html#warning-the-api-is-very-unstable-and-this-package-is-not-released-yet.",
    "href": "index.html#warning-the-api-is-very-unstable-and-this-package-is-not-released-yet.",
    "title": "MEDYAN.jl",
    "section": "Warning, the API is very unstable, and this package is not released yet.",
    "text": "Warning, the API is very unstable, and this package is not released yet.\nWelcome to Papoian Lab’s Mechanochemical Dynamics of Active Networks Julia package.\nThis is based on the C++ medyan command line tool also developed by the Papoian Lab.\nCopyright 2022, Papoian lab at the University of Maryland.\nThis code is distributed under the license found in this directory, license.txt."
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "MEDYAN.jl",
    "section": "Usage",
    "text": "Usage\nFirst install and run Julia https://julialang.org/downloads/\nNext download or clone this repository.\nFinally, to use MEDYAN.jl, in Julia run:\nusing Pkg; pkg\"dev &lt;path to repo&gt;/MEDYAN\"\nWhere &lt;path to repo&gt; should be replaced with a local or absolute path to the repo.\n\nTutorials\nReference"
  },
  {
    "objectID": "index.html#authors",
    "href": "index.html#authors",
    "title": "MEDYAN.jl",
    "section": "Authors",
    "text": "Authors\nActive developers:\n\n\n\nName\nEmail\n\n\n\n\nNathan Zimmerberg\nnzimmerb@umd.edu\n\n\nMengxin Gu\nmxgu1234@umd.edu\n\n\nPatrick Kelly\nptfk1677@umd.edu\n\n\n\nAll developers including developers of C++ medyan:\nGaregin Papoian (gpapoian@umd.edu), Konstantin Popov, James Komianos, Aravind Chandrasekaran, Qin Ni, Carlos Floyd, Haoran Ni, Nathan Zimmerberg, Joshua Lucker, Mengxin Gu, Patrick Kelly\nAll general correspondence about the code and its applications should be directed to Garegin Papoian. All developer and more specific code, installation, and usage correspondence should be directed to Active developers via email or the issue tracker."
  },
  {
    "objectID": "index.html#running-tests",
    "href": "index.html#running-tests",
    "title": "MEDYAN.jl",
    "section": "Running tests",
    "text": "Running tests\nIn shell:\ncd MEDYAN/test\njulia --project -e 'using Pkg; Pkg.instantiate()'\njulia --project runtests.jl\nYou can also include individual test files to run just those tests."
  },
  {
    "objectID": "index.html#sub-packages",
    "href": "index.html#sub-packages",
    "title": "MEDYAN.jl",
    "section": "Sub Packages",
    "text": "Sub Packages\nThere are a number of sub packages found in the root directory.\nFor example “MEDYAN2Vtk”, can be tested using the following shell commands:\ncd MEDYAN2Vtk/test\njulia --project -e 'using Pkg; Pkg.instantiate()'\njulia --project runtests.jl\nTo use “MEDYAN2Vtk” package in a new environment in Julia run:\nusing Pkg; pkg\"dev &lt;path to repo&gt;/MEDYAN2Vtk\"\nIf the sub package depends on other sub packages or depends on MEDYAN, you may have to dev multiple paths."
  },
  {
    "objectID": "index.html#running-notebooks",
    "href": "index.html#running-notebooks",
    "title": "MEDYAN.jl",
    "section": "Running notebooks",
    "text": "Running notebooks\nTo run interactively in a Pluto Notebook, run the following shell commands:\ncd notebooks\njulia --project -e 'using Pkg; Pkg.instantiate()'\njulia --project -e 'import Pluto; Pluto.run()'\nTo generate static html files, run the following shell commands:\ncd notebooks\njulia --project -e 'using Pkg; Pkg.instantiate()'\njulia --project runnotebooks.jl"
  },
  {
    "objectID": "index.html#editing-documentation",
    "href": "index.html#editing-documentation",
    "title": "MEDYAN.jl",
    "section": "Editing Documentation",
    "text": "Editing Documentation\nRun the following to set up the environment and create a preview. Any changes to files in docs should auto update.\n./docs/make.jl\nor\njulia docs/make.jl\nRun the following to refresh the docstrings for the site.\njulia --project=docs docs/make-docstrings.jl"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Table of Contents",
    "section": "",
    "text": "src/sysdefs.jl\n\nMEDYAN.AgentNames\nMEDYAN.SysDef\nadd_diffusion_coeff!\naddreaction!\naddreactioncallback!\nadd_filament_params!\naddfilamentsite!\naddfilament_reaction!\naddfilamentendsite!\naddfilamentend_reaction!\n\n\n\n\n\nMEDYAN.Context\nCubicGrid\ndeepcopy, note: rng is shared\n\n\n\n\n\nBase.empty!\nload_snapshot!\nchem_adddiffusingcount!\nchem_addfixedcount!\nadddiffusingcount_rand!\nset_time!\nset_enable_cylinder_volume_exclusion!\nset_chemboundary!\nset_mechboundary!\n\n\n\n\n\nmake_fila!\nmake_fila_rand!\nremove_fila!\nupdate_fila_mono_state!\npolymerize_fila!\ndepolymerize_fila!\nsever_fila!\n\n\n\n\n\nnum_fila_types\nnum_fila\nfila_mono_ids\nfila_mono_states\nfila_num_nodes\nfila_node_mids\nfila_node_positions\nfila_tip_tags\nfila_num_unmin_ends\npick_rand_fila_mono_site\npick_rand_fila_tip_site\n\n\n\n\n\ntag!\nmake_link!\nremove_link!\nupdate_link!\n\n\n\n\n\nnum_link_types\nget_all_links\nget_all_tags\ntag2links\nplace2links\ntag_exists\nplace_exists\nlink_exists\nlink2tags\ntag2place\nplace2tag\nhas_tag\nget_position\nnum_directions\nget_directions\nget_chem_state\nget_state\nget_bond_states\nget_bond_enabled\nget_reaction_enabled\nis_minimized\nget_link_mechanics\n\n\n\n\n\nrun_chemistry!\nminimize_energy!\n\n\n\n\n\n\n\n\n\n\nfilament sites\nfilament end sites\ndecimated_2mon sites\n\n\n\n\n\n\n\n\n\n\nCubicGrid\nMEDYAN.grididat\nMEDYAN.filter_grididat\nMEDYAN.centerof",
    "crumbs": [
      "Reference",
      "Table of Contents"
    ]
  },
  {
    "objectID": "reference/index.html#functions",
    "href": "reference/index.html#functions",
    "title": "Table of Contents",
    "section": "",
    "text": "src/sysdefs.jl\n\nMEDYAN.AgentNames\nMEDYAN.SysDef\nadd_diffusion_coeff!\naddreaction!\naddreactioncallback!\nadd_filament_params!\naddfilamentsite!\naddfilament_reaction!\naddfilamentendsite!\naddfilamentend_reaction!\n\n\n\n\n\nMEDYAN.Context\nCubicGrid\ndeepcopy, note: rng is shared\n\n\n\n\n\nBase.empty!\nload_snapshot!\nchem_adddiffusingcount!\nchem_addfixedcount!\nadddiffusingcount_rand!\nset_time!\nset_enable_cylinder_volume_exclusion!\nset_chemboundary!\nset_mechboundary!\n\n\n\n\n\nmake_fila!\nmake_fila_rand!\nremove_fila!\nupdate_fila_mono_state!\npolymerize_fila!\ndepolymerize_fila!\nsever_fila!\n\n\n\n\n\nnum_fila_types\nnum_fila\nfila_mono_ids\nfila_mono_states\nfila_num_nodes\nfila_node_mids\nfila_node_positions\nfila_tip_tags\nfila_num_unmin_ends\npick_rand_fila_mono_site\npick_rand_fila_tip_site\n\n\n\n\n\ntag!\nmake_link!\nremove_link!\nupdate_link!\n\n\n\n\n\nnum_link_types\nget_all_links\nget_all_tags\ntag2links\nplace2links\ntag_exists\nplace_exists\nlink_exists\nlink2tags\ntag2place\nplace2tag\nhas_tag\nget_position\nnum_directions\nget_directions\nget_chem_state\nget_state\nget_bond_states\nget_bond_enabled\nget_reaction_enabled\nis_minimized\nget_link_mechanics\n\n\n\n\n\nrun_chemistry!\nminimize_energy!",
    "crumbs": [
      "Reference",
      "Table of Contents"
    ]
  },
  {
    "objectID": "reference/index.html#interfaces",
    "href": "reference/index.html#interfaces",
    "title": "Table of Contents",
    "section": "",
    "text": "filament sites\nfilament end sites\ndecimated_2mon sites",
    "crumbs": [
      "Reference",
      "Table of Contents"
    ]
  },
  {
    "objectID": "reference/index.html#utilities",
    "href": "reference/index.html#utilities",
    "title": "Table of Contents",
    "section": "",
    "text": "CubicGrid\nMEDYAN.grididat\nMEDYAN.filter_grididat\nMEDYAN.centerof",
    "crumbs": [
      "Reference",
      "Table of Contents"
    ]
  },
  {
    "objectID": "reference/sitesinfo.html",
    "href": "reference/sitesinfo.html",
    "title": "Sites",
    "section": "",
    "text": "Abstractly, sites are an interface that allow more complex structures like filaments to interact with diffusing species and chemistry voxel reaction propensities.\nEach site type has an associated fixed species. During chemistry that fixed species count will always be greater than or equal to the total counts of the site in the chemistry voxel.\nChemistry callbacks can try and pick a random site in a chemistry voxel to get specific information about exactly where in a chemistry voxel some event should happen.\nThese are the groups of sites currently in MEDYAN.jl:\n\n\nFilament sites can only be associated with one filament type.\n\n\nA type T must implement the following functions to be a filament site.\n\n\nHow many monomer states in the plus direction this site looks at.\n\n\n\nHow many monomer states in the minus direction this site looks at.\n\n\n\nReturn site count at a monomer given states, A vector of MonomerState with length length(states) == getminusrange(filamentsite) + 1 + getplusrange(filamentsite)\nThe site count gets put in the chemistry voxel of the center monomer.\n\n\n\n\n\n\n\n\n\nMEDYAN.pick_rand_fila_mono_site function\nMEDYAN.Context#filamentsites field\n\n\n\nMEDYAN.SysDef#filamentsite field\nMEDYAN.addfilamentsite! function\nMEDYAN.addfilament_reaction! function\n\n\n\n\n\nFilament end sites can only be associated with one filament type.\n\n\nA type T must implement the following functions to be a filament end site.\n\n\nHow many monomer states this site looks at.\n\n\n\nTrue if the filament end site is on the minus end, false if on the plus end.\n\n\n\nReturn spacing needed for the filament end site reaction to happen, units of nm.\n\n\n\nReturn number of monomers that need to be added for the filament end site reaction to happen. Each filament has a limited number of monomers that can be added per end between minimizations given by FilamentMechParams.max_num_unmin_end. If this function returns zero, this limit is ignored for site. Also, see fila_num_unmin_ends If this function returns a number greater than zero, the site count will be zero if the current number of unminimized monomers on the end plus the added_monomers result will go over FilamentMechParams.max_num_unmin_end.\n\n\n\nReturn the filament end site count at the end of a filament with monomer states vector states The rate of filament end reaction will be modified by the brownian ratchet model:\nexp(-β*F*L) where F is the compression force on the filament end, and L is spacing(site).\nlength(states) == getrange(filamentendsite)\nThe site count gets put in the chemistry voxel of the end monomer.\n\n\n\n\n\n\n\n\n\nMEDYAN.pick_rand_fila_tip_site\n\n\n\nMEDYAN.SysDef#filamentendsite field\nMEDYAN.addfilamentendsite!\nMEDYAN.addfilamentend_reaction!\n\n\n\n\n\nDecimated_2mon sites represent a potential link between two monomers, potentially on two different filaments. The site count is added to the chemistry voxel of the potential monomer that could attach to the minus end of the link.\n\n\nA type T must implement the following functions to be a decimated_2mon site.\n\n\nReturn the maximum distance in nm of a decimated_2mon site.\n\n\n\nReturn the maximum decimated_2mon_sitecount will return given a pair of monomers in_linking_range.\n\n\n\nReturn if two monomers are in range to possibly link in the forward direction, and if they are in range to possibly link in the reverse direction.\n\n\n\nReturn the filament types of the minus and plus monomers.\n\n\n\nReturn the monomer step size starting with mid 0 in the search for potential decimated_2mon sites on the minus and plus ends respectively.\n1 searches every monomer. 2 searches every monomer with even mid …\nIf the plus and minus filament types are the same, then getmidsteps(site)[1] == getmidsteps(site)[2]\n\n\n\nReturn the site count of two monomers getting linked given their states, their positions, and their plus vectors. The monomers can be assumed to be in_linking_range, from the correct filament types, and at the correct step.\n\n\n\n\n\n\n\n\n\nMEDYAN.pickrandom_decimated_2mon_site\nMEDYAN.Context#decimated_2mon_sites field\n\n\n\nMEDYAN.SysDef#decimated_2mon_site field\nMEDYAN.add_decimated_2mon_site!",
    "crumbs": [
      "Reference",
      "Sites"
    ]
  },
  {
    "objectID": "reference/sitesinfo.html#filament-sites",
    "href": "reference/sitesinfo.html#filament-sites",
    "title": "Sites",
    "section": "",
    "text": "Filament sites can only be associated with one filament type.\n\n\nA type T must implement the following functions to be a filament site.\n\n\nHow many monomer states in the plus direction this site looks at.\n\n\n\nHow many monomer states in the minus direction this site looks at.\n\n\n\nReturn site count at a monomer given states, A vector of MonomerState with length length(states) == getminusrange(filamentsite) + 1 + getplusrange(filamentsite)\nThe site count gets put in the chemistry voxel of the center monomer.\n\n\n\n\n\n\n\n\n\nMEDYAN.pick_rand_fila_mono_site function\nMEDYAN.Context#filamentsites field\n\n\n\nMEDYAN.SysDef#filamentsite field\nMEDYAN.addfilamentsite! function\nMEDYAN.addfilament_reaction! function",
    "crumbs": [
      "Reference",
      "Sites"
    ]
  },
  {
    "objectID": "reference/sitesinfo.html#filament-end-sites",
    "href": "reference/sitesinfo.html#filament-end-sites",
    "title": "Sites",
    "section": "",
    "text": "Filament end sites can only be associated with one filament type.\n\n\nA type T must implement the following functions to be a filament end site.\n\n\nHow many monomer states this site looks at.\n\n\n\nTrue if the filament end site is on the minus end, false if on the plus end.\n\n\n\nReturn spacing needed for the filament end site reaction to happen, units of nm.\n\n\n\nReturn number of monomers that need to be added for the filament end site reaction to happen. Each filament has a limited number of monomers that can be added per end between minimizations given by FilamentMechParams.max_num_unmin_end. If this function returns zero, this limit is ignored for site. Also, see fila_num_unmin_ends If this function returns a number greater than zero, the site count will be zero if the current number of unminimized monomers on the end plus the added_monomers result will go over FilamentMechParams.max_num_unmin_end.\n\n\n\nReturn the filament end site count at the end of a filament with monomer states vector states The rate of filament end reaction will be modified by the brownian ratchet model:\nexp(-β*F*L) where F is the compression force on the filament end, and L is spacing(site).\nlength(states) == getrange(filamentendsite)\nThe site count gets put in the chemistry voxel of the end monomer.\n\n\n\n\n\n\n\n\n\nMEDYAN.pick_rand_fila_tip_site\n\n\n\nMEDYAN.SysDef#filamentendsite field\nMEDYAN.addfilamentendsite!\nMEDYAN.addfilamentend_reaction!",
    "crumbs": [
      "Reference",
      "Sites"
    ]
  },
  {
    "objectID": "reference/sitesinfo.html#decimated_2mon-sites",
    "href": "reference/sitesinfo.html#decimated_2mon-sites",
    "title": "Sites",
    "section": "",
    "text": "Decimated_2mon sites represent a potential link between two monomers, potentially on two different filaments. The site count is added to the chemistry voxel of the potential monomer that could attach to the minus end of the link.\n\n\nA type T must implement the following functions to be a decimated_2mon site.\n\n\nReturn the maximum distance in nm of a decimated_2mon site.\n\n\n\nReturn the maximum decimated_2mon_sitecount will return given a pair of monomers in_linking_range.\n\n\n\nReturn if two monomers are in range to possibly link in the forward direction, and if they are in range to possibly link in the reverse direction.\n\n\n\nReturn the filament types of the minus and plus monomers.\n\n\n\nReturn the monomer step size starting with mid 0 in the search for potential decimated_2mon sites on the minus and plus ends respectively.\n1 searches every monomer. 2 searches every monomer with even mid …\nIf the plus and minus filament types are the same, then getmidsteps(site)[1] == getmidsteps(site)[2]\n\n\n\nReturn the site count of two monomers getting linked given their states, their positions, and their plus vectors. The monomers can be assumed to be in_linking_range, from the correct filament types, and at the correct step.\n\n\n\n\n\n\n\n\n\nMEDYAN.pickrandom_decimated_2mon_site\nMEDYAN.Context#decimated_2mon_sites field\n\n\n\nMEDYAN.SysDef#decimated_2mon_site field\nMEDYAN.add_decimated_2mon_site!",
    "crumbs": [
      "Reference",
      "Sites"
    ]
  },
  {
    "objectID": "docstrings/medyan.addpossiblecadherinsite--ae8586daa0b5454a.html",
    "href": "docstrings/medyan.addpossiblecadherinsite--ae8586daa0b5454a.html",
    "title": "MEDYAN.addpossiblecadherinsite!",
    "section": "",
    "text": "addpossiblecadherinsite!(s::SysDef,possiblecadherinsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.addpossiblecadherinsite--ae8586daa0b5454a.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "href": "docstrings/medyan.addpossiblecadherinsite--ae8586daa0b5454a.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "title": "MEDYAN.addpossiblecadherinsite!",
    "section": "",
    "text": "addpossiblecadherinsite!(s::SysDef,possiblecadherinsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.membranespeciesparams-548fecb643fc2599.html",
    "href": "docstrings/medyan.membranespeciesparams-548fecb643fc2599.html",
    "title": "MEDYAN.MembraneSpeciesParams",
    "section": "",
    "text": "Membrane protein physical parameters.\n\ndiffusion_coeff::Float64: Membrane diffusion coefficients (nm^2/s).\narea::Float64: Protein area projected onto the surface (nm^2).\nkbend::Float64: Bending rigidity (pN nm).\neqcurv::Float64: The protein’s own spontaneous mean curvature (/nm). Can be used in bending energy computations with curvatures."
  },
  {
    "objectID": "docstrings/medyan.membranespeciesparams-548fecb643fc2599.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.membranespeciesparams-548fecb643fc2599.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.MembraneSpeciesParams",
    "section": "",
    "text": "Membrane protein physical parameters.\n\ndiffusion_coeff::Float64: Membrane diffusion coefficients (nm^2/s).\narea::Float64: Protein area projected onto the surface (nm^2).\nkbend::Float64: Bending rigidity (pN nm).\neqcurv::Float64: The protein’s own spontaneous mean curvature (/nm). Can be used in bending energy computations with curvatures."
  },
  {
    "objectID": "docstrings/medyan.has_tag-d550430128572035.html",
    "href": "docstrings/medyan.has_tag-d550430128572035.html",
    "title": "MEDYAN.has_tag",
    "section": "",
    "text": "has_tag(c::Context, p::Place)::Bool\nReturn true iff p has a tag. Otherwise return false. If !place_exists(c, p) return false."
  },
  {
    "objectID": "docstrings/medyan.has_tag-d550430128572035.html#tuple-medyan.context--medyan.place--5f4876ae276f10cb",
    "href": "docstrings/medyan.has_tag-d550430128572035.html#tuple-medyan.context--medyan.place--5f4876ae276f10cb",
    "title": "MEDYAN.has_tag",
    "section": "",
    "text": "has_tag(c::Context, p::Place)::Bool\nReturn true iff p has a tag. Otherwise return false. If !place_exists(c, p) return false."
  },
  {
    "objectID": "docstrings/base.setindex--725f722fff4cfa6d.html",
    "href": "docstrings/base.setindex--725f722fff4cfa6d.html",
    "title": "Base.setindex!",
    "section": "",
    "text": "Map ID to a new index. The ID must be in use."
  },
  {
    "objectID": "docstrings/base.setindex--725f722fff4cfa6d.html#tuple-medyan.stableindex--integer--integer--808485796eb5543d",
    "href": "docstrings/base.setindex--725f722fff4cfa6d.html#tuple-medyan.stableindex--integer--integer--808485796eb5543d",
    "title": "Base.setindex!",
    "section": "",
    "text": "Map ID to a new index. The ID must be in use."
  },
  {
    "objectID": "docstrings/medyan.addfilamentend_reaction--83ec3db37b4e2130.html",
    "href": "docstrings/medyan.addfilamentend_reaction--83ec3db37b4e2130.html",
    "title": "MEDYAN.addfilamentend_reaction!",
    "section": "",
    "text": "Add filament end reaction. Return s. Add a filamentendsite and reaction with callback to change the filaments. This can be used for polymerization, depolymeriation, and changing end state.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentendsitename::Symbol: the new name of the filamentendsite added. This can be used as a catalyst in other reactions.\nisminusend::Bool: true if changing the minus end, false if changing the plus end.\nchangedendstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the end monomer states, the first is the states to match. The second is the new monomer states after the reaction. If the second has more states than the first, new monomers will be added, if the second has less, monomers will be removed. Ordered minus end first.\nspacing::Float64: Space needed at the filament end for this reaction. (nm) ratefactor= exp(-β*spacing*loadforce) where β is 1/kT, loadforce is the external force pushing axially on the end of the filament. and ratefactor affects this reaction propensity and any others using filamentendsitename\nreactionexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentendsite.$(filamenttypename).$(filamentendsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the voxel in nm³. volumefactor only applies to this reaction not any other reaction using filamentendsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    diffusingspeciesnames= [:a,],\n    filamentnames= [(:filname,[\n                            :plus,\n                            :mid,\n                            :minus,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\nmonomerspacing= 2.7\n#minus end polymerization\naddfilamentend_reaction!(s, :filname, :pm, true,\n    [:minus]=&gt;[:minus,:mid], monomerspacing,\n    \"diffusing.a --&gt;\", 10E3, 1,\n)\n#plus end depolymerization\naddfilamentend_reaction!(s, :filname, :dpp, false,\n    [:mid,:plus]=&gt;[:plus], 0.0,\n    \"--&gt; diffusing.a\", 1.75E-3, 0,\n)"
  },
  {
    "objectID": "docstrings/medyan.addfilamentend_reaction--83ec3db37b4e2130.html#tuple-medyan.sysdef--symbol--symbol--bool--pair-vector-symbol---vector-symbol----float64--abstractstring--float64--int64--02be6e9d6f919481",
    "href": "docstrings/medyan.addfilamentend_reaction--83ec3db37b4e2130.html#tuple-medyan.sysdef--symbol--symbol--bool--pair-vector-symbol---vector-symbol----float64--abstractstring--float64--int64--02be6e9d6f919481",
    "title": "MEDYAN.addfilamentend_reaction!",
    "section": "",
    "text": "Add filament end reaction. Return s. Add a filamentendsite and reaction with callback to change the filaments. This can be used for polymerization, depolymeriation, and changing end state.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentendsitename::Symbol: the new name of the filamentendsite added. This can be used as a catalyst in other reactions.\nisminusend::Bool: true if changing the minus end, false if changing the plus end.\nchangedendstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the end monomer states, the first is the states to match. The second is the new monomer states after the reaction. If the second has more states than the first, new monomers will be added, if the second has less, monomers will be removed. Ordered minus end first.\nspacing::Float64: Space needed at the filament end for this reaction. (nm) ratefactor= exp(-β*spacing*loadforce) where β is 1/kT, loadforce is the external force pushing axially on the end of the filament. and ratefactor affects this reaction propensity and any others using filamentendsitename\nreactionexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentendsite.$(filamenttypename).$(filamentendsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the voxel in nm³. volumefactor only applies to this reaction not any other reaction using filamentendsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    diffusingspeciesnames= [:a,],\n    filamentnames= [(:filname,[\n                            :plus,\n                            :mid,\n                            :minus,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\nmonomerspacing= 2.7\n#minus end polymerization\naddfilamentend_reaction!(s, :filname, :pm, true,\n    [:minus]=&gt;[:minus,:mid], monomerspacing,\n    \"diffusing.a --&gt;\", 10E3, 1,\n)\n#plus end depolymerization\naddfilamentend_reaction!(s, :filname, :dpp, false,\n    [:mid,:plus]=&gt;[:plus], 0.0,\n    \"--&gt; diffusing.a\", 1.75E-3, 0,\n)"
  },
  {
    "objectID": "docstrings/medyan.num_link_types-2d203a5799bbfdcc.html",
    "href": "docstrings/medyan.num_link_types-2d203a5799bbfdcc.html",
    "title": "MEDYAN.num_link_types",
    "section": "",
    "text": "num_link_types(c::Context)::Int\nReturn the number of link types."
  },
  {
    "objectID": "docstrings/medyan.num_link_types-2d203a5799bbfdcc.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.num_link_types-2d203a5799bbfdcc.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.num_link_types",
    "section": "",
    "text": "num_link_types(c::Context)::Int\nReturn the number of link types."
  },
  {
    "objectID": "docstrings/medyan.filamentsitegeneral-0d87ce44fed17b2c.html",
    "href": "docstrings/medyan.filamentsitegeneral-0d87ce44fed17b2c.html",
    "title": "MEDYAN.FilamentSiteGeneral",
    "section": "",
    "text": "General filament site just matches monomer states\n\ncenter::Int64: index of center monomer in states\nstates::Vector{UInt8}: monomer states to match"
  },
  {
    "objectID": "docstrings/medyan.filamentsitegeneral-0d87ce44fed17b2c.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.filamentsitegeneral-0d87ce44fed17b2c.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.FilamentSiteGeneral",
    "section": "",
    "text": "General filament site just matches monomer states\n\ncenter::Int64: index of center monomer in states\nstates::Vector{UInt8}: monomer states to match"
  },
  {
    "objectID": "docstrings/medyan.addmembranediffusingcount_rand--7b719dca63a36b1b.html",
    "href": "docstrings/medyan.addmembranediffusingcount_rand--7b719dca63a36b1b.html",
    "title": "MEDYAN.addmembranediffusingcount_rand!",
    "section": "",
    "text": "addmembranediffusingcount_rand!(\n    c::MEDYAN.Context,\n    membraneindex::Int64,\n    speciesindex::Int64,\n    addcount::Int64\n)\nDistribute the added membrane species count randomly to membrane cells, ignoring cell area difference. Does NOT update propensity."
  },
  {
    "objectID": "docstrings/medyan.addmembranediffusingcount_rand--7b719dca63a36b1b.html#tuple-medyan.context--int64--int64--int64--c6aa1d407904887b",
    "href": "docstrings/medyan.addmembranediffusingcount_rand--7b719dca63a36b1b.html#tuple-medyan.context--int64--int64--int64--c6aa1d407904887b",
    "title": "MEDYAN.addmembranediffusingcount_rand!",
    "section": "",
    "text": "addmembranediffusingcount_rand!(\n    c::MEDYAN.Context,\n    membraneindex::Int64,\n    speciesindex::Int64,\n    addcount::Int64\n)\nDistribute the added membrane species count randomly to membrane cells, ignoring cell area difference. Does NOT update propensity."
  },
  {
    "objectID": "docstrings/medyan.addreactioncallback--9c9d46adeded2d88.html",
    "href": "docstrings/medyan.addreactioncallback--9c9d46adeded2d88.html",
    "title": "MEDYAN.addreactioncallback!",
    "section": "",
    "text": "addreactioncallback!(s::SysDef, reaction::CompartmentReaction, callback)::SysDef\naddreactioncallback!(s::SysDef, reactantexpr::AbstractString, rate::Float64, invvolumepower::Int, callback)::SysDef\nLike addreaction! but also adds callback. callback is called when the reaction happens with input of MEDYAN.Context and Int the compartment id where the reaction happened.\nThe reaction should normally have no net stoichiometry because the callback should handle updating species counts. If an AbstractString is passed instead of a CompartmentReaction for the reaction, that string will be parsed to determine the reactants. The net stoichiometry will be zero.\nMEDYAN.errorcheck_addcallback(callback,s::SysDef) can optionally be overloaded to add errorchecking when the callback is added.\n\n\n\n\n\n\n\n\n\n\n\n\nCallback for bulk reactions: Context -&gt; Nothing."
  },
  {
    "objectID": "docstrings/medyan.addreactioncallback--9c9d46adeded2d88.html#tuple-medyan.sysdef--medyan.compartmentreaction--any--36763138c31ba7fa",
    "href": "docstrings/medyan.addreactioncallback--9c9d46adeded2d88.html#tuple-medyan.sysdef--medyan.compartmentreaction--any--36763138c31ba7fa",
    "title": "MEDYAN.addreactioncallback!",
    "section": "",
    "text": "addreactioncallback!(s::SysDef, reaction::CompartmentReaction, callback)::SysDef\naddreactioncallback!(s::SysDef, reactantexpr::AbstractString, rate::Float64, invvolumepower::Int, callback)::SysDef\nLike addreaction! but also adds callback. callback is called when the reaction happens with input of MEDYAN.Context and Int the compartment id where the reaction happened.\nThe reaction should normally have no net stoichiometry because the callback should handle updating species counts. If an AbstractString is passed instead of a CompartmentReaction for the reaction, that string will be parsed to determine the reactants. The net stoichiometry will be zero.\nMEDYAN.errorcheck_addcallback(callback,s::SysDef) can optionally be overloaded to add errorchecking when the callback is added."
  },
  {
    "objectID": "docstrings/medyan.addreactioncallback--9c9d46adeded2d88.html#tuple-medyan.sysdef--medyan.bulkreaction--any--bad9b85c7303199e",
    "href": "docstrings/medyan.addreactioncallback--9c9d46adeded2d88.html#tuple-medyan.sysdef--medyan.bulkreaction--any--bad9b85c7303199e",
    "title": "MEDYAN.addreactioncallback!",
    "section": "",
    "text": "Callback for bulk reactions: Context -&gt; Nothing."
  },
  {
    "objectID": "docstrings/medyan.vertexname-2d87a6a86cabc4f5.html",
    "href": "docstrings/medyan.vertexname-2d87a6a86cabc4f5.html",
    "title": "MEDYAN.VertexName",
    "section": "",
    "text": "membraneindex::Int64: membrane index\nvid::Int64: vertex id"
  },
  {
    "objectID": "docstrings/medyan.vertexname-2d87a6a86cabc4f5.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.vertexname-2d87a6a86cabc4f5.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.VertexName",
    "section": "",
    "text": "membraneindex::Int64: membrane index\nvid::Int64: vertex id"
  },
  {
    "objectID": "docstrings/medyan.randompoint-83e939bdee528294.html",
    "href": "docstrings/medyan.randompoint-83e939bdee528294.html",
    "title": "MEDYAN.randompoint",
    "section": "",
    "text": "randompoint(grid::CubicGrid,cid)::SVector{3,Float64}\nReturn a random point in a voxel Note, due to floating point rounding, there is a small chance the returned point may be in a nearby voxel.\n\n\n\n\n\n\n\n\n\n\n\n\nrandompoint(grid::CubicGrid)::SVector{3,Float64}\nReturn a random point in the grid"
  },
  {
    "objectID": "docstrings/medyan.randompoint-83e939bdee528294.html#tuple-medyan.cubicgrid--any--1be3c03f7960c1a3",
    "href": "docstrings/medyan.randompoint-83e939bdee528294.html#tuple-medyan.cubicgrid--any--1be3c03f7960c1a3",
    "title": "MEDYAN.randompoint",
    "section": "",
    "text": "randompoint(grid::CubicGrid,cid)::SVector{3,Float64}\nReturn a random point in a voxel Note, due to floating point rounding, there is a small chance the returned point may be in a nearby voxel."
  },
  {
    "objectID": "docstrings/medyan.randompoint-83e939bdee528294.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "href": "docstrings/medyan.randompoint-83e939bdee528294.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "title": "MEDYAN.randompoint",
    "section": "",
    "text": "randompoint(grid::CubicGrid)::SVector{3,Float64}\nReturn a random point in the grid"
  },
  {
    "objectID": "docstrings/medyan.get_reaction_enabled-95b8e03d3766db53.html",
    "href": "docstrings/medyan.get_reaction_enabled-95b8e03d3766db53.html",
    "title": "MEDYAN.get_reaction_enabled",
    "section": "",
    "text": "get_reaction_enabled(c::Context, link::Link, [d::LinkData])\nReturn the reaction_enabled flags of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.get_reaction_enabled-95b8e03d3766db53.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--any---03b671600f22589f",
    "href": "docstrings/medyan.get_reaction_enabled-95b8e03d3766db53.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--any---03b671600f22589f",
    "title": "MEDYAN.get_reaction_enabled",
    "section": "",
    "text": "get_reaction_enabled(c::Context, link::Link, [d::LinkData])\nReturn the reaction_enabled flags of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.link_exists-0f95437072169f8d.html",
    "href": "docstrings/medyan.link_exists-0f95437072169f8d.html",
    "title": "MEDYAN.link_exists",
    "section": "",
    "text": "link_exists(c::Context, link::Link)::Bool\nReturn true iff link exists in context c. Otherwise return false."
  },
  {
    "objectID": "docstrings/medyan.link_exists-0f95437072169f8d.html#tuple-medyan.context--medyan.link--d37b229d2ebf6962",
    "href": "docstrings/medyan.link_exists-0f95437072169f8d.html#tuple-medyan.context--medyan.link--d37b229d2ebf6962",
    "title": "MEDYAN.link_exists",
    "section": "",
    "text": "link_exists(c::Context, link::Link)::Bool\nReturn true iff link exists in context c. Otherwise return false."
  },
  {
    "objectID": "docstrings/base.iterate-5228367cd62c0bf2.html",
    "href": "docstrings/base.iterate-5228367cd62c0bf2.html",
    "title": "Base.iterate",
    "section": "",
    "text": "Iterates through valid IDs in the StableIndex."
  },
  {
    "objectID": "docstrings/base.iterate-5228367cd62c0bf2.html#tuple-medyan.stableindex--namedtuple--21f3937ad430e895",
    "href": "docstrings/base.iterate-5228367cd62c0bf2.html#tuple-medyan.stableindex--namedtuple--21f3937ad430e895",
    "title": "Base.iterate",
    "section": "",
    "text": "Iterates through valid IDs in the StableIndex."
  },
  {
    "objectID": "docstrings/medyan.cubicgrid-fe4b7cc2dceb0431.html",
    "href": "docstrings/medyan.cubicgrid-fe4b7cc2dceb0431.html",
    "title": "MEDYAN.CubicGrid",
    "section": "",
    "text": "CubicGrid(num_voxels::SVector{3,Int}, compartmentsize::Float64)\n\nn::StaticArraysCore.SVector{3, Int64}\ncompartmentsize::Float64"
  },
  {
    "objectID": "docstrings/medyan.cubicgrid-fe4b7cc2dceb0431.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.cubicgrid-fe4b7cc2dceb0431.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.CubicGrid",
    "section": "",
    "text": "CubicGrid(num_voxels::SVector{3,Int}, compartmentsize::Float64)\n\nn::StaticArraysCore.SVector{3, Int64}\ncompartmentsize::Float64"
  },
  {
    "objectID": "docstrings/medyan.num_fila_types-1698969c2a51ad88.html",
    "href": "docstrings/medyan.num_fila_types-1698969c2a51ad88.html",
    "title": "MEDYAN.num_fila_types",
    "section": "",
    "text": "num_fila_types(c::MEDYAN.Context) -&gt; Int64\nReturn the number of filament types."
  },
  {
    "objectID": "docstrings/medyan.num_fila_types-1698969c2a51ad88.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.num_fila_types-1698969c2a51ad88.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.num_fila_types",
    "section": "",
    "text": "num_fila_types(c::MEDYAN.Context) -&gt; Int64\nReturn the number of filament types."
  },
  {
    "objectID": "docstrings/medyan.adddiffusingcount_rand--9d3ddfabbceeef92.html",
    "href": "docstrings/medyan.adddiffusingcount_rand--9d3ddfabbceeef92.html",
    "title": "MEDYAN.adddiffusingcount_rand!",
    "section": "",
    "text": "adddiffusingcount_rand!(c::Context, dsid, inccount)\nDistribute the added diffusing species count randomly to compartments weighted by volume.\n\ndsid: diffusing species id.\ninccount: amount to add."
  },
  {
    "objectID": "docstrings/medyan.adddiffusingcount_rand--9d3ddfabbceeef92.html#tuple-medyan.context--any--any--0ecbb5ec6f703ddd",
    "href": "docstrings/medyan.adddiffusingcount_rand--9d3ddfabbceeef92.html#tuple-medyan.context--any--any--0ecbb5ec6f703ddd",
    "title": "MEDYAN.adddiffusingcount_rand!",
    "section": "",
    "text": "adddiffusingcount_rand!(c::Context, dsid, inccount)\nDistribute the added diffusing species count randomly to compartments weighted by volume.\n\ndsid: diffusing species id.\ninccount: amount to add."
  },
  {
    "objectID": "docstrings/medyan.add_decimated_2mon_site--ad56e7ee56067940.html",
    "href": "docstrings/medyan.add_decimated_2mon_site--ad56e7ee56067940.html",
    "title": "MEDYAN.add_decimated_2mon_site!",
    "section": "",
    "text": "add_decimated_2mon_site!(s::SysDef,decimated_2mon_sitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.add_decimated_2mon_site--ad56e7ee56067940.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "href": "docstrings/medyan.add_decimated_2mon_site--ad56e7ee56067940.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "title": "MEDYAN.add_decimated_2mon_site!",
    "section": "",
    "text": "add_decimated_2mon_site!(s::SysDef,decimated_2mon_sitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.fila_node_positions-f4c5bac0dcb570ff.html",
    "href": "docstrings/medyan.fila_node_positions-f4c5bac0dcb570ff.html",
    "title": "MEDYAN.fila_node_positions",
    "section": "",
    "text": "fila_node_positions(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Vector{StaticArraysCore.SVector{3, Float64}}\nReturn the mechanical node positions of the filament."
  },
  {
    "objectID": "docstrings/medyan.fila_node_positions-f4c5bac0dcb570ff.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "href": "docstrings/medyan.fila_node_positions-f4c5bac0dcb570ff.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "title": "MEDYAN.fila_node_positions",
    "section": "",
    "text": "fila_node_positions(\n    c::MEDYAN.Context,\n    f::MEDYAN.FilaIdx\n) -&gt; Vector{StaticArraysCore.SVector{3, Float64}}\nReturn the mechanical node positions of the filament."
  },
  {
    "objectID": "docstrings/medyan.add_membranesitereaction--59d1fe245302e071.html",
    "href": "docstrings/medyan.add_membranesitereaction--59d1fe245302e071.html",
    "title": "MEDYAN.add_membranesitereaction!",
    "section": "",
    "text": "Add a membrane site with the corresponding reaction with callback.\nKeyword arguments:\n\ns: SysDef.\nname_newmembranesite: Symbol.\nmembranediffusingreactants: Vector of symbols as membrane reactants. 0 or 1 reactant is currently supported.\nmembranediffusingproducts: Vector of symbols as membrane products.\nreactionexpr_extra: Reaction expression for other species involved.\nrate: Float.\nchangerage_bypotentialenergy: Whether the rate is affected by potential energy.\ninvvolumepower: rate scaling with compartment volume.\n\nNotes:\n\nIf error occurs, this function does not ensure that s is unchanged."
  },
  {
    "objectID": "docstrings/medyan.add_membranesitereaction--59d1fe245302e071.html#tuple---3937a4f1811c9dc1",
    "href": "docstrings/medyan.add_membranesitereaction--59d1fe245302e071.html#tuple---3937a4f1811c9dc1",
    "title": "MEDYAN.add_membranesitereaction!",
    "section": "",
    "text": "Add a membrane site with the corresponding reaction with callback.\nKeyword arguments:\n\ns: SysDef.\nname_newmembranesite: Symbol.\nmembranediffusingreactants: Vector of symbols as membrane reactants. 0 or 1 reactant is currently supported.\nmembranediffusingproducts: Vector of symbols as membrane products.\nreactionexpr_extra: Reaction expression for other species involved.\nrate: Float.\nchangerage_bypotentialenergy: Whether the rate is affected by potential energy.\ninvvolumepower: rate scaling with compartment volume.\n\nNotes:\n\nIf error occurs, this function does not ensure that s is unchanged."
  },
  {
    "objectID": "docstrings/src/links/places.html",
    "href": "docstrings/src/links/places.html",
    "title": "src/links/places.jl",
    "section": "",
    "text": "place_exists(c::Context, p::Place)::Bool\nReturn true iff place p exists in context c. Otherwise return false."
  },
  {
    "objectID": "docstrings/src/links/places.html#medyan.place_exists-fcab2f7674b282f4",
    "href": "docstrings/src/links/places.html#medyan.place_exists-fcab2f7674b282f4",
    "title": "src/links/places.jl",
    "section": "",
    "text": "place_exists(c::Context, p::Place)::Bool\nReturn true iff place p exists in context c. Otherwise return false."
  },
  {
    "objectID": "docstrings/src/links/link-chemistry.html",
    "href": "docstrings/src/links/link-chemistry.html",
    "title": "src/links/link-chemistry.jl",
    "section": "",
    "text": "get_link_mechanics(c::Context, link::Link, [d::LinkData])\nReturn a NamedTuple of (;energy, inputs, forces, torques) of the link. Throw an error if link doesn’t exist. Parts of inputs that do not exist will be set to NaN."
  },
  {
    "objectID": "docstrings/src/links/link-chemistry.html#medyan.get_link_mechanics-57ba2f1a141d0156",
    "href": "docstrings/src/links/link-chemistry.html#medyan.get_link_mechanics-57ba2f1a141d0156",
    "title": "src/links/link-chemistry.jl",
    "section": "",
    "text": "get_link_mechanics(c::Context, link::Link, [d::LinkData])\nReturn a NamedTuple of (;energy, inputs, forces, torques) of the link. Throw an error if link doesn’t exist. Parts of inputs that do not exist will be set to NaN."
  },
  {
    "objectID": "docstrings/src/context.html",
    "href": "docstrings/src/context.html",
    "title": "src/context.jl",
    "section": "",
    "text": "Membrane protein physical parameters.\n\ndiffusion_coeff::Float64: Membrane diffusion coefficients (nm^2/s).\narea::Float64: Protein area projected onto the surface (nm^2).\nkbend::Float64: Bending rigidity (pN nm).\neqcurv::Float64: The protein’s own spontaneous mean curvature (/nm). Can be used in bending energy computations with curvatures.\n\n\n\n\n\n\n\n\n\n\n\n\n\nContext(sys_def::SysDef, grid::CubicGrid; kwargs...)\n\nagent_names::MEDYAN.AgentNames\nsys_def::MEDYAN.SysDef\ncompartments::Vector{MEDYAN.Compartment}\ngrid::Any\ntime::Ref{Float64}: time (s)\nstats::MEDYAN.PerformanceStats\nβ::Float64: inverse kT (1/(nm*pN))\nbase_diffusion_coeffs::Vector{Float64}: Diffusion coefficients indexed by diffusing species id (nm²/s)\nmembrane_species_params::StaticArraysCore.SVector{NUM_MEMBRANEDIFFUSINGSPECIES, MEDYAN.MembraneSpeciesParams} where NUM_MEMBRANEDIFFUSINGSPECIES: Membrane species parameters indexed by membrane diffusing species id.\nmin_compartment_volume_ratio::Float64: Smallest volume a compartment can have before being deactivated as a ratio to a full compartment volume.\nchemistryengine::MEDYAN.RDMESampler: The reaction diffusion master equation sampler, contains the diffusing and regular fixed species state\nchem_cylinders::Vector{MEDYAN.ChemCylinders}: Data about filament cylinders, indexed by filament type id\nmembranes::Vector: All membrane meshes.\nlink_manager::MEDYAN.LinkManager\ndecimated_2mon_site_managers::Vector{MEDYAN.AbstractDecimated2MonSiteManager}: Site managers, indexed by site id\nfilamentsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filament site definitions, indexed by filament type id, filament site id to get a SiteData with fields of id, site, fxsid\nfilamentendsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filamentend site definitions, indexed by filament type id, filamentend site id to get a SiteData with fields of id, site, fxsid\nmaxfilsite_plusrange::Vector{Int64}: The maximum plus range in monomers that any filament site or end site can see. Indexed by filament type id\nmaxfilsite_minusrange::Vector{Int64}: The maximum minus range in monomers that any filament site or end site can see. Indexed by filament type id\nmembranesites::Tuple{Vararg{MEDYAN.SiteData}}: Maps membrane site id to a SiteData with fields of id, site, fxsid.\nmap_membranediffusingspeciesindex_membranesiteindices::Tuple{Vararg{Vector{Int64}}}: Maps membrane diffusing species index to a list of membrane sites using this species as reactant. This is initialized during context init and should not be changed.\ndecimated_2mon_sites::Vector{MEDYAN.SiteData}: Site definitions, indexed by site id to get a SiteData with fields of id, site, fxsid\npossiblecadherinsite_managers::Tuple{Vararg{MEDYAN.AbstractPossibleCadherinSiteManager}}: Site managers, indexed by site id\ncheck_sitecount_error::Bool: If true site counts are checked for errors on every chem update. This is extremely slow, but useful for testing chem update errors.\ncompartmentreactioncallbacks::Any\nbulkreactioncallbacks::Any\nmemdiff_bulks_index::Int64: Mock bulk species index for membrane diffusion.\nviscosity::Float64: viscosity (pNs/nm² or MPas) water is about 1E-9\ng_tol::Float64: maximum force magnitude after minimization (pN)\nnforce_fractbit::Int64: number of fractional bits used to scale force values into Int64\nnenergy_fractbit::Int64: number of fractional bits used to scale energy values into Int64\nshake_before_minimization::Bool: If true, add noise to coordinates before starting minimization.\niter_max_cg_minimization::Int64: Max number of steps in conjugate gradient minimization.\nmaxstep::Float64: max step to take during line search (nm)\nmax_cylinder_force::Float64: max cylinder force when two cylinders are at zero distance (pN)\ncheck_neighborlist_error::Bool: If true neighborlists are checked for errors on every force calc. This is extremely slow, but useful for testing neighborlist errors.\nnthreads::Int64: Experimental Set to more than 1 to enable multi threading. This is currently may result in non bitwise reproducable simulations. Results should be statistcally identical, but this is currently not well tested.\nenable_cylinder_volume_exclusion::Ref{Bool}: Are cylinder volume exclusion forces calculated\nenable_triangle_bead_volume_exclusion::Bool: Are triangle-bead volume exclusion forces calculated.\ncylinder_skin_radius::Float64: Extra cell list cutoff radius in nm. The cell lists are reset after a bead moves over this amount\nfilamentmechparams::Vector{MEDYAN.FilamentMechParams}: The filament mechanical parameters, indexed by filament type id\nmembranemechparams::Vector{MEDYAN.MembraneMechParams}: Membrane mechanical parameters, indexed by membrane type id.\nfunc_membranespeciespotentialenergy::Any: Membrane species potential energy function. See docs on default function for more info.\nmembranefilamentmechparams::MEDYAN.MembraneFilamentMechParams: Membrane-filament mechanical interaction parameters.\nexternal_energy_forces!::Any: External energy/force expressions. This should be a mutating function taking a (fc::MEDYAN.ForceContext), which adds to fc.forces, fc.energies, and fc.energy. The energy and force must be consistent, and this is not checked. This can be used as ad-hoc solutions to experiment with uncommon forces, such as specifically designed attachments, etc. If this variable is used often, consider moving it into MEDYAN.\nchemboundary::MEDYAN.Boundary: chemical boundary, updates compartment volumes and diffusion rates\nmeshindex_as_chemboundary::Ref{Int64}: The membrane index used as chemical boundary. If values other than 0 is used, the actual interior region of the chemical boundary is the intersection between\n\nthe interior of chemboundary, and\nthe interior of the membrane mesh at this index.\n\nNote: Since the membrane may change its shape often, set_chemboundary! might need to be called often accordingly to update volumes of compartments.\nmechboundary::MEDYAN.Boundary: mechanical boundary\nsharedtypedconfigs::MEDYAN.SharedTypedConfigs: Shared configurations stored in type parameters.\nvalidflags::MEDYAN.ValidFlags: Interval system consistency validation flags.\n\n\n\n\n\n\n\n\n\n\n\n\n\nset_time!(c::MEDYAN.Context, x::Float64) -&gt; Float64\nTime (s)\n\n\n\n\n\n\n\n\n\n\n\n\nset_enable_cylinder_volume_exclusion!(\n    c::MEDYAN.Context,\n    x::Bool\n) -&gt; Bool\nAre cylinder volume exclusion forces calculated.\n\n\n\n\n\n\n\n\n\n\n\n\nset_chemboundary!(\n    c::MEDYAN.Context;\n    meshindex_as_chemboundary,\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSet chemical boundary and update compartment volumes and diffusion rates. Note, the chemboundary should be outside the mechboundary so that it is rare for filaments to go outside the chemboundary.\nCalling this will invalidate the chem cache.\nSee also Boundary\n\n\n\nplanes::Vector{SVector{4,Float64}} = []\n\nPlanes that make up the chemical boundary of the simulation\ninside = signbit(pos ⋅ planes[bi][1:3] - planes[bi][4])\nFor example, a plane [1,0,0,3] is inside if x &lt; 3 nm.\n2.0*[1,0,0,3] is also inside if x &lt; 3 nm.\n\ncapsules::Vector{SVector{8,Float64}} = []\n\nCapsules that make up the chemical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is ignored.\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\n\nmeshindex_as_chemboundary::Int = 0: Index of membrane mesh that further restricts the chem boundary. 0 for none.\n\nThe system geometry information must be up-to-date. This mesh index is not stored in the boundary object, but is directly set in the context.\n\n\n\n\n\n\n\n\n\n\n\n\n\nset_mechboundary!(\n    c::MEDYAN.Context;\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSee also Boundary\n\n\n\n\n\n\n\n\n\n\n\n\nchem_adddiffusingcount!(c::Context, sid, cid, inccount)\nAdd inccount to diffusing species id sid in compartment id cid\n\n\n\n\n\n\n\n\n\n\n\n\nadd_diffusing_count!(c::Context; species, chem_voxel, inccount)\nAdd inccount to diffusing species id sid in chem_voxel\n\n\n\n\n\n\n\n\n\n\n\n\nchem_addfixedcount!(c::Context, sid, cid, inccount)\nAdd inccount to fixed species id sid in compartment id cid\n\n\n\n\n\n\n\n\n\n\n\n\nadddiffusingcount_rand!(c::Context, dsid, inccount)\nDistribute the added diffusing species count randomly to compartments weighted by volume.\n\ndsid: diffusing species id.\ninccount: amount to add.\n\n\n\n\n\n\n\n\n\n\n\n\n\naddmembranediffusingcount_rand!(\n    c::MEDYAN.Context,\n    membraneindex::Int64,\n    speciesindex::Int64,\n    addcount::Int64\n)\nDistribute the added membrane species count randomly to membrane cells, ignoring cell area difference. Does NOT update propensity.\n\n\n\n\n\n\n\n\n\n\n\n\nrun_chemistry!(c::Context, Δt)\nRun chemistry for Δt time.\nUpdate c.time.\n\n\n\n\n\n\n\n\n\n\n\n\ndefer_chem_caching!(c::Context)::Nothing\nThis should only be used for advanced optimizations.\nDuring chemistry, the context mutating functions will typically try to avoid invalidating various cached data needed to quickly sample sites.\nHowever, if you want to mutate the context outside of chemistry, for example right before or after minimization, you may not want to pay the cost of revalidating all the caches because minimization will already invalidate the caches. Caching will be enabled again and caches will be made valid the next time chemistry is run. Caching can also be manually refreshed and reenabled with: refresh_chem_cache!\n\n\n\n\n\n\n\n\n\n\n\n\nrefresh_chem_cache!(c::Context)::Nothing\nNormally this isn’t needed as it will happen automatically.\n\n\n\n\n\n\n\n\n\n\n\n\nis_chem_cache_valid(c::Context)::Bool\nReturn true if the chemistry cache is valid, false otherwise.\n\n\n\n\n\n\n\n\n\n\n\n\nempty!(c::Context)\nRemove all filaments, membranes, links, diffusing species, fixed species, bulk species, chemboundary, and mechboundary.\n\n\n\n\n\n\n\n\n\n\n\n\nnewmembrane!(c::MEDYAN.Context; type, meshinit)\nAdd a new membrane to the system.\n\n\n\nmeshinit is structure containing mesh shape initialization information, such as a named tuple (vertlist, trilist) containing vertex coordinates and triangle list, MeshInitEllipsoid, MeshInitPlane or a general MeshInitSurfaceFunc."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.membranespeciesparams-548fecb643fc2599",
    "href": "docstrings/src/context.html#medyan.membranespeciesparams-548fecb643fc2599",
    "title": "src/context.jl",
    "section": "",
    "text": "Membrane protein physical parameters.\n\ndiffusion_coeff::Float64: Membrane diffusion coefficients (nm^2/s).\narea::Float64: Protein area projected onto the surface (nm^2).\nkbend::Float64: Bending rigidity (pN nm).\neqcurv::Float64: The protein’s own spontaneous mean curvature (/nm). Can be used in bending energy computations with curvatures."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.context-736368ed32b08894",
    "href": "docstrings/src/context.html#medyan.context-736368ed32b08894",
    "title": "src/context.jl",
    "section": "",
    "text": "Context(sys_def::SysDef, grid::CubicGrid; kwargs...)\n\nagent_names::MEDYAN.AgentNames\nsys_def::MEDYAN.SysDef\ncompartments::Vector{MEDYAN.Compartment}\ngrid::Any\ntime::Ref{Float64}: time (s)\nstats::MEDYAN.PerformanceStats\nβ::Float64: inverse kT (1/(nm*pN))\nbase_diffusion_coeffs::Vector{Float64}: Diffusion coefficients indexed by diffusing species id (nm²/s)\nmembrane_species_params::StaticArraysCore.SVector{NUM_MEMBRANEDIFFUSINGSPECIES, MEDYAN.MembraneSpeciesParams} where NUM_MEMBRANEDIFFUSINGSPECIES: Membrane species parameters indexed by membrane diffusing species id.\nmin_compartment_volume_ratio::Float64: Smallest volume a compartment can have before being deactivated as a ratio to a full compartment volume.\nchemistryengine::MEDYAN.RDMESampler: The reaction diffusion master equation sampler, contains the diffusing and regular fixed species state\nchem_cylinders::Vector{MEDYAN.ChemCylinders}: Data about filament cylinders, indexed by filament type id\nmembranes::Vector: All membrane meshes.\nlink_manager::MEDYAN.LinkManager\ndecimated_2mon_site_managers::Vector{MEDYAN.AbstractDecimated2MonSiteManager}: Site managers, indexed by site id\nfilamentsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filament site definitions, indexed by filament type id, filament site id to get a SiteData with fields of id, site, fxsid\nfilamentendsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filamentend site definitions, indexed by filament type id, filamentend site id to get a SiteData with fields of id, site, fxsid\nmaxfilsite_plusrange::Vector{Int64}: The maximum plus range in monomers that any filament site or end site can see. Indexed by filament type id\nmaxfilsite_minusrange::Vector{Int64}: The maximum minus range in monomers that any filament site or end site can see. Indexed by filament type id\nmembranesites::Tuple{Vararg{MEDYAN.SiteData}}: Maps membrane site id to a SiteData with fields of id, site, fxsid.\nmap_membranediffusingspeciesindex_membranesiteindices::Tuple{Vararg{Vector{Int64}}}: Maps membrane diffusing species index to a list of membrane sites using this species as reactant. This is initialized during context init and should not be changed.\ndecimated_2mon_sites::Vector{MEDYAN.SiteData}: Site definitions, indexed by site id to get a SiteData with fields of id, site, fxsid\npossiblecadherinsite_managers::Tuple{Vararg{MEDYAN.AbstractPossibleCadherinSiteManager}}: Site managers, indexed by site id\ncheck_sitecount_error::Bool: If true site counts are checked for errors on every chem update. This is extremely slow, but useful for testing chem update errors.\ncompartmentreactioncallbacks::Any\nbulkreactioncallbacks::Any\nmemdiff_bulks_index::Int64: Mock bulk species index for membrane diffusion.\nviscosity::Float64: viscosity (pNs/nm² or MPas) water is about 1E-9\ng_tol::Float64: maximum force magnitude after minimization (pN)\nnforce_fractbit::Int64: number of fractional bits used to scale force values into Int64\nnenergy_fractbit::Int64: number of fractional bits used to scale energy values into Int64\nshake_before_minimization::Bool: If true, add noise to coordinates before starting minimization.\niter_max_cg_minimization::Int64: Max number of steps in conjugate gradient minimization.\nmaxstep::Float64: max step to take during line search (nm)\nmax_cylinder_force::Float64: max cylinder force when two cylinders are at zero distance (pN)\ncheck_neighborlist_error::Bool: If true neighborlists are checked for errors on every force calc. This is extremely slow, but useful for testing neighborlist errors.\nnthreads::Int64: Experimental Set to more than 1 to enable multi threading. This is currently may result in non bitwise reproducable simulations. Results should be statistcally identical, but this is currently not well tested.\nenable_cylinder_volume_exclusion::Ref{Bool}: Are cylinder volume exclusion forces calculated\nenable_triangle_bead_volume_exclusion::Bool: Are triangle-bead volume exclusion forces calculated.\ncylinder_skin_radius::Float64: Extra cell list cutoff radius in nm. The cell lists are reset after a bead moves over this amount\nfilamentmechparams::Vector{MEDYAN.FilamentMechParams}: The filament mechanical parameters, indexed by filament type id\nmembranemechparams::Vector{MEDYAN.MembraneMechParams}: Membrane mechanical parameters, indexed by membrane type id.\nfunc_membranespeciespotentialenergy::Any: Membrane species potential energy function. See docs on default function for more info.\nmembranefilamentmechparams::MEDYAN.MembraneFilamentMechParams: Membrane-filament mechanical interaction parameters.\nexternal_energy_forces!::Any: External energy/force expressions. This should be a mutating function taking a (fc::MEDYAN.ForceContext), which adds to fc.forces, fc.energies, and fc.energy. The energy and force must be consistent, and this is not checked. This can be used as ad-hoc solutions to experiment with uncommon forces, such as specifically designed attachments, etc. If this variable is used often, consider moving it into MEDYAN.\nchemboundary::MEDYAN.Boundary: chemical boundary, updates compartment volumes and diffusion rates\nmeshindex_as_chemboundary::Ref{Int64}: The membrane index used as chemical boundary. If values other than 0 is used, the actual interior region of the chemical boundary is the intersection between\n\nthe interior of chemboundary, and\nthe interior of the membrane mesh at this index.\n\nNote: Since the membrane may change its shape often, set_chemboundary! might need to be called often accordingly to update volumes of compartments.\nmechboundary::MEDYAN.Boundary: mechanical boundary\nsharedtypedconfigs::MEDYAN.SharedTypedConfigs: Shared configurations stored in type parameters.\nvalidflags::MEDYAN.ValidFlags: Interval system consistency validation flags."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.set_time--a6dd8f73f68a3759",
    "href": "docstrings/src/context.html#medyan.set_time--a6dd8f73f68a3759",
    "title": "src/context.jl",
    "section": "",
    "text": "set_time!(c::MEDYAN.Context, x::Float64) -&gt; Float64\nTime (s)"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.set_enable_cylinder_volume_exclusion--38c20ab68ab8bf1a",
    "href": "docstrings/src/context.html#medyan.set_enable_cylinder_volume_exclusion--38c20ab68ab8bf1a",
    "title": "src/context.jl",
    "section": "",
    "text": "set_enable_cylinder_volume_exclusion!(\n    c::MEDYAN.Context,\n    x::Bool\n) -&gt; Bool\nAre cylinder volume exclusion forces calculated."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.set_chemboundary--0aa6e4e95c60f9f7",
    "href": "docstrings/src/context.html#medyan.set_chemboundary--0aa6e4e95c60f9f7",
    "title": "src/context.jl",
    "section": "",
    "text": "set_chemboundary!(\n    c::MEDYAN.Context;\n    meshindex_as_chemboundary,\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSet chemical boundary and update compartment volumes and diffusion rates. Note, the chemboundary should be outside the mechboundary so that it is rare for filaments to go outside the chemboundary.\nCalling this will invalidate the chem cache.\nSee also Boundary\n\n\n\nplanes::Vector{SVector{4,Float64}} = []\n\nPlanes that make up the chemical boundary of the simulation\ninside = signbit(pos ⋅ planes[bi][1:3] - planes[bi][4])\nFor example, a plane [1,0,0,3] is inside if x &lt; 3 nm.\n2.0*[1,0,0,3] is also inside if x &lt; 3 nm.\n\ncapsules::Vector{SVector{8,Float64}} = []\n\nCapsules that make up the chemical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is ignored.\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\n\nmeshindex_as_chemboundary::Int = 0: Index of membrane mesh that further restricts the chem boundary. 0 for none.\n\nThe system geometry information must be up-to-date. This mesh index is not stored in the boundary object, but is directly set in the context."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.set_mechboundary--b5e26b6b690256aa",
    "href": "docstrings/src/context.html#medyan.set_mechboundary--b5e26b6b690256aa",
    "title": "src/context.jl",
    "section": "",
    "text": "set_mechboundary!(\n    c::MEDYAN.Context;\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSee also Boundary"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.chem_adddiffusingcount--2264be341b81a600",
    "href": "docstrings/src/context.html#medyan.chem_adddiffusingcount--2264be341b81a600",
    "title": "src/context.jl",
    "section": "",
    "text": "chem_adddiffusingcount!(c::Context, sid, cid, inccount)\nAdd inccount to diffusing species id sid in compartment id cid"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.add_diffusing_count--78fc5fd22c94a7fa",
    "href": "docstrings/src/context.html#medyan.add_diffusing_count--78fc5fd22c94a7fa",
    "title": "src/context.jl",
    "section": "",
    "text": "add_diffusing_count!(c::Context; species, chem_voxel, inccount)\nAdd inccount to diffusing species id sid in chem_voxel"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.chem_addfixedcount--0286edfebf8ea5e6",
    "href": "docstrings/src/context.html#medyan.chem_addfixedcount--0286edfebf8ea5e6",
    "title": "src/context.jl",
    "section": "",
    "text": "chem_addfixedcount!(c::Context, sid, cid, inccount)\nAdd inccount to fixed species id sid in compartment id cid"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.adddiffusingcount_rand--9d3ddfabbceeef92",
    "href": "docstrings/src/context.html#medyan.adddiffusingcount_rand--9d3ddfabbceeef92",
    "title": "src/context.jl",
    "section": "",
    "text": "adddiffusingcount_rand!(c::Context, dsid, inccount)\nDistribute the added diffusing species count randomly to compartments weighted by volume.\n\ndsid: diffusing species id.\ninccount: amount to add."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.addmembranediffusingcount_rand--7b719dca63a36b1b",
    "href": "docstrings/src/context.html#medyan.addmembranediffusingcount_rand--7b719dca63a36b1b",
    "title": "src/context.jl",
    "section": "",
    "text": "addmembranediffusingcount_rand!(\n    c::MEDYAN.Context,\n    membraneindex::Int64,\n    speciesindex::Int64,\n    addcount::Int64\n)\nDistribute the added membrane species count randomly to membrane cells, ignoring cell area difference. Does NOT update propensity."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.run_chemistry--dda22fac5c555b9e",
    "href": "docstrings/src/context.html#medyan.run_chemistry--dda22fac5c555b9e",
    "title": "src/context.jl",
    "section": "",
    "text": "run_chemistry!(c::Context, Δt)\nRun chemistry for Δt time.\nUpdate c.time."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.defer_chem_caching--9538a1c449f3da93",
    "href": "docstrings/src/context.html#medyan.defer_chem_caching--9538a1c449f3da93",
    "title": "src/context.jl",
    "section": "",
    "text": "defer_chem_caching!(c::Context)::Nothing\nThis should only be used for advanced optimizations.\nDuring chemistry, the context mutating functions will typically try to avoid invalidating various cached data needed to quickly sample sites.\nHowever, if you want to mutate the context outside of chemistry, for example right before or after minimization, you may not want to pay the cost of revalidating all the caches because minimization will already invalidate the caches. Caching will be enabled again and caches will be made valid the next time chemistry is run. Caching can also be manually refreshed and reenabled with: refresh_chem_cache!"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.refresh_chem_cache--f90ebca1f896ad2c",
    "href": "docstrings/src/context.html#medyan.refresh_chem_cache--f90ebca1f896ad2c",
    "title": "src/context.jl",
    "section": "",
    "text": "refresh_chem_cache!(c::Context)::Nothing\nNormally this isn’t needed as it will happen automatically."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.is_chem_cache_valid-8336a8adc58a252f",
    "href": "docstrings/src/context.html#medyan.is_chem_cache_valid-8336a8adc58a252f",
    "title": "src/context.jl",
    "section": "",
    "text": "is_chem_cache_valid(c::Context)::Bool\nReturn true if the chemistry cache is valid, false otherwise."
  },
  {
    "objectID": "docstrings/src/context.html#base.empty--418304748816268d",
    "href": "docstrings/src/context.html#base.empty--418304748816268d",
    "title": "src/context.jl",
    "section": "",
    "text": "empty!(c::Context)\nRemove all filaments, membranes, links, diffusing species, fixed species, bulk species, chemboundary, and mechboundary."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.newmembrane--a714b4a1c87062be",
    "href": "docstrings/src/context.html#medyan.newmembrane--a714b4a1c87062be",
    "title": "src/context.jl",
    "section": "",
    "text": "newmembrane!(c::MEDYAN.Context; type, meshinit)\nAdd a new membrane to the system.\n\n\n\nmeshinit is structure containing mesh shape initialization information, such as a named tuple (vertlist, trilist) containing vertex coordinates and triangle list, MeshInitEllipsoid, MeshInitPlane or a general MeshInitSurfaceFunc."
  },
  {
    "objectID": "docstrings/src/membrane/meshadapt.html",
    "href": "docstrings/src/membrane/meshadapt.html",
    "title": "src/membrane/meshadapt.jl",
    "section": "",
    "text": "Return the number of vertices with state 2. Check the number of vertices with state 2. The number should be constant."
  },
  {
    "objectID": "docstrings/src/membrane/meshadapt.html#medyan.num_vertexwithstate-3cf6fcd964588d37",
    "href": "docstrings/src/membrane/meshadapt.html#medyan.num_vertexwithstate-3cf6fcd964588d37",
    "title": "src/membrane/meshadapt.jl",
    "section": "",
    "text": "Return the number of vertices with state 2. Check the number of vertices with state 2. The number should be constant."
  },
  {
    "objectID": "docstrings/src/sys_def.html",
    "href": "docstrings/src/sys_def.html",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "add_diffusion_coeff!(s::SysDef, diffusing_name::Symbol, diffusing_coeff::Float64)\nAdd the diffusing species to the system with diffusion coefficent in units of (nm²/s). Return s.\n\n\n\n\n\n\n\n\n\n\n\n\nadd_filament_params!(s::SysDef, filament_name::Symbol, filament_params::FilamentMechParams)\nAdd the filament parameters to the system. Return s.\nSee MEDYAN.FilamentMechParams\n\n\n\n\n\n\n\n\n\n\n\n\naddfilamentsite!(s::SysDef,filamenttypename::Symbol,filamentsitename::Symbol,site)\n\n\n\n\n\n\n\n\n\n\n\n\naddfilamentendsite!(s::SysDef,filamenttypename::Symbol,filamentendsitename::Symbol,site)::SysDef\n\n\n\n\n\n\n\n\n\n\n\n\nadd_decimated_2mon_site!(s::SysDef,decimated_2mon_sitename::Symbol,site)::SysDef\n\n\n\n\n\n\n\n\n\n\n\n\naddpossiblecadherinsite!(s::SysDef,possiblecadherinsitename::Symbol,site)::SysDef\n\n\n\n\n\n\n\n\n\n\n\n\naddmembranesite!(\n    s::MEDYAN.SysDef,\n    membranesitename::Symbol,\n    site\n) -&gt; MEDYAN.SysDef\nAdd a new site with a specified name. During this process, a new fixed species is created suffixed with “membranesite.”.\n\n\n\n\n\n\n\n\n\n\n\n\naddreaction!(s::SysDef,reaction::CompartmentReaction)::SysDef\n\n\n\n\n\n\n\n\n\naddreaction!(s::SysDef,reactionexpr::AbstractString,rate::Float64,invvolumepower::Int)::SysDef\nAdd a reaction to the system. Return s\nreactionexpr is a string describing the reaction stoichiometry\nreactionexpr is comprised of reactant and product parts seperated by a \"--&gt;\"\nAll whitespace characters are ignored.\nEach side is then split by \"+\" to get the species names.\nRepeated or extra \"+\" are ignored.\nA species name can be prepended by a positive integer to represent multiple copies.\n\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s) rate constants correspond to stochastic rate constants in the sense used by Gillespie (J. Comp. Phys., 1976, 22 (4)).\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\"diffusing.a + diffusing.b --&gt; diffusing.c\"\n\"diffusing.c --&gt; diffusing.a + diffusing.b\"\n\"+ + diffusing.c + --&gt; + diffusing.a + + diffusing.b + +\"\n\" --&gt; diffusing.a + diffusing.b\"\n\"diffusing.a + diffusing.b --&gt; \"\n\"diffusing.a + diffusing.a --&gt; \"\n\"2diffusing.a --&gt; \"\n\"2diffusing.a --&gt; 20diffusing.a\"\n\"diffusing.c + diffusing.b --&gt; diffusing.c + diffusing.b\"\n\"fixedspecies.rate1b --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + 23fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.g --&gt; fixedspecies.rate1b + 23fixedspecies.g\"\n\"fixedspecies.g + fixedspecies.rate1b--&gt; 2fixedspecies.rate1b + 23fixedspecies.g\"\n\"filamentsite.MT.d --&gt; filamentsite.MT.d\"\n\"filamentsite.MT.d + diffusing.a --&gt; filamentsite.MT.d\"\n\"fixedspecies.g --&gt; diffusing.a\"\n\"diffusing.a --&gt; fixedspecies.g\"\n\"filamentsite.actin.pm + diffusing.a --&gt; filamentsite.actin.pm\"\n\n\n\n\n\n\n\n\n\n\n\n\n\naddreactioncallback!(s::SysDef, reaction::CompartmentReaction, callback)::SysDef\naddreactioncallback!(s::SysDef, reactantexpr::AbstractString, rate::Float64, invvolumepower::Int, callback)::SysDef\nLike addreaction! but also adds callback. callback is called when the reaction happens with input of MEDYAN.Context and Int the compartment id where the reaction happened.\nThe reaction should normally have no net stoichiometry because the callback should handle updating species counts. If an AbstractString is passed instead of a CompartmentReaction for the reaction, that string will be parsed to determine the reactants. The net stoichiometry will be zero.\nMEDYAN.errorcheck_addcallback(callback,s::SysDef) can optionally be overloaded to add errorchecking when the callback is added.\n\n\n\n\n\n\n\n\n\nCallback for bulk reactions: Context -&gt; Nothing.\n\n\n\n\n\n\n\n\n\n\n\n\nAdd filament reaction. Return s. Add a filamentsite and reaction with callback to change the monomer state. This can be used for filament aging, filament catalyzed reactions, or simple binding reactions.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentsitename::Symbol: the new name of the filamentsite added. This can be used as a catalyst in other reactions.\nchangedstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the monomer states, the first is the states to match. The second is the new monomer states after the reaction. both should be the same length. Ordered minus end first.\ncenter::Int: Which index of changedstatenames.first is the actual location of the filamentsite. Used for determining what compartment the reaction goes in.\nreactantexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentsite.$(filamenttypename).$(filamentsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. volumefactor only applies to this reaction not any other reaction using filamentsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    filamentnames= [(:filname,[\n                            :a,\n                            :b,\n                            :c,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\naddfilament_reaction!(s, :filname, :ab,\n    [:a]=&gt;[:b], 1,\n    \"--&gt;\", 1.75E-3, 0,\n)\naddfilament_reaction!(s, :filname, :aabc,\n    [:a,:a]=&gt;[:b,:c], 2,\n    \"--&gt;\", 1.75E-3, 0,\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd filament end reaction. Return s. Add a filamentendsite and reaction with callback to change the filaments. This can be used for polymerization, depolymeriation, and changing end state.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentendsitename::Symbol: the new name of the filamentendsite added. This can be used as a catalyst in other reactions.\nisminusend::Bool: true if changing the minus end, false if changing the plus end.\nchangedendstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the end monomer states, the first is the states to match. The second is the new monomer states after the reaction. If the second has more states than the first, new monomers will be added, if the second has less, monomers will be removed. Ordered minus end first.\nspacing::Float64: Space needed at the filament end for this reaction. (nm) ratefactor= exp(-β*spacing*loadforce) where β is 1/kT, loadforce is the external force pushing axially on the end of the filament. and ratefactor affects this reaction propensity and any others using filamentendsitename\nreactionexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentendsite.$(filamenttypename).$(filamentendsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the voxel in nm³. volumefactor only applies to this reaction not any other reaction using filamentendsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    diffusingspeciesnames= [:a,],\n    filamentnames= [(:filname,[\n                            :plus,\n                            :mid,\n                            :minus,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\nmonomerspacing= 2.7\n#minus end polymerization\naddfilamentend_reaction!(s, :filname, :pm, true,\n    [:minus]=&gt;[:minus,:mid], monomerspacing,\n    \"diffusing.a --&gt;\", 10E3, 1,\n)\n#plus end depolymerization\naddfilamentend_reaction!(s, :filname, :dpp, false,\n    [:mid,:plus]=&gt;[:plus], 0.0,\n    \"--&gt; diffusing.a\", 1.75E-3, 0,\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a membrane site with the corresponding reaction with callback.\nKeyword arguments:\n\ns: SysDef.\nname_newmembranesite: Symbol.\nmembranediffusingreactants: Vector of symbols as membrane reactants. 0 or 1 reactant is currently supported.\nmembranediffusingproducts: Vector of symbols as membrane products.\nreactionexpr_extra: Reaction expression for other species involved.\nrate: Float.\nchangerage_bypotentialenergy: Whether the rate is affected by potential energy.\ninvvolumepower: rate scaling with compartment volume.\n\nNotes:\n\nIf error occurs, this function does not ensure that s is unchanged."
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.add_diffusion_coeff--a77d1ef833cfdedd",
    "href": "docstrings/src/sys_def.html#medyan.add_diffusion_coeff--a77d1ef833cfdedd",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "add_diffusion_coeff!(s::SysDef, diffusing_name::Symbol, diffusing_coeff::Float64)\nAdd the diffusing species to the system with diffusion coefficent in units of (nm²/s). Return s."
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.add_filament_params--74c7d0081157ca31",
    "href": "docstrings/src/sys_def.html#medyan.add_filament_params--74c7d0081157ca31",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "add_filament_params!(s::SysDef, filament_name::Symbol, filament_params::FilamentMechParams)\nAdd the filament parameters to the system. Return s.\nSee MEDYAN.FilamentMechParams"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addfilamentsite--eb6bfd871a21b6f4",
    "href": "docstrings/src/sys_def.html#medyan.addfilamentsite--eb6bfd871a21b6f4",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addfilamentsite!(s::SysDef,filamenttypename::Symbol,filamentsitename::Symbol,site)"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addfilamentendsite--95612d72d1fda05f",
    "href": "docstrings/src/sys_def.html#medyan.addfilamentendsite--95612d72d1fda05f",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addfilamentendsite!(s::SysDef,filamenttypename::Symbol,filamentendsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.add_decimated_2mon_site--ad56e7ee56067940",
    "href": "docstrings/src/sys_def.html#medyan.add_decimated_2mon_site--ad56e7ee56067940",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "add_decimated_2mon_site!(s::SysDef,decimated_2mon_sitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addpossiblecadherinsite--ae8586daa0b5454a",
    "href": "docstrings/src/sys_def.html#medyan.addpossiblecadherinsite--ae8586daa0b5454a",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addpossiblecadherinsite!(s::SysDef,possiblecadherinsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addmembranesite--892875b2c079002d",
    "href": "docstrings/src/sys_def.html#medyan.addmembranesite--892875b2c079002d",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addmembranesite!(\n    s::MEDYAN.SysDef,\n    membranesitename::Symbol,\n    site\n) -&gt; MEDYAN.SysDef\nAdd a new site with a specified name. During this process, a new fixed species is created suffixed with “membranesite.”."
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addreaction--da9bd35e7d1df7c3",
    "href": "docstrings/src/sys_def.html#medyan.addreaction--da9bd35e7d1df7c3",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addreaction!(s::SysDef,reaction::CompartmentReaction)::SysDef\n\n\n\n\n\n\n\n\n\naddreaction!(s::SysDef,reactionexpr::AbstractString,rate::Float64,invvolumepower::Int)::SysDef\nAdd a reaction to the system. Return s\nreactionexpr is a string describing the reaction stoichiometry\nreactionexpr is comprised of reactant and product parts seperated by a \"--&gt;\"\nAll whitespace characters are ignored.\nEach side is then split by \"+\" to get the species names.\nRepeated or extra \"+\" are ignored.\nA species name can be prepended by a positive integer to represent multiple copies.\n\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s) rate constants correspond to stochastic rate constants in the sense used by Gillespie (J. Comp. Phys., 1976, 22 (4)).\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\"diffusing.a + diffusing.b --&gt; diffusing.c\"\n\"diffusing.c --&gt; diffusing.a + diffusing.b\"\n\"+ + diffusing.c + --&gt; + diffusing.a + + diffusing.b + +\"\n\" --&gt; diffusing.a + diffusing.b\"\n\"diffusing.a + diffusing.b --&gt; \"\n\"diffusing.a + diffusing.a --&gt; \"\n\"2diffusing.a --&gt; \"\n\"2diffusing.a --&gt; 20diffusing.a\"\n\"diffusing.c + diffusing.b --&gt; diffusing.c + diffusing.b\"\n\"fixedspecies.rate1b --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + 23fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.g --&gt; fixedspecies.rate1b + 23fixedspecies.g\"\n\"fixedspecies.g + fixedspecies.rate1b--&gt; 2fixedspecies.rate1b + 23fixedspecies.g\"\n\"filamentsite.MT.d --&gt; filamentsite.MT.d\"\n\"filamentsite.MT.d + diffusing.a --&gt; filamentsite.MT.d\"\n\"fixedspecies.g --&gt; diffusing.a\"\n\"diffusing.a --&gt; fixedspecies.g\"\n\"filamentsite.actin.pm + diffusing.a --&gt; filamentsite.actin.pm\""
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addreactioncallback--9c9d46adeded2d88",
    "href": "docstrings/src/sys_def.html#medyan.addreactioncallback--9c9d46adeded2d88",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addreactioncallback!(s::SysDef, reaction::CompartmentReaction, callback)::SysDef\naddreactioncallback!(s::SysDef, reactantexpr::AbstractString, rate::Float64, invvolumepower::Int, callback)::SysDef\nLike addreaction! but also adds callback. callback is called when the reaction happens with input of MEDYAN.Context and Int the compartment id where the reaction happened.\nThe reaction should normally have no net stoichiometry because the callback should handle updating species counts. If an AbstractString is passed instead of a CompartmentReaction for the reaction, that string will be parsed to determine the reactants. The net stoichiometry will be zero.\nMEDYAN.errorcheck_addcallback(callback,s::SysDef) can optionally be overloaded to add errorchecking when the callback is added.\n\n\n\n\n\n\n\n\n\nCallback for bulk reactions: Context -&gt; Nothing."
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addfilament_reaction--63195cbff2ab4237",
    "href": "docstrings/src/sys_def.html#medyan.addfilament_reaction--63195cbff2ab4237",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "Add filament reaction. Return s. Add a filamentsite and reaction with callback to change the monomer state. This can be used for filament aging, filament catalyzed reactions, or simple binding reactions.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentsitename::Symbol: the new name of the filamentsite added. This can be used as a catalyst in other reactions.\nchangedstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the monomer states, the first is the states to match. The second is the new monomer states after the reaction. both should be the same length. Ordered minus end first.\ncenter::Int: Which index of changedstatenames.first is the actual location of the filamentsite. Used for determining what compartment the reaction goes in.\nreactantexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentsite.$(filamenttypename).$(filamentsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. volumefactor only applies to this reaction not any other reaction using filamentsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    filamentnames= [(:filname,[\n                            :a,\n                            :b,\n                            :c,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\naddfilament_reaction!(s, :filname, :ab,\n    [:a]=&gt;[:b], 1,\n    \"--&gt;\", 1.75E-3, 0,\n)\naddfilament_reaction!(s, :filname, :aabc,\n    [:a,:a]=&gt;[:b,:c], 2,\n    \"--&gt;\", 1.75E-3, 0,\n)"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addfilamentend_reaction--83ec3db37b4e2130",
    "href": "docstrings/src/sys_def.html#medyan.addfilamentend_reaction--83ec3db37b4e2130",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "Add filament end reaction. Return s. Add a filamentendsite and reaction with callback to change the filaments. This can be used for polymerization, depolymeriation, and changing end state.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentendsitename::Symbol: the new name of the filamentendsite added. This can be used as a catalyst in other reactions.\nisminusend::Bool: true if changing the minus end, false if changing the plus end.\nchangedendstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the end monomer states, the first is the states to match. The second is the new monomer states after the reaction. If the second has more states than the first, new monomers will be added, if the second has less, monomers will be removed. Ordered minus end first.\nspacing::Float64: Space needed at the filament end for this reaction. (nm) ratefactor= exp(-β*spacing*loadforce) where β is 1/kT, loadforce is the external force pushing axially on the end of the filament. and ratefactor affects this reaction propensity and any others using filamentendsitename\nreactionexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentendsite.$(filamenttypename).$(filamentendsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the voxel in nm³. volumefactor only applies to this reaction not any other reaction using filamentendsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    diffusingspeciesnames= [:a,],\n    filamentnames= [(:filname,[\n                            :plus,\n                            :mid,\n                            :minus,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\nmonomerspacing= 2.7\n#minus end polymerization\naddfilamentend_reaction!(s, :filname, :pm, true,\n    [:minus]=&gt;[:minus,:mid], monomerspacing,\n    \"diffusing.a --&gt;\", 10E3, 1,\n)\n#plus end depolymerization\naddfilamentend_reaction!(s, :filname, :dpp, false,\n    [:mid,:plus]=&gt;[:plus], 0.0,\n    \"--&gt; diffusing.a\", 1.75E-3, 0,\n)"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.add_membranesitereaction--59d1fe245302e071",
    "href": "docstrings/src/sys_def.html#medyan.add_membranesitereaction--59d1fe245302e071",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "Add a membrane site with the corresponding reaction with callback.\nKeyword arguments:\n\ns: SysDef.\nname_newmembranesite: Symbol.\nmembranediffusingreactants: Vector of symbols as membrane reactants. 0 or 1 reactant is currently supported.\nmembranediffusingproducts: Vector of symbols as membrane products.\nreactionexpr_extra: Reaction expression for other species involved.\nrate: Float.\nchangerage_bypotentialenergy: Whether the rate is affected by potential energy.\ninvvolumepower: rate scaling with compartment volume.\n\nNotes:\n\nIf error occurs, this function does not ensure that s is unchanged."
  },
  {
    "objectID": "docstrings/src/trajectory-io/snapshot.html",
    "href": "docstrings/src/trajectory-io/snapshot.html",
    "title": "src/trajectory-io/snapshot.jl",
    "section": "",
    "text": "load_snapshot!(c::Context,group::ZGroup)\nEmpty the context and load the state saved in the snapshot group.\nc should be constructed with the same SysDef and parameters as the Context used to create the snapshot. Trying to load a snapshot into a Context constructed with a different system or parameters may lead to unexpected results.\nSee Snapshot group for more details."
  },
  {
    "objectID": "docstrings/src/trajectory-io/snapshot.html#medyan.load_snapshot--e534be293ce74465",
    "href": "docstrings/src/trajectory-io/snapshot.html#medyan.load_snapshot--e534be293ce74465",
    "title": "src/trajectory-io/snapshot.jl",
    "section": "",
    "text": "load_snapshot!(c::Context,group::ZGroup)\nEmpty the context and load the state saved in the snapshot group.\nc should be constructed with the same SysDef and parameters as the Context used to create the snapshot. Trying to load a snapshot into a Context constructed with a different system or parameters may lead to unexpected results.\nSee Snapshot group for more details."
  },
  {
    "objectID": "docstrings/src/filament/sites.html",
    "href": "docstrings/src/filament/sites.html",
    "title": "src/filament/sites.jl",
    "section": "",
    "text": "General filament site just matches monomer states\n\ncenter::Int64: index of center monomer in states\nstates::Vector{UInt8}: monomer states to match"
  },
  {
    "objectID": "docstrings/src/filament/sites.html#medyan.filamentsitegeneral-0d87ce44fed17b2c",
    "href": "docstrings/src/filament/sites.html#medyan.filamentsitegeneral-0d87ce44fed17b2c",
    "title": "src/filament/sites.jl",
    "section": "",
    "text": "General filament site just matches monomer states\n\ncenter::Int64: index of center monomer in states\nstates::Vector{UInt8}: monomer states to match"
  },
  {
    "objectID": "docstrings/src/filament/update_fila_mono_state.html",
    "href": "docstrings/src/filament/update_fila_mono_state.html",
    "title": "src/filament/update_fila_mono_state.jl",
    "section": "",
    "text": "update_fila_mono_state!(c::Context, p::FilaMonoIdx, state::Union{Symbol,MonomerState})\nUpdate a monomer state."
  },
  {
    "objectID": "docstrings/src/filament/update_fila_mono_state.html#medyan.update_fila_mono_state--02d30b25ab495f22",
    "href": "docstrings/src/filament/update_fila_mono_state.html#medyan.update_fila_mono_state--02d30b25ab495f22",
    "title": "src/filament/update_fila_mono_state.jl",
    "section": "",
    "text": "update_fila_mono_state!(c::Context, p::FilaMonoIdx, state::Union{Symbol,MonomerState})\nUpdate a monomer state."
  },
  {
    "objectID": "docstrings/src/filament/polymerize_fila.html",
    "href": "docstrings/src/filament/polymerize_fila.html",
    "title": "src/filament/polymerize_fila.jl",
    "section": "",
    "text": "polymerize_fila!(c::Context, fila_tip_idx::FilaTipIdx, newstate::Union{Symbol,MonomerState})\nAdd a monomer with state newstate to the end of the filament.\nThis doesn’t affect the other monomer states, positions, or change any of the monomer ids. New monomers are not linkable until after minimization."
  },
  {
    "objectID": "docstrings/src/filament/polymerize_fila.html#medyan.polymerize_fila--ef96193868627e48",
    "href": "docstrings/src/filament/polymerize_fila.html#medyan.polymerize_fila--ef96193868627e48",
    "title": "src/filament/polymerize_fila.jl",
    "section": "",
    "text": "polymerize_fila!(c::Context, fila_tip_idx::FilaTipIdx, newstate::Union{Symbol,MonomerState})\nAdd a monomer with state newstate to the end of the filament.\nThis doesn’t affect the other monomer states, positions, or change any of the monomer ids. New monomers are not linkable until after minimization."
  },
  {
    "objectID": "docstrings/src/filament/endsites.html",
    "href": "docstrings/src/filament/endsites.html",
    "title": "src/filament/endsites.jl",
    "section": "",
    "text": "Filament end site that matches with a vector of monomer states.\n\nisminusend::Bool\nendstates::Vector{UInt8}\nspacing::Float64\nadded_monomers::Int64"
  },
  {
    "objectID": "docstrings/src/filament/endsites.html#medyan.filamentendsitegeneral-7a32ac96fb4364ea",
    "href": "docstrings/src/filament/endsites.html#medyan.filamentendsitegeneral-7a32ac96fb4364ea",
    "title": "src/filament/endsites.jl",
    "section": "",
    "text": "Filament end site that matches with a vector of monomer states.\n\nisminusend::Bool\nendstates::Vector{UInt8}\nspacing::Float64\nadded_monomers::Int64"
  },
  {
    "objectID": "docstrings/src/filament/make_fila_rand.html",
    "href": "docstrings/src/filament/make_fila_rand.html",
    "title": "src/filament/make_fila_rand.jl",
    "section": "",
    "text": "make_fila_rand!(c::Context, mono_states; iterations = 10^9, type = 1)::Tag{FilaTipIdx}\nAdd a filament to the Context with random center position and direction.\nReturn the tag of the plus tip of the new filament.\nmono_states is a collection of the MonomerState of the monomers in the new filament.\nThe filament will be inside the mech boundary.\nErrors if it fails to add a filament.\nThe monomer are spaced by the value in the filament type’s mechanical parameters.\n\n\n\ntype=1: filament type id or symbol.\niterations = 10^9: number of positions to try before failing with an error."
  },
  {
    "objectID": "docstrings/src/filament/make_fila_rand.html#medyan.make_fila_rand--7c63c7a09ece60c8",
    "href": "docstrings/src/filament/make_fila_rand.html#medyan.make_fila_rand--7c63c7a09ece60c8",
    "title": "src/filament/make_fila_rand.jl",
    "section": "",
    "text": "make_fila_rand!(c::Context, mono_states; iterations = 10^9, type = 1)::Tag{FilaTipIdx}\nAdd a filament to the Context with random center position and direction.\nReturn the tag of the plus tip of the new filament.\nmono_states is a collection of the MonomerState of the monomers in the new filament.\nThe filament will be inside the mech boundary.\nErrors if it fails to add a filament.\nThe monomer are spaced by the value in the filament type’s mechanical parameters.\n\n\n\ntype=1: filament type id or symbol.\niterations = 10^9: number of positions to try before failing with an error."
  },
  {
    "objectID": "docstrings/src/util/math/cuboidslicing.html",
    "href": "docstrings/src/util/math/cuboidslicing.html",
    "title": "src/util/math/cuboidslicing.jl",
    "section": "",
    "text": "scale the volume and area\n\n\n\n\n\n\n\n\n\nscale the volume and area by different amounts in each direction"
  },
  {
    "objectID": "docstrings/src/util/math/cuboidslicing.html#base.---a21e771ed8ea7d6f",
    "href": "docstrings/src/util/math/cuboidslicing.html#base.---a21e771ed8ea7d6f",
    "title": "src/util/math/cuboidslicing.jl",
    "section": "",
    "text": "scale the volume and area\n\n\n\n\n\n\n\n\n\nscale the volume and area by different amounts in each direction"
  },
  {
    "objectID": "docstrings/src/sys_def-types.html",
    "href": "docstrings/src/sys_def-types.html",
    "title": "src/sys_def-types.jl",
    "section": "",
    "text": "The names of the agents in a simulation\n\ndiffusingspeciesnames::Vector{Symbol}\nbulkspeciesnames::Vector{Symbol}\nmembranediffusingspeciesnames::Vector{Symbol}\nfixedspeciesnames::Vector{Symbol}\nfilamentnames::Vector{Tuple{Symbol, Vector{Symbol}}}\nvertexnames::Vector{Symbol}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmembraneindex::Int64: membrane index\nvid::Int64: vertex id\n\n\n\n\n\n\n\n\n\n\n\n\n\nSysDef(agent_names::AgentNames)\nA mutable struct mapping names to id numbers in a simulation\n\nagent_names::MEDYAN.AgentNames\ndiffusing::MEDYAN.PropDictionary\ndiffusing_coeff::MEDYAN.PropDictionary\nbulkspecies_indexmap::MEDYAN.PropDictionary\nmembranediffusing::MEDYAN.PropDictionary\nfixedspecies::MEDYAN.PropDictionary\nfilament::MEDYAN.PropDictionary\nfilament_params::MEDYAN.PropDictionary\nvertex::MEDYAN.PropDictionary\nstate::MEDYAN.PropDictionary\nfilamentsite::MEDYAN.PropDictionary\nfilamentendsite::MEDYAN.PropDictionary\nmembranesite::MEDYAN.PropDictionary: Each membrane site represents the membrane patches in each compartment together with some membrane diffusing species.\ndecimated_2mon_site::MEDYAN.PropDictionary\npossiblecadherinsite::MEDYAN.PropDictionary\nallfixedspeciesnames::Vector{String}\ncompartmentreactions::Vector{MEDYAN.CompartmentReaction}\ncompartmentreactioncallbacks::Vector{Any}\nbulkreactions::Vector{MEDYAN.BulkReaction}\nbulkreactioncallbacks::Vector{Any}: Context -&gt; Nothing\nlink::MEDYAN.PropDictionary\ntotal_num_link_types_places::Int64\nlink_reaction_site::MEDYAN.PropDictionary"
  },
  {
    "objectID": "docstrings/src/sys_def-types.html#medyan.agentnames-948e6a24b4fb0cb5",
    "href": "docstrings/src/sys_def-types.html#medyan.agentnames-948e6a24b4fb0cb5",
    "title": "src/sys_def-types.jl",
    "section": "",
    "text": "The names of the agents in a simulation\n\ndiffusingspeciesnames::Vector{Symbol}\nbulkspeciesnames::Vector{Symbol}\nmembranediffusingspeciesnames::Vector{Symbol}\nfixedspeciesnames::Vector{Symbol}\nfilamentnames::Vector{Tuple{Symbol, Vector{Symbol}}}\nvertexnames::Vector{Symbol}"
  },
  {
    "objectID": "docstrings/src/sys_def-types.html#medyan.vertexname-2d87a6a86cabc4f5",
    "href": "docstrings/src/sys_def-types.html#medyan.vertexname-2d87a6a86cabc4f5",
    "title": "src/sys_def-types.jl",
    "section": "",
    "text": "membraneindex::Int64: membrane index\nvid::Int64: vertex id"
  },
  {
    "objectID": "docstrings/src/sys_def-types.html#medyan.sysdef-c0c4da7a2b3d4fef",
    "href": "docstrings/src/sys_def-types.html#medyan.sysdef-c0c4da7a2b3d4fef",
    "title": "src/sys_def-types.jl",
    "section": "",
    "text": "SysDef(agent_names::AgentNames)\nA mutable struct mapping names to id numbers in a simulation\n\nagent_names::MEDYAN.AgentNames\ndiffusing::MEDYAN.PropDictionary\ndiffusing_coeff::MEDYAN.PropDictionary\nbulkspecies_indexmap::MEDYAN.PropDictionary\nmembranediffusing::MEDYAN.PropDictionary\nfixedspecies::MEDYAN.PropDictionary\nfilament::MEDYAN.PropDictionary\nfilament_params::MEDYAN.PropDictionary\nvertex::MEDYAN.PropDictionary\nstate::MEDYAN.PropDictionary\nfilamentsite::MEDYAN.PropDictionary\nfilamentendsite::MEDYAN.PropDictionary\nmembranesite::MEDYAN.PropDictionary: Each membrane site represents the membrane patches in each compartment together with some membrane diffusing species.\ndecimated_2mon_site::MEDYAN.PropDictionary\npossiblecadherinsite::MEDYAN.PropDictionary\nallfixedspeciesnames::Vector{String}\ncompartmentreactions::Vector{MEDYAN.CompartmentReaction}\ncompartmentreactioncallbacks::Vector{Any}\nbulkreactions::Vector{MEDYAN.BulkReaction}\nbulkreactioncallbacks::Vector{Any}: Context -&gt; Nothing\nlink::MEDYAN.PropDictionary\ntotal_num_link_types_places::Int64\nlink_reaction_site::MEDYAN.PropDictionary"
  },
  {
    "objectID": "docstrings/src/decimated_2mon_sites.html",
    "href": "docstrings/src/decimated_2mon_sites.html",
    "title": "src/decimated_2mon_sites.jl",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64\n\n\n\n\n\n\n\n\n\n\n\n\n\nAny pair within max to min range are linkable if they have matching state with minusstate and plusstate and if both the angles between the filaments and line between the pair are greater than acos(cosminangle) for example if cosminangle is 1, all angles are ok, if cosminangle is sqrt(2)/2, and the line between the pair of monomers is parallel or anti parallel to either filament, it won’t be linkable.\nThis can be used to prevent links from binding both ends to the same filament.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64\ncosminangle::Float64"
  },
  {
    "objectID": "docstrings/src/decimated_2mon_sites.html#medyan.decimated2monsiterange-8afd8f3188bbcd4a",
    "href": "docstrings/src/decimated_2mon_sites.html#medyan.decimated2monsiterange-8afd8f3188bbcd4a",
    "title": "src/decimated_2mon_sites.jl",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64"
  },
  {
    "objectID": "docstrings/src/decimated_2mon_sites.html#medyan.decimated2monsiteminanglerange-fc006e574376cfff",
    "href": "docstrings/src/decimated_2mon_sites.html#medyan.decimated2monsiteminanglerange-fc006e574376cfff",
    "title": "src/decimated_2mon_sites.jl",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate and if both the angles between the filaments and line between the pair are greater than acos(cosminangle) for example if cosminangle is 1, all angles are ok, if cosminangle is sqrt(2)/2, and the line between the pair of monomers is parallel or anti parallel to either filament, it won’t be linkable.\nThis can be used to prevent links from binding both ends to the same filament.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64\ncosminangle::Float64"
  },
  {
    "objectID": "docstrings/medyan.update_fila_mono_state--02d30b25ab495f22.html",
    "href": "docstrings/medyan.update_fila_mono_state--02d30b25ab495f22.html",
    "title": "MEDYAN.update_fila_mono_state!",
    "section": "",
    "text": "update_fila_mono_state!(c::Context, p::FilaMonoIdx, state::Union{Symbol,MonomerState})\nUpdate a monomer state."
  },
  {
    "objectID": "docstrings/medyan.update_fila_mono_state--02d30b25ab495f22.html#tuple-medyan.context--medyan.filamonoidx--union-uint8--symbol---85b1405fc752dbf8",
    "href": "docstrings/medyan.update_fila_mono_state--02d30b25ab495f22.html#tuple-medyan.context--medyan.filamonoidx--union-uint8--symbol---85b1405fc752dbf8",
    "title": "MEDYAN.update_fila_mono_state!",
    "section": "",
    "text": "update_fila_mono_state!(c::Context, p::FilaMonoIdx, state::Union{Symbol,MonomerState})\nUpdate a monomer state."
  },
  {
    "objectID": "docstrings/medyan.tag_exists-c112bb84254d0b58.html",
    "href": "docstrings/medyan.tag_exists-c112bb84254d0b58.html",
    "title": "MEDYAN.tag_exists",
    "section": "",
    "text": "tag_exists(c::Context, t::Tag)::Bool\nReturn true iff tag t exists in context c. Otherwise return false."
  },
  {
    "objectID": "docstrings/medyan.tag_exists-c112bb84254d0b58.html#union-tuple-p---tuple-medyan.context--medyan.tag-p----where-p-f3255fd0d268d21a",
    "href": "docstrings/medyan.tag_exists-c112bb84254d0b58.html#union-tuple-p---tuple-medyan.context--medyan.tag-p----where-p-f3255fd0d268d21a",
    "title": "MEDYAN.tag_exists",
    "section": "",
    "text": "tag_exists(c::Context, t::Tag)::Bool\nReturn true iff tag t exists in context c. Otherwise return false."
  },
  {
    "objectID": "docstrings/medyan.fila_num_unmin_ends-09448ccb823dbeac.html",
    "href": "docstrings/medyan.fila_num_unmin_ends-09448ccb823dbeac.html",
    "title": "MEDYAN.fila_num_unmin_ends",
    "section": "",
    "text": "fila_num_unmin_ends(\n    c::MEDYAN.Context,\n    fila_idx::MEDYAN.FilaIdx\n) -&gt; Pair{Int64, Int64}\nReturn a pair (minus =&gt; plus) of the number of unminimized monomers on the minus and plus end of a filament.\nThis will be reset to (0 =&gt; 0) by minimize_energy!\nWhen an end is depolymerized this will decrease, but saturate at 0. When an end is polymerized this will increase.\nFor example if after minimization a filament has a plus end depolymerization, this function will return (0 =&gt; 0). Then if a plus end polymerization happens, this function will return (0 =&gt; 1), even though the net change in filament length is zero."
  },
  {
    "objectID": "docstrings/medyan.fila_num_unmin_ends-09448ccb823dbeac.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "href": "docstrings/medyan.fila_num_unmin_ends-09448ccb823dbeac.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "title": "MEDYAN.fila_num_unmin_ends",
    "section": "",
    "text": "fila_num_unmin_ends(\n    c::MEDYAN.Context,\n    fila_idx::MEDYAN.FilaIdx\n) -&gt; Pair{Int64, Int64}\nReturn a pair (minus =&gt; plus) of the number of unminimized monomers on the minus and plus end of a filament.\nThis will be reset to (0 =&gt; 0) by minimize_energy!\nWhen an end is depolymerized this will decrease, but saturate at 0. When an end is polymerized this will increase.\nFor example if after minimization a filament has a plus end depolymerization, this function will return (0 =&gt; 0). Then if a plus end polymerization happens, this function will return (0 =&gt; 1), even though the net change in filament length is zero."
  },
  {
    "objectID": "docstrings/medyan.get_state-e99d22cacff37374.html",
    "href": "docstrings/medyan.get_state-e99d22cacff37374.html",
    "title": "MEDYAN.get_state",
    "section": "",
    "text": "get_state(c::Context, link::Link, [d::LinkData])\nReturn the state of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.get_state-e99d22cacff37374.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--any---03b671600f22589f",
    "href": "docstrings/medyan.get_state-e99d22cacff37374.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--any---03b671600f22589f",
    "title": "MEDYAN.get_state",
    "section": "",
    "text": "get_state(c::Context, link::Link, [d::LinkData])\nReturn the state of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.pick_rand_fila_tip_site-d1418d43027273e9.html",
    "href": "docstrings/medyan.pick_rand_fila_tip_site-d1418d43027273e9.html",
    "title": "MEDYAN.pick_rand_fila_tip_site",
    "section": "",
    "text": "pick_rand_fila_tip_site(c::Context, chem_voxel, fila_typeid, fesid)::Union{FilaTipIdx, Nothing}\nReturn a FilaTipIdx of a random filaendsite, or return nothing if rejected weighted by counts, using the default RNG."
  },
  {
    "objectID": "docstrings/medyan.pick_rand_fila_tip_site-d1418d43027273e9.html#tuple-medyan.context--any--any--any--3e36a14adf838425",
    "href": "docstrings/medyan.pick_rand_fila_tip_site-d1418d43027273e9.html#tuple-medyan.context--any--any--any--3e36a14adf838425",
    "title": "MEDYAN.pick_rand_fila_tip_site",
    "section": "",
    "text": "pick_rand_fila_tip_site(c::Context, chem_voxel, fila_typeid, fesid)::Union{FilaTipIdx, Nothing}\nReturn a FilaTipIdx of a random filaendsite, or return nothing if rejected weighted by counts, using the default RNG."
  },
  {
    "objectID": "docstrings/medyan.adapt_membranes--1d26092defd0f4fa.html",
    "href": "docstrings/medyan.adapt_membranes--1d26092defd0f4fa.html",
    "title": "MEDYAN.adapt_membranes!",
    "section": "",
    "text": "Remesh all membrane meshes.\nAlso remove unreferenced MembVertIdx tags."
  },
  {
    "objectID": "docstrings/medyan.adapt_membranes--1d26092defd0f4fa.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.adapt_membranes--1d26092defd0f4fa.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.adapt_membranes!",
    "section": "",
    "text": "Remesh all membrane meshes.\nAlso remove unreferenced MembVertIdx tags."
  },
  {
    "objectID": "docstrings/medyan.decimated2monsiteminanglerange-fc006e574376cfff.html",
    "href": "docstrings/medyan.decimated2monsiteminanglerange-fc006e574376cfff.html",
    "title": "MEDYAN.Decimated2MonSiteMinAngleRange",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate and if both the angles between the filaments and line between the pair are greater than acos(cosminangle) for example if cosminangle is 1, all angles are ok, if cosminangle is sqrt(2)/2, and the line between the pair of monomers is parallel or anti parallel to either filament, it won’t be linkable.\nThis can be used to prevent links from binding both ends to the same filament.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64\ncosminangle::Float64"
  },
  {
    "objectID": "docstrings/medyan.decimated2monsiteminanglerange-fc006e574376cfff.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.decimated2monsiteminanglerange-fc006e574376cfff.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Decimated2MonSiteMinAngleRange",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate and if both the angles between the filaments and line between the pair are greater than acos(cosminangle) for example if cosminangle is 1, all angles are ok, if cosminangle is sqrt(2)/2, and the line between the pair of monomers is parallel or anti parallel to either filament, it won’t be linkable.\nThis can be used to prevent links from binding both ends to the same filament.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64\ncosminangle::Float64"
  },
  {
    "objectID": "docstrings/base.empty--418304748816268d.html",
    "href": "docstrings/base.empty--418304748816268d.html",
    "title": "Base.empty!",
    "section": "",
    "text": "Clear all index records.\n\n\n\n\n\n\n\n\n\n\n\n\nempty!(c::Context)\nRemove all filaments, membranes, links, diffusing species, fixed species, bulk species, chemboundary, and mechboundary."
  },
  {
    "objectID": "docstrings/base.empty--418304748816268d.html#tuple-medyan.stableindex--aec9c239cf42c0b9",
    "href": "docstrings/base.empty--418304748816268d.html#tuple-medyan.stableindex--aec9c239cf42c0b9",
    "title": "Base.empty!",
    "section": "",
    "text": "Clear all index records."
  },
  {
    "objectID": "docstrings/base.empty--418304748816268d.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/base.empty--418304748816268d.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "Base.empty!",
    "section": "",
    "text": "empty!(c::Context)\nRemove all filaments, membranes, links, diffusing species, fixed species, bulk species, chemboundary, and mechboundary."
  },
  {
    "objectID": "docstrings/medyan.get_all_tags-3a8e6bc0634c8a4d.html",
    "href": "docstrings/medyan.get_all_tags-3a8e6bc0634c8a4d.html",
    "title": "MEDYAN.get_all_tags",
    "section": "",
    "text": "get_all_tags(c::Context, p::Place) -&gt; Tag{typeof(p)} iterator\nReturn an iterator of existing tags for the type of p."
  },
  {
    "objectID": "docstrings/medyan.get_all_tags-3a8e6bc0634c8a4d.html#union-tuple-p---tuple-medyan.context--p---where-p--medyan.place-316eaf4f0092762b",
    "href": "docstrings/medyan.get_all_tags-3a8e6bc0634c8a4d.html#union-tuple-p---tuple-medyan.context--p---where-p--medyan.place-316eaf4f0092762b",
    "title": "MEDYAN.get_all_tags",
    "section": "",
    "text": "get_all_tags(c::Context, p::Place) -&gt; Tag{typeof(p)} iterator\nReturn an iterator of existing tags for the type of p."
  },
  {
    "objectID": "docstrings/medyan.addreaction--da9bd35e7d1df7c3.html",
    "href": "docstrings/medyan.addreaction--da9bd35e7d1df7c3.html",
    "title": "MEDYAN.addreaction!",
    "section": "",
    "text": "addreaction!(s::SysDef,reaction::CompartmentReaction)::SysDef\n\n\n\n\n\n\n\n\n\n\n\n\naddreaction!(s::SysDef,reactionexpr::AbstractString,rate::Float64,invvolumepower::Int)::SysDef\nAdd a reaction to the system. Return s\nreactionexpr is a string describing the reaction stoichiometry\nreactionexpr is comprised of reactant and product parts seperated by a \"--&gt;\"\nAll whitespace characters are ignored.\nEach side is then split by \"+\" to get the species names.\nRepeated or extra \"+\" are ignored.\nA species name can be prepended by a positive integer to represent multiple copies.\n\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s) rate constants correspond to stochastic rate constants in the sense used by Gillespie (J. Comp. Phys., 1976, 22 (4)).\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\"diffusing.a + diffusing.b --&gt; diffusing.c\"\n\"diffusing.c --&gt; diffusing.a + diffusing.b\"\n\"+ + diffusing.c + --&gt; + diffusing.a + + diffusing.b + +\"\n\" --&gt; diffusing.a + diffusing.b\"\n\"diffusing.a + diffusing.b --&gt; \"\n\"diffusing.a + diffusing.a --&gt; \"\n\"2diffusing.a --&gt; \"\n\"2diffusing.a --&gt; 20diffusing.a\"\n\"diffusing.c + diffusing.b --&gt; diffusing.c + diffusing.b\"\n\"fixedspecies.rate1b --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + 23fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.g --&gt; fixedspecies.rate1b + 23fixedspecies.g\"\n\"fixedspecies.g + fixedspecies.rate1b--&gt; 2fixedspecies.rate1b + 23fixedspecies.g\"\n\"filamentsite.MT.d --&gt; filamentsite.MT.d\"\n\"filamentsite.MT.d + diffusing.a --&gt; filamentsite.MT.d\"\n\"fixedspecies.g --&gt; diffusing.a\"\n\"diffusing.a --&gt; fixedspecies.g\"\n\"filamentsite.actin.pm + diffusing.a --&gt; filamentsite.actin.pm\""
  },
  {
    "objectID": "docstrings/medyan.addreaction--da9bd35e7d1df7c3.html#tuple-medyan.sysdef--medyan.compartmentreaction--028b8b53a1777d4b",
    "href": "docstrings/medyan.addreaction--da9bd35e7d1df7c3.html#tuple-medyan.sysdef--medyan.compartmentreaction--028b8b53a1777d4b",
    "title": "MEDYAN.addreaction!",
    "section": "",
    "text": "addreaction!(s::SysDef,reaction::CompartmentReaction)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.addreaction--da9bd35e7d1df7c3.html#tuple-medyan.sysdef--abstractstring--float64--int64--458efa379d290938",
    "href": "docstrings/medyan.addreaction--da9bd35e7d1df7c3.html#tuple-medyan.sysdef--abstractstring--float64--int64--458efa379d290938",
    "title": "MEDYAN.addreaction!",
    "section": "",
    "text": "addreaction!(s::SysDef,reactionexpr::AbstractString,rate::Float64,invvolumepower::Int)::SysDef\nAdd a reaction to the system. Return s\nreactionexpr is a string describing the reaction stoichiometry\nreactionexpr is comprised of reactant and product parts seperated by a \"--&gt;\"\nAll whitespace characters are ignored.\nEach side is then split by \"+\" to get the species names.\nRepeated or extra \"+\" are ignored.\nA species name can be prepended by a positive integer to represent multiple copies.\n\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s) rate constants correspond to stochastic rate constants in the sense used by Gillespie (J. Comp. Phys., 1976, 22 (4)).\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\"diffusing.a + diffusing.b --&gt; diffusing.c\"\n\"diffusing.c --&gt; diffusing.a + diffusing.b\"\n\"+ + diffusing.c + --&gt; + diffusing.a + + diffusing.b + +\"\n\" --&gt; diffusing.a + diffusing.b\"\n\"diffusing.a + diffusing.b --&gt; \"\n\"diffusing.a + diffusing.a --&gt; \"\n\"2diffusing.a --&gt; \"\n\"2diffusing.a --&gt; 20diffusing.a\"\n\"diffusing.c + diffusing.b --&gt; diffusing.c + diffusing.b\"\n\"fixedspecies.rate1b --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + 23fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.g --&gt; fixedspecies.rate1b + 23fixedspecies.g\"\n\"fixedspecies.g + fixedspecies.rate1b--&gt; 2fixedspecies.rate1b + 23fixedspecies.g\"\n\"filamentsite.MT.d --&gt; filamentsite.MT.d\"\n\"filamentsite.MT.d + diffusing.a --&gt; filamentsite.MT.d\"\n\"fixedspecies.g --&gt; diffusing.a\"\n\"diffusing.a --&gt; fixedspecies.g\"\n\"filamentsite.actin.pm + diffusing.a --&gt; filamentsite.actin.pm\""
  },
  {
    "objectID": "docstrings/medyan.agentnames-948e6a24b4fb0cb5.html",
    "href": "docstrings/medyan.agentnames-948e6a24b4fb0cb5.html",
    "title": "MEDYAN.AgentNames",
    "section": "",
    "text": "The names of the agents in a simulation\n\ndiffusingspeciesnames::Vector{Symbol}\nbulkspeciesnames::Vector{Symbol}\nmembranediffusingspeciesnames::Vector{Symbol}\nfixedspeciesnames::Vector{Symbol}\nfilamentnames::Vector{Tuple{Symbol, Vector{Symbol}}}\nvertexnames::Vector{Symbol}"
  },
  {
    "objectID": "docstrings/medyan.agentnames-948e6a24b4fb0cb5.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.agentnames-948e6a24b4fb0cb5.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.AgentNames",
    "section": "",
    "text": "The names of the agents in a simulation\n\ndiffusingspeciesnames::Vector{Symbol}\nbulkspeciesnames::Vector{Symbol}\nmembranediffusingspeciesnames::Vector{Symbol}\nfixedspeciesnames::Vector{Symbol}\nfilamentnames::Vector{Tuple{Symbol, Vector{Symbol}}}\nvertexnames::Vector{Symbol}"
  },
  {
    "objectID": "docstrings/medyan.context-736368ed32b08894.html",
    "href": "docstrings/medyan.context-736368ed32b08894.html",
    "title": "MEDYAN.Context",
    "section": "",
    "text": "Context(sys_def::SysDef, grid::CubicGrid; kwargs...)\n\nagent_names::MEDYAN.AgentNames\nsys_def::MEDYAN.SysDef\ncompartments::Vector{MEDYAN.Compartment}\ngrid::Any\ntime::Ref{Float64}: time (s)\nstats::MEDYAN.PerformanceStats\nβ::Float64: inverse kT (1/(nm*pN))\nbase_diffusion_coeffs::Vector{Float64}: Diffusion coefficients indexed by diffusing species id (nm²/s)\nmembrane_species_params::StaticArraysCore.SVector{NUM_MEMBRANEDIFFUSINGSPECIES, MEDYAN.MembraneSpeciesParams} where NUM_MEMBRANEDIFFUSINGSPECIES: Membrane species parameters indexed by membrane diffusing species id.\nmin_compartment_volume_ratio::Float64: Smallest volume a compartment can have before being deactivated as a ratio to a full compartment volume.\nchemistryengine::MEDYAN.RDMESampler: The reaction diffusion master equation sampler, contains the diffusing and regular fixed species state\nchem_cylinders::Vector{MEDYAN.ChemCylinders}: Data about filament cylinders, indexed by filament type id\nmembranes::Vector: All membrane meshes.\nlink_manager::MEDYAN.LinkManager\ndecimated_2mon_site_managers::Vector{MEDYAN.AbstractDecimated2MonSiteManager}: Site managers, indexed by site id\nfilamentsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filament site definitions, indexed by filament type id, filament site id to get a SiteData with fields of id, site, fxsid\nfilamentendsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filamentend site definitions, indexed by filament type id, filamentend site id to get a SiteData with fields of id, site, fxsid\nmaxfilsite_plusrange::Vector{Int64}: The maximum plus range in monomers that any filament site or end site can see. Indexed by filament type id\nmaxfilsite_minusrange::Vector{Int64}: The maximum minus range in monomers that any filament site or end site can see. Indexed by filament type id\nmembranesites::Tuple{Vararg{MEDYAN.SiteData}}: Maps membrane site id to a SiteData with fields of id, site, fxsid.\nmap_membranediffusingspeciesindex_membranesiteindices::Tuple{Vararg{Vector{Int64}}}: Maps membrane diffusing species index to a list of membrane sites using this species as reactant. This is initialized during context init and should not be changed.\ndecimated_2mon_sites::Vector{MEDYAN.SiteData}: Site definitions, indexed by site id to get a SiteData with fields of id, site, fxsid\npossiblecadherinsite_managers::Tuple{Vararg{MEDYAN.AbstractPossibleCadherinSiteManager}}: Site managers, indexed by site id\ncheck_sitecount_error::Bool: If true site counts are checked for errors on every chem update. This is extremely slow, but useful for testing chem update errors.\ncompartmentreactioncallbacks::Any\nbulkreactioncallbacks::Any\nmemdiff_bulks_index::Int64: Mock bulk species index for membrane diffusion.\nviscosity::Float64: viscosity (pNs/nm² or MPas) water is about 1E-9\ng_tol::Float64: maximum force magnitude after minimization (pN)\nnforce_fractbit::Int64: number of fractional bits used to scale force values into Int64\nnenergy_fractbit::Int64: number of fractional bits used to scale energy values into Int64\nshake_before_minimization::Bool: If true, add noise to coordinates before starting minimization.\niter_max_cg_minimization::Int64: Max number of steps in conjugate gradient minimization.\nmaxstep::Float64: max step to take during line search (nm)\nmax_cylinder_force::Float64: max cylinder force when two cylinders are at zero distance (pN)\ncheck_neighborlist_error::Bool: If true neighborlists are checked for errors on every force calc. This is extremely slow, but useful for testing neighborlist errors.\nnthreads::Int64: Experimental Set to more than 1 to enable multi threading. This is currently may result in non bitwise reproducable simulations. Results should be statistcally identical, but this is currently not well tested.\nenable_cylinder_volume_exclusion::Ref{Bool}: Are cylinder volume exclusion forces calculated\nenable_triangle_bead_volume_exclusion::Bool: Are triangle-bead volume exclusion forces calculated.\ncylinder_skin_radius::Float64: Extra cell list cutoff radius in nm. The cell lists are reset after a bead moves over this amount\nfilamentmechparams::Vector{MEDYAN.FilamentMechParams}: The filament mechanical parameters, indexed by filament type id\nmembranemechparams::Vector{MEDYAN.MembraneMechParams}: Membrane mechanical parameters, indexed by membrane type id.\nfunc_membranespeciespotentialenergy::Any: Membrane species potential energy function. See docs on default function for more info.\nmembranefilamentmechparams::MEDYAN.MembraneFilamentMechParams: Membrane-filament mechanical interaction parameters.\nexternal_energy_forces!::Any: External energy/force expressions. This should be a mutating function taking a (fc::MEDYAN.ForceContext), which adds to fc.forces, fc.energies, and fc.energy. The energy and force must be consistent, and this is not checked. This can be used as ad-hoc solutions to experiment with uncommon forces, such as specifically designed attachments, etc. If this variable is used often, consider moving it into MEDYAN.\nchemboundary::MEDYAN.Boundary: chemical boundary, updates compartment volumes and diffusion rates\nmeshindex_as_chemboundary::Ref{Int64}: The membrane index used as chemical boundary. If values other than 0 is used, the actual interior region of the chemical boundary is the intersection between\n\nthe interior of chemboundary, and\nthe interior of the membrane mesh at this index.\n\nNote: Since the membrane may change its shape often, set_chemboundary! might need to be called often accordingly to update volumes of compartments.\nmechboundary::MEDYAN.Boundary: mechanical boundary\nsharedtypedconfigs::MEDYAN.SharedTypedConfigs: Shared configurations stored in type parameters.\nvalidflags::MEDYAN.ValidFlags: Interval system consistency validation flags."
  },
  {
    "objectID": "docstrings/medyan.context-736368ed32b08894.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.context-736368ed32b08894.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Context",
    "section": "",
    "text": "Context(sys_def::SysDef, grid::CubicGrid; kwargs...)\n\nagent_names::MEDYAN.AgentNames\nsys_def::MEDYAN.SysDef\ncompartments::Vector{MEDYAN.Compartment}\ngrid::Any\ntime::Ref{Float64}: time (s)\nstats::MEDYAN.PerformanceStats\nβ::Float64: inverse kT (1/(nm*pN))\nbase_diffusion_coeffs::Vector{Float64}: Diffusion coefficients indexed by diffusing species id (nm²/s)\nmembrane_species_params::StaticArraysCore.SVector{NUM_MEMBRANEDIFFUSINGSPECIES, MEDYAN.MembraneSpeciesParams} where NUM_MEMBRANEDIFFUSINGSPECIES: Membrane species parameters indexed by membrane diffusing species id.\nmin_compartment_volume_ratio::Float64: Smallest volume a compartment can have before being deactivated as a ratio to a full compartment volume.\nchemistryengine::MEDYAN.RDMESampler: The reaction diffusion master equation sampler, contains the diffusing and regular fixed species state\nchem_cylinders::Vector{MEDYAN.ChemCylinders}: Data about filament cylinders, indexed by filament type id\nmembranes::Vector: All membrane meshes.\nlink_manager::MEDYAN.LinkManager\ndecimated_2mon_site_managers::Vector{MEDYAN.AbstractDecimated2MonSiteManager}: Site managers, indexed by site id\nfilamentsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filament site definitions, indexed by filament type id, filament site id to get a SiteData with fields of id, site, fxsid\nfilamentendsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filamentend site definitions, indexed by filament type id, filamentend site id to get a SiteData with fields of id, site, fxsid\nmaxfilsite_plusrange::Vector{Int64}: The maximum plus range in monomers that any filament site or end site can see. Indexed by filament type id\nmaxfilsite_minusrange::Vector{Int64}: The maximum minus range in monomers that any filament site or end site can see. Indexed by filament type id\nmembranesites::Tuple{Vararg{MEDYAN.SiteData}}: Maps membrane site id to a SiteData with fields of id, site, fxsid.\nmap_membranediffusingspeciesindex_membranesiteindices::Tuple{Vararg{Vector{Int64}}}: Maps membrane diffusing species index to a list of membrane sites using this species as reactant. This is initialized during context init and should not be changed.\ndecimated_2mon_sites::Vector{MEDYAN.SiteData}: Site definitions, indexed by site id to get a SiteData with fields of id, site, fxsid\npossiblecadherinsite_managers::Tuple{Vararg{MEDYAN.AbstractPossibleCadherinSiteManager}}: Site managers, indexed by site id\ncheck_sitecount_error::Bool: If true site counts are checked for errors on every chem update. This is extremely slow, but useful for testing chem update errors.\ncompartmentreactioncallbacks::Any\nbulkreactioncallbacks::Any\nmemdiff_bulks_index::Int64: Mock bulk species index for membrane diffusion.\nviscosity::Float64: viscosity (pNs/nm² or MPas) water is about 1E-9\ng_tol::Float64: maximum force magnitude after minimization (pN)\nnforce_fractbit::Int64: number of fractional bits used to scale force values into Int64\nnenergy_fractbit::Int64: number of fractional bits used to scale energy values into Int64\nshake_before_minimization::Bool: If true, add noise to coordinates before starting minimization.\niter_max_cg_minimization::Int64: Max number of steps in conjugate gradient minimization.\nmaxstep::Float64: max step to take during line search (nm)\nmax_cylinder_force::Float64: max cylinder force when two cylinders are at zero distance (pN)\ncheck_neighborlist_error::Bool: If true neighborlists are checked for errors on every force calc. This is extremely slow, but useful for testing neighborlist errors.\nnthreads::Int64: Experimental Set to more than 1 to enable multi threading. This is currently may result in non bitwise reproducable simulations. Results should be statistcally identical, but this is currently not well tested.\nenable_cylinder_volume_exclusion::Ref{Bool}: Are cylinder volume exclusion forces calculated\nenable_triangle_bead_volume_exclusion::Bool: Are triangle-bead volume exclusion forces calculated.\ncylinder_skin_radius::Float64: Extra cell list cutoff radius in nm. The cell lists are reset after a bead moves over this amount\nfilamentmechparams::Vector{MEDYAN.FilamentMechParams}: The filament mechanical parameters, indexed by filament type id\nmembranemechparams::Vector{MEDYAN.MembraneMechParams}: Membrane mechanical parameters, indexed by membrane type id.\nfunc_membranespeciespotentialenergy::Any: Membrane species potential energy function. See docs on default function for more info.\nmembranefilamentmechparams::MEDYAN.MembraneFilamentMechParams: Membrane-filament mechanical interaction parameters.\nexternal_energy_forces!::Any: External energy/force expressions. This should be a mutating function taking a (fc::MEDYAN.ForceContext), which adds to fc.forces, fc.energies, and fc.energy. The energy and force must be consistent, and this is not checked. This can be used as ad-hoc solutions to experiment with uncommon forces, such as specifically designed attachments, etc. If this variable is used often, consider moving it into MEDYAN.\nchemboundary::MEDYAN.Boundary: chemical boundary, updates compartment volumes and diffusion rates\nmeshindex_as_chemboundary::Ref{Int64}: The membrane index used as chemical boundary. If values other than 0 is used, the actual interior region of the chemical boundary is the intersection between\n\nthe interior of chemboundary, and\nthe interior of the membrane mesh at this index.\n\nNote: Since the membrane may change its shape often, set_chemboundary! might need to be called often accordingly to update volumes of compartments.\nmechboundary::MEDYAN.Boundary: mechanical boundary\nsharedtypedconfigs::MEDYAN.SharedTypedConfigs: Shared configurations stored in type parameters.\nvalidflags::MEDYAN.ValidFlags: Interval system consistency validation flags."
  },
  {
    "objectID": "docstrings/medyan.make_link--0fd0bab9dac08837.html",
    "href": "docstrings/medyan.make_link--0fd0bab9dac08837.html",
    "title": "MEDYAN.make_link!",
    "section": "",
    "text": "make_link!(c::Context; kwargs...)::Link\nReturn the new link.\nThe type keyword argument is required.\nThe other keyword arguments can be used to change the link from default.\n\n\n\ntype::Union{Symbol,Integer}: the link type id or symbol.\nplaces=(): places or tags to attach to the link.\nSet an element to nothing not change the attached place. Set an element to a null place or tag to detach that place.\nstate=(;): state properties to change.\nA NamedTuple of changes. For example, state = (;k1 = 3.6, k7 = 2.0,) to change state.k1 to 3.6 and state.k7 to 2.0.\nbond_states=(): bond state properties to change.\nA Tuple of changes. If an element in the tuple is nothing, the corresponding bond state isn’t changed. For example, bond_states = (nothing, (;L0 = 3.6,)) to change bond_states[2].L0 to 3.6.\nbond_enabled=(): bond enable flags to change.\nA Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding bond enable flag isn't changed. For example,bond_enabled = (nothing, true, false)` to not change bond 1, enable bond 2, and disable bond 3.\nreaction_enabled=(): reaction enable flags to change.\nA Tuple of Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding reaction enable flag or flags aren't changed. For example,reaction_enabled = (nothing, (true, nothing, false))` to not change any reactions on place 1, enable reaction 1 on place 2, and disable reaction 3 on place 2.\nis_minimized::Bool=false: is the link marked as minimized.\nBy default links are marked as minimized at the end of mechanics when updated."
  },
  {
    "objectID": "docstrings/medyan.make_link--0fd0bab9dac08837.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.make_link--0fd0bab9dac08837.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.make_link!",
    "section": "",
    "text": "make_link!(c::Context; kwargs...)::Link\nReturn the new link.\nThe type keyword argument is required.\nThe other keyword arguments can be used to change the link from default.\n\n\n\ntype::Union{Symbol,Integer}: the link type id or symbol.\nplaces=(): places or tags to attach to the link.\nSet an element to nothing not change the attached place. Set an element to a null place or tag to detach that place.\nstate=(;): state properties to change.\nA NamedTuple of changes. For example, state = (;k1 = 3.6, k7 = 2.0,) to change state.k1 to 3.6 and state.k7 to 2.0.\nbond_states=(): bond state properties to change.\nA Tuple of changes. If an element in the tuple is nothing, the corresponding bond state isn’t changed. For example, bond_states = (nothing, (;L0 = 3.6,)) to change bond_states[2].L0 to 3.6.\nbond_enabled=(): bond enable flags to change.\nA Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding bond enable flag isn't changed. For example,bond_enabled = (nothing, true, false)` to not change bond 1, enable bond 2, and disable bond 3.\nreaction_enabled=(): reaction enable flags to change.\nA Tuple of Tuple of Union{Bool, Nothing}. If an element in the tuple isnothing, the corresponding reaction enable flag or flags aren't changed. For example,reaction_enabled = (nothing, (true, nothing, false))` to not change any reactions on place 1, enable reaction 1 on place 2, and disable reaction 3 on place 2.\nis_minimized::Bool=false: is the link marked as minimized.\nBy default links are marked as minimized at the end of mechanics when updated."
  },
  {
    "objectID": "docstrings/medyan.grididat-8671e01413346deb.html",
    "href": "docstrings/medyan.grididat-8671e01413346deb.html",
    "title": "MEDYAN.grididat",
    "section": "",
    "text": "grididat(grid::CubicGrid, location)\nReturn the grid id of location The origin is in the center. Returns a close by voxel if out of the grid"
  },
  {
    "objectID": "docstrings/medyan.grididat-8671e01413346deb.html#tuple-medyan.cubicgrid--any--1be3c03f7960c1a3",
    "href": "docstrings/medyan.grididat-8671e01413346deb.html#tuple-medyan.cubicgrid--any--1be3c03f7960c1a3",
    "title": "MEDYAN.grididat",
    "section": "",
    "text": "grididat(grid::CubicGrid, location)\nReturn the grid id of location The origin is in the center. Returns a close by voxel if out of the grid"
  },
  {
    "objectID": "docstrings/medyan.membranesitediffusing-66734014eb12ddb1.html",
    "href": "docstrings/medyan.membranesitediffusing-66734014eb12ddb1.html",
    "title": "MEDYAN.MembraneSiteDiffusing",
    "section": "",
    "text": "Allows up to 1 membrane diffusing species as reactants. Also stores net stoich of membrane diffusing species.\n\nid_membranediffusing_reactant::Int64: Set to 0 if no membrane diffusing species is involved.\ncanchangerate_bypotentialenergy::Bool: Whether the reaction rate depends on reactant species potential energy.\nmembranediffusingnet_stoich::Vector{Pair{Int64, Int64}}: Pairs of membrane diffusing species index =&gt; Δcount"
  },
  {
    "objectID": "docstrings/medyan.membranesitediffusing-66734014eb12ddb1.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.membranesitediffusing-66734014eb12ddb1.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.MembraneSiteDiffusing",
    "section": "",
    "text": "Allows up to 1 membrane diffusing species as reactants. Also stores net stoich of membrane diffusing species.\n\nid_membranediffusing_reactant::Int64: Set to 0 if no membrane diffusing species is involved.\ncanchangerate_bypotentialenergy::Bool: Whether the reaction rate depends on reactant species potential energy.\nmembranediffusingnet_stoich::Vector{Pair{Int64, Int64}}: Pairs of membrane diffusing species index =&gt; Δcount"
  },
  {
    "objectID": "docstrings/medyan.filamentendsitegeneral-7a32ac96fb4364ea.html",
    "href": "docstrings/medyan.filamentendsitegeneral-7a32ac96fb4364ea.html",
    "title": "MEDYAN.FilamentEndSiteGeneral",
    "section": "",
    "text": "Filament end site that matches with a vector of monomer states.\n\nisminusend::Bool\nendstates::Vector{UInt8}\nspacing::Float64\nadded_monomers::Int64"
  },
  {
    "objectID": "docstrings/medyan.filamentendsitegeneral-7a32ac96fb4364ea.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.filamentendsitegeneral-7a32ac96fb4364ea.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.FilamentEndSiteGeneral",
    "section": "",
    "text": "Filament end site that matches with a vector of monomer states.\n\nisminusend::Bool\nendstates::Vector{UInt8}\nspacing::Float64\nadded_monomers::Int64"
  },
  {
    "objectID": "docstrings/medyan.add_diffusing_count--78fc5fd22c94a7fa.html",
    "href": "docstrings/medyan.add_diffusing_count--78fc5fd22c94a7fa.html",
    "title": "MEDYAN.add_diffusing_count!",
    "section": "",
    "text": "add_diffusing_count!(c::Context; species, chem_voxel, inccount)\nAdd inccount to diffusing species id sid in chem_voxel"
  },
  {
    "objectID": "docstrings/medyan.add_diffusing_count--78fc5fd22c94a7fa.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.add_diffusing_count--78fc5fd22c94a7fa.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.add_diffusing_count!",
    "section": "",
    "text": "add_diffusing_count!(c::Context; species, chem_voxel, inccount)\nAdd inccount to diffusing species id sid in chem_voxel"
  },
  {
    "objectID": "docstrings/medyan.boundary_box-060d4c56df40146a.html",
    "href": "docstrings/medyan.boundary_box-060d4c56df40146a.html",
    "title": "MEDYAN.boundary_box",
    "section": "",
    "text": "boundary_box(\n    grid::MEDYAN.CubicGrid;\n    offset,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a box boundary at the edge of a grid.\noffset(nm): How far the bounding planes should be moved in from the edge of the grid. Positive is inside the grid, negative is outside the grid.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.boundary_box-060d4c56df40146a.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "href": "docstrings/medyan.boundary_box-060d4c56df40146a.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "title": "MEDYAN.boundary_box",
    "section": "",
    "text": "boundary_box(\n    grid::MEDYAN.CubicGrid;\n    offset,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a box boundary at the edge of a grid.\noffset(nm): How far the bounding planes should be moved in from the edge of the grid. Positive is inside the grid, negative is outside the grid.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.defer_chem_caching--9538a1c449f3da93.html",
    "href": "docstrings/medyan.defer_chem_caching--9538a1c449f3da93.html",
    "title": "MEDYAN.defer_chem_caching!",
    "section": "",
    "text": "defer_chem_caching!(c::Context)::Nothing\nThis should only be used for advanced optimizations.\nDuring chemistry, the context mutating functions will typically try to avoid invalidating various cached data needed to quickly sample sites.\nHowever, if you want to mutate the context outside of chemistry, for example right before or after minimization, you may not want to pay the cost of revalidating all the caches because minimization will already invalidate the caches. Caching will be enabled again and caches will be made valid the next time chemistry is run. Caching can also be manually refreshed and reenabled with: refresh_chem_cache!"
  },
  {
    "objectID": "docstrings/medyan.defer_chem_caching--9538a1c449f3da93.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.defer_chem_caching--9538a1c449f3da93.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.defer_chem_caching!",
    "section": "",
    "text": "defer_chem_caching!(c::Context)::Nothing\nThis should only be used for advanced optimizations.\nDuring chemistry, the context mutating functions will typically try to avoid invalidating various cached data needed to quickly sample sites.\nHowever, if you want to mutate the context outside of chemistry, for example right before or after minimization, you may not want to pay the cost of revalidating all the caches because minimization will already invalidate the caches. Caching will be enabled again and caches will be made valid the next time chemistry is run. Caching can also be manually refreshed and reenabled with: refresh_chem_cache!"
  },
  {
    "objectID": "docstrings/medyan.num_fila-6aa6f32d094c895e.html",
    "href": "docstrings/medyan.num_fila-6aa6f32d094c895e.html",
    "title": "MEDYAN.num_fila",
    "section": "",
    "text": "num_fila(c::MEDYAN.Context; type) -&gt; Int64\nReturn the number of filaments of a given type."
  },
  {
    "objectID": "docstrings/medyan.num_fila-6aa6f32d094c895e.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.num_fila-6aa6f32d094c895e.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.num_fila",
    "section": "",
    "text": "num_fila(c::MEDYAN.Context; type) -&gt; Int64\nReturn the number of filaments of a given type."
  },
  {
    "objectID": "docstrings/medyan.is_chem_cache_valid-8336a8adc58a252f.html",
    "href": "docstrings/medyan.is_chem_cache_valid-8336a8adc58a252f.html",
    "title": "MEDYAN.is_chem_cache_valid",
    "section": "",
    "text": "is_chem_cache_valid(c::Context)::Bool\nReturn true if the chemistry cache is valid, false otherwise."
  },
  {
    "objectID": "docstrings/medyan.is_chem_cache_valid-8336a8adc58a252f.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.is_chem_cache_valid-8336a8adc58a252f.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.is_chem_cache_valid",
    "section": "",
    "text": "is_chem_cache_valid(c::Context)::Bool\nReturn true if the chemistry cache is valid, false otherwise."
  },
  {
    "objectID": "docstrings/medyan.sysdef-c0c4da7a2b3d4fef.html",
    "href": "docstrings/medyan.sysdef-c0c4da7a2b3d4fef.html",
    "title": "MEDYAN.SysDef",
    "section": "",
    "text": "SysDef(agent_names::AgentNames)\nA mutable struct mapping names to id numbers in a simulation\n\nagent_names::MEDYAN.AgentNames\ndiffusing::MEDYAN.PropDictionary\ndiffusing_coeff::MEDYAN.PropDictionary\nbulkspecies_indexmap::MEDYAN.PropDictionary\nmembranediffusing::MEDYAN.PropDictionary\nfixedspecies::MEDYAN.PropDictionary\nfilament::MEDYAN.PropDictionary\nfilament_params::MEDYAN.PropDictionary\nvertex::MEDYAN.PropDictionary\nstate::MEDYAN.PropDictionary\nfilamentsite::MEDYAN.PropDictionary\nfilamentendsite::MEDYAN.PropDictionary\nmembranesite::MEDYAN.PropDictionary: Each membrane site represents the membrane patches in each compartment together with some membrane diffusing species.\ndecimated_2mon_site::MEDYAN.PropDictionary\npossiblecadherinsite::MEDYAN.PropDictionary\nallfixedspeciesnames::Vector{String}\ncompartmentreactions::Vector{MEDYAN.CompartmentReaction}\ncompartmentreactioncallbacks::Vector{Any}\nbulkreactions::Vector{MEDYAN.BulkReaction}\nbulkreactioncallbacks::Vector{Any}: Context -&gt; Nothing\nlink::MEDYAN.PropDictionary\ntotal_num_link_types_places::Int64\nlink_reaction_site::MEDYAN.PropDictionary"
  },
  {
    "objectID": "docstrings/medyan.sysdef-c0c4da7a2b3d4fef.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.sysdef-c0c4da7a2b3d4fef.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.SysDef",
    "section": "",
    "text": "SysDef(agent_names::AgentNames)\nA mutable struct mapping names to id numbers in a simulation\n\nagent_names::MEDYAN.AgentNames\ndiffusing::MEDYAN.PropDictionary\ndiffusing_coeff::MEDYAN.PropDictionary\nbulkspecies_indexmap::MEDYAN.PropDictionary\nmembranediffusing::MEDYAN.PropDictionary\nfixedspecies::MEDYAN.PropDictionary\nfilament::MEDYAN.PropDictionary\nfilament_params::MEDYAN.PropDictionary\nvertex::MEDYAN.PropDictionary\nstate::MEDYAN.PropDictionary\nfilamentsite::MEDYAN.PropDictionary\nfilamentendsite::MEDYAN.PropDictionary\nmembranesite::MEDYAN.PropDictionary: Each membrane site represents the membrane patches in each compartment together with some membrane diffusing species.\ndecimated_2mon_site::MEDYAN.PropDictionary\npossiblecadherinsite::MEDYAN.PropDictionary\nallfixedspeciesnames::Vector{String}\ncompartmentreactions::Vector{MEDYAN.CompartmentReaction}\ncompartmentreactioncallbacks::Vector{Any}\nbulkreactions::Vector{MEDYAN.BulkReaction}\nbulkreactioncallbacks::Vector{Any}: Context -&gt; Nothing\nlink::MEDYAN.PropDictionary\ntotal_num_link_types_places::Int64\nlink_reaction_site::MEDYAN.PropDictionary"
  },
  {
    "objectID": "docstrings/medyan.get_chem_state-a69539a7b114572a.html",
    "href": "docstrings/medyan.get_chem_state-a69539a7b114572a.html",
    "title": "MEDYAN.get_chem_state",
    "section": "",
    "text": "get_chem_state(c::Context, x::Union{Tag, Place})\nReturn the chemical state of x. Each type of place has a different type of chemical state. If the chemical state of a place changes, any attached links will have their reaction rates recalculated. Throw an error if x doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.get_chem_state-a69539a7b114572a.html#tuple-medyan.context--medyan.tag--fedde092ce150cde",
    "href": "docstrings/medyan.get_chem_state-a69539a7b114572a.html#tuple-medyan.context--medyan.tag--fedde092ce150cde",
    "title": "MEDYAN.get_chem_state",
    "section": "",
    "text": "get_chem_state(c::Context, x::Union{Tag, Place})\nReturn the chemical state of x. Each type of place has a different type of chemical state. If the chemical state of a place changes, any attached links will have their reaction rates recalculated. Throw an error if x doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.get_all_links-fe0d12c0df825f7e.html",
    "href": "docstrings/medyan.get_all_links-fe0d12c0df825f7e.html",
    "title": "MEDYAN.get_all_links",
    "section": "",
    "text": "get_all_links(c::Context; type::Union{Symbol,Integer}) -&gt; Link iterator\nReturn an iterator of all Links of type type."
  },
  {
    "objectID": "docstrings/medyan.get_all_links-fe0d12c0df825f7e.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.get_all_links-fe0d12c0df825f7e.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.get_all_links",
    "section": "",
    "text": "get_all_links(c::Context; type::Union{Symbol,Integer}) -&gt; Link iterator\nReturn an iterator of all Links of type type."
  },
  {
    "objectID": "docstrings/medyan.depolymerize_fila--7aae43ce27544212.html",
    "href": "docstrings/medyan.depolymerize_fila--7aae43ce27544212.html",
    "title": "MEDYAN.depolymerize_fila!",
    "section": "",
    "text": "depolymerize_fila!(c::Context, fila_tip_idx::FilaTipIdx)\nRemove a monomer from the end of the filament.\nThis doesn’t affect the other monomer states, positions, or change any of the monomer ids.\nError if the filament isn’t initially over 2 monomers long.\nUnlink any monomers on the filament that are referenced by any links. The links will not be removed, but will have a null reference. Links attached to the filament tip will remain attached."
  },
  {
    "objectID": "docstrings/medyan.depolymerize_fila--7aae43ce27544212.html#tuple-medyan.context--medyan.filatipidx--d592866d39d8c362",
    "href": "docstrings/medyan.depolymerize_fila--7aae43ce27544212.html#tuple-medyan.context--medyan.filatipidx--d592866d39d8c362",
    "title": "MEDYAN.depolymerize_fila!",
    "section": "",
    "text": "depolymerize_fila!(c::Context, fila_tip_idx::FilaTipIdx)\nRemove a monomer from the end of the filament.\nThis doesn’t affect the other monomer states, positions, or change any of the monomer ids.\nError if the filament isn’t initially over 2 monomers long.\nUnlink any monomers on the filament that are referenced by any links. The links will not be removed, but will have a null reference. Links attached to the filament tip will remain attached."
  },
  {
    "objectID": "docstrings/medyan.num_vertexwithstate-3cf6fcd964588d37.html",
    "href": "docstrings/medyan.num_vertexwithstate-3cf6fcd964588d37.html",
    "title": "MEDYAN.num_vertexwithstate",
    "section": "",
    "text": "Return the number of vertices with state 2. Check the number of vertices with state 2. The number should be constant."
  },
  {
    "objectID": "docstrings/medyan.num_vertexwithstate-3cf6fcd964588d37.html#tuple-medyan.dynamichalfedgemesh--uint8--249d6d475bef2173",
    "href": "docstrings/medyan.num_vertexwithstate-3cf6fcd964588d37.html#tuple-medyan.dynamichalfedgemesh--uint8--249d6d475bef2173",
    "title": "MEDYAN.num_vertexwithstate",
    "section": "",
    "text": "Return the number of vertices with state 2. Check the number of vertices with state 2. The number should be constant."
  },
  {
    "objectID": "docstrings/medyan.minimize_energy--84c4aeab5457d3ee.html",
    "href": "docstrings/medyan.minimize_energy--84c4aeab5457d3ee.html",
    "title": "MEDYAN.minimize_energy!",
    "section": "",
    "text": "minimize_energy!(c::Context)::MinimizeEnergyResults\nMinimize mechanical energy of the context.\n\n\n\ncheck_closest_cylinders::Bool=true:\n\nIf true, the function will warn if two cylinders get too close during minimization.\n\nbrownian_motion_time::Float64=Inf: This parameter is used to simulate the effect\n\nof Brownian motion over a certain period of time in seconds. It is currently experimental. By default, the effect of Brownian motion is ignored.\n\ng_tol::Float64=c.g_tol: The acceptable maximum residual force on any degree of freedom in pN.\niter_max::Int=c.iter_max_cg_minimization: The maximum number of congugate gradient iterations to do before exiting."
  },
  {
    "objectID": "docstrings/medyan.minimize_energy--84c4aeab5457d3ee.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.minimize_energy--84c4aeab5457d3ee.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.minimize_energy!",
    "section": "",
    "text": "minimize_energy!(c::Context)::MinimizeEnergyResults\nMinimize mechanical energy of the context.\n\n\n\ncheck_closest_cylinders::Bool=true:\n\nIf true, the function will warn if two cylinders get too close during minimization.\n\nbrownian_motion_time::Float64=Inf: This parameter is used to simulate the effect\n\nof Brownian motion over a certain period of time in seconds. It is currently experimental. By default, the effect of Brownian motion is ignored.\n\ng_tol::Float64=c.g_tol: The acceptable maximum residual force on any degree of freedom in pN.\niter_max::Int=c.iter_max_cg_minimization: The maximum number of congugate gradient iterations to do before exiting."
  },
  {
    "objectID": "docstrings/medyan.remove_fila--9938182befad3cb9.html",
    "href": "docstrings/medyan.remove_fila--9938182befad3cb9.html",
    "title": "MEDYAN.remove_fila!",
    "section": "",
    "text": "remove_fila!(c::Context, filaidx::Union{FilaIdx, Tag})\nRemove the filament.\nUnlink any monomers or tips on the filament that are referenced by any links. The links will not be removed, but will have a null reference."
  },
  {
    "objectID": "docstrings/medyan.remove_fila--9938182befad3cb9.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "href": "docstrings/medyan.remove_fila--9938182befad3cb9.html#tuple-medyan.context--medyan.filaidx--5b8fb92ab95a2b00",
    "title": "MEDYAN.remove_fila!",
    "section": "",
    "text": "remove_fila!(c::Context, filaidx::Union{FilaIdx, Tag})\nRemove the filament.\nUnlink any monomers or tips on the filament that are referenced by any links. The links will not be removed, but will have a null reference."
  },
  {
    "objectID": "docstrings/medyan.link2tags-645330bedbf54254.html",
    "href": "docstrings/medyan.link2tags-645330bedbf54254.html",
    "title": "MEDYAN.link2tags",
    "section": "",
    "text": "link2tags(c::Context, link::Link, [d::LinkData]) -&gt; Tag tuple\nReturn a tuple of tags of places that link is attached to. If one of the places of link is not attached that tag will be null. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.link2tags-645330bedbf54254.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--medyan.linkdata---c8d94eda9cfd0bb4",
    "href": "docstrings/medyan.link2tags-645330bedbf54254.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--medyan.linkdata---c8d94eda9cfd0bb4",
    "title": "MEDYAN.link2tags",
    "section": "",
    "text": "link2tags(c::Context, link::Link, [d::LinkData]) -&gt; Tag tuple\nReturn a tuple of tags of places that link is attached to. If one of the places of link is not attached that tag will be null. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.newmembrane--a714b4a1c87062be.html",
    "href": "docstrings/medyan.newmembrane--a714b4a1c87062be.html",
    "title": "MEDYAN.newmembrane!",
    "section": "",
    "text": "newmembrane!(c::MEDYAN.Context; type, meshinit)\nAdd a new membrane to the system.\n\n\n\nmeshinit is structure containing mesh shape initialization information, such as a named tuple (vertlist, trilist) containing vertex coordinates and triangle list, MeshInitEllipsoid, MeshInitPlane or a general MeshInitSurfaceFunc."
  },
  {
    "objectID": "docstrings/medyan.newmembrane--a714b4a1c87062be.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.newmembrane--a714b4a1c87062be.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.newmembrane!",
    "section": "",
    "text": "newmembrane!(c::MEDYAN.Context; type, meshinit)\nAdd a new membrane to the system.\n\n\n\nmeshinit is structure containing mesh shape initialization information, such as a named tuple (vertlist, trilist) containing vertex coordinates and triangle list, MeshInitEllipsoid, MeshInitPlane or a general MeshInitSurfaceFunc."
  },
  {
    "objectID": "docstrings/medyan.get_bond_enabled-c3461fb32deb4276.html",
    "href": "docstrings/medyan.get_bond_enabled-c3461fb32deb4276.html",
    "title": "MEDYAN.get_bond_enabled",
    "section": "",
    "text": "get_bond_enabled(c::Context, link::Link, [d::LinkData])\nReturn the bond_enabled flags of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.get_bond_enabled-c3461fb32deb4276.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--any---03b671600f22589f",
    "href": "docstrings/medyan.get_bond_enabled-c3461fb32deb4276.html#union-tuple-medyan.context--medyan.link---tuple-medyan.context--medyan.link--any---03b671600f22589f",
    "title": "MEDYAN.get_bond_enabled",
    "section": "",
    "text": "get_bond_enabled(c::Context, link::Link, [d::LinkData])\nReturn the bond_enabled flags of the link. Throw an error if link doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.set_chemboundary--0aa6e4e95c60f9f7.html",
    "href": "docstrings/medyan.set_chemboundary--0aa6e4e95c60f9f7.html",
    "title": "MEDYAN.set_chemboundary!",
    "section": "",
    "text": "set_chemboundary!(\n    c::MEDYAN.Context;\n    meshindex_as_chemboundary,\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSet chemical boundary and update compartment volumes and diffusion rates. Note, the chemboundary should be outside the mechboundary so that it is rare for filaments to go outside the chemboundary.\nCalling this will invalidate the chem cache.\nSee also Boundary\n\n\n\nplanes::Vector{SVector{4,Float64}} = []\n\nPlanes that make up the chemical boundary of the simulation\ninside = signbit(pos ⋅ planes[bi][1:3] - planes[bi][4])\nFor example, a plane [1,0,0,3] is inside if x &lt; 3 nm.\n2.0*[1,0,0,3] is also inside if x &lt; 3 nm.\n\ncapsules::Vector{SVector{8,Float64}} = []\n\nCapsules that make up the chemical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is ignored.\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\n\nmeshindex_as_chemboundary::Int = 0: Index of membrane mesh that further restricts the chem boundary. 0 for none.\n\nThe system geometry information must be up-to-date. This mesh index is not stored in the boundary object, but is directly set in the context."
  },
  {
    "objectID": "docstrings/medyan.set_chemboundary--0aa6e4e95c60f9f7.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.set_chemboundary--0aa6e4e95c60f9f7.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.set_chemboundary!",
    "section": "",
    "text": "set_chemboundary!(\n    c::MEDYAN.Context;\n    meshindex_as_chemboundary,\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSet chemical boundary and update compartment volumes and diffusion rates. Note, the chemboundary should be outside the mechboundary so that it is rare for filaments to go outside the chemboundary.\nCalling this will invalidate the chem cache.\nSee also Boundary\n\n\n\nplanes::Vector{SVector{4,Float64}} = []\n\nPlanes that make up the chemical boundary of the simulation\ninside = signbit(pos ⋅ planes[bi][1:3] - planes[bi][4])\nFor example, a plane [1,0,0,3] is inside if x &lt; 3 nm.\n2.0*[1,0,0,3] is also inside if x &lt; 3 nm.\n\ncapsules::Vector{SVector{8,Float64}} = []\n\nCapsules that make up the chemical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is ignored.\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\n\nmeshindex_as_chemboundary::Int = 0: Index of membrane mesh that further restricts the chem boundary. 0 for none.\n\nThe system geometry information must be up-to-date. This mesh index is not stored in the boundary object, but is directly set in the context."
  },
  {
    "objectID": "docstrings/medyan.tag2links-e8376daf0b29e2fd.html",
    "href": "docstrings/medyan.tag2links-e8376daf0b29e2fd.html",
    "title": "MEDYAN.tag2links",
    "section": "",
    "text": "tag2links(c::Context, t::Tag) -&gt; Link iterator\nReturn an iterator of Links attached to t. If !tag_exists(c, t) return an empty iterator."
  },
  {
    "objectID": "docstrings/medyan.tag2links-e8376daf0b29e2fd.html#union-tuple-p---tuple-medyan.context--medyan.tag-p----where-p-f3255fd0d268d21a",
    "href": "docstrings/medyan.tag2links-e8376daf0b29e2fd.html#union-tuple-p---tuple-medyan.context--medyan.tag-p----where-p-f3255fd0d268d21a",
    "title": "MEDYAN.tag2links",
    "section": "",
    "text": "tag2links(c::Context, t::Tag) -&gt; Link iterator\nReturn an iterator of Links attached to t. If !tag_exists(c, t) return an empty iterator."
  }
]