[
  {
    "objectID": "docstrings/medyan.set_chemboundary--0aa6e4e95c60f9f7.html",
    "href": "docstrings/medyan.set_chemboundary--0aa6e4e95c60f9f7.html",
    "title": "MEDYAN.set_chemboundary!",
    "section": "",
    "text": "set_chemboundary!(\n    c::MEDYAN.Context;\n    meshindex_as_chemboundary,\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSet chemical boundary and update compartment volumes and diffusion rates. Note, the chemboundary should be outside the mechboundary so that it is rare for filaments to go outside the chemboundary\nSee also Boundary\n\n\n\nplanes::Vector{SVector{4,Float64}} = []\n\nPlanes that make up the chemical boundary of the simulation\ninside = signbit(pos ⋅ planes[bi][1:3] - planes[bi][4])\nFor example, a plane [1,0,0,3] is inside if x &lt; 3 nm.\n2.0*[1,0,0,3] is also inside if x &lt; 3 nm.\n\ncapsules::Vector{SVector{8,Float64}} = []\n\nCapsules that make up the chemical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is ignored.\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\n\nmeshindex_as_chemboundary::Int = 0: Index of membrane mesh that further restricts the chem boundary. 0 for none.\n\nThe system geometry information must be up-to-date. This mesh index is not stored in the boundary object, but is directly set in the context."
  },
  {
    "objectID": "docstrings/medyan.set_chemboundary--0aa6e4e95c60f9f7.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.set_chemboundary--0aa6e4e95c60f9f7.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.set_chemboundary!",
    "section": "",
    "text": "set_chemboundary!(\n    c::MEDYAN.Context;\n    meshindex_as_chemboundary,\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSet chemical boundary and update compartment volumes and diffusion rates. Note, the chemboundary should be outside the mechboundary so that it is rare for filaments to go outside the chemboundary\nSee also Boundary\n\n\n\nplanes::Vector{SVector{4,Float64}} = []\n\nPlanes that make up the chemical boundary of the simulation\ninside = signbit(pos ⋅ planes[bi][1:3] - planes[bi][4])\nFor example, a plane [1,0,0,3] is inside if x &lt; 3 nm.\n2.0*[1,0,0,3] is also inside if x &lt; 3 nm.\n\ncapsules::Vector{SVector{8,Float64}} = []\n\nCapsules that make up the chemical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is ignored.\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\n\nmeshindex_as_chemboundary::Int = 0: Index of membrane mesh that further restricts the chem boundary. 0 for none.\n\nThe system geometry information must be up-to-date. This mesh index is not stored in the boundary object, but is directly set in the context."
  },
  {
    "objectID": "docstrings/medyan.chem_adddiffusingcount--2264be341b81a600.html",
    "href": "docstrings/medyan.chem_adddiffusingcount--2264be341b81a600.html",
    "title": "MEDYAN.chem_adddiffusingcount!",
    "section": "",
    "text": "chem_adddiffusingcount!(c::Context, sid, cid, inccount)\nAdd inccount to diffusing species id sid in compartment id cid"
  },
  {
    "objectID": "docstrings/medyan.chem_adddiffusingcount--2264be341b81a600.html#tuple-medyan.context--any--any--any--3e36a14adf838425",
    "href": "docstrings/medyan.chem_adddiffusingcount--2264be341b81a600.html#tuple-medyan.context--any--any--any--3e36a14adf838425",
    "title": "MEDYAN.chem_adddiffusingcount!",
    "section": "",
    "text": "chem_adddiffusingcount!(c::Context, sid, cid, inccount)\nAdd inccount to diffusing species id sid in compartment id cid"
  },
  {
    "objectID": "docstrings/medyan.chem_removelink_2mon--e25a3fd69f791cd0.html",
    "href": "docstrings/medyan.chem_removelink_2mon--e25a3fd69f791cd0.html",
    "title": "MEDYAN.chem_removelink_2mon!",
    "section": "",
    "text": "chem_removelink_2mon!(c::Context, ltid::Int, lid::Int64)\nRemove a link_2mon of type id ltid with id lid.\nError if the specified link_2mon doesn’t exist.\nDon’t modify monomer states."
  },
  {
    "objectID": "docstrings/medyan.chem_removelink_2mon--e25a3fd69f791cd0.html#tuple-medyan.context--int64--int64--481ec25ee4de4849",
    "href": "docstrings/medyan.chem_removelink_2mon--e25a3fd69f791cd0.html#tuple-medyan.context--int64--int64--481ec25ee4de4849",
    "title": "MEDYAN.chem_removelink_2mon!",
    "section": "",
    "text": "chem_removelink_2mon!(c::Context, ltid::Int, lid::Int64)\nRemove a link_2mon of type id ltid with id lid.\nError if the specified link_2mon doesn’t exist.\nDon’t modify monomer states."
  },
  {
    "objectID": "docstrings/medyan.boundary_cylinder-33a45da15f9672d3.html",
    "href": "docstrings/medyan.boundary_cylinder-33a45da15f9672d3.html",
    "title": "MEDYAN.boundary_cylinder",
    "section": "",
    "text": "boundary_cylinder(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a cylinder boundary.\ncenter(nm): The center of the cylinder.\naxis(nm): The direction and length of the cylinder. The spine line segment goes from center - axis/2 to center + axis/2 the full length of the cylinder is norm(axis).\nradius(nm): Radius of cylinder.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.boundary_cylinder-33a45da15f9672d3.html#tuple---3937a4f1811c9dc1",
    "href": "docstrings/medyan.boundary_cylinder-33a45da15f9672d3.html#tuple---3937a4f1811c9dc1",
    "title": "MEDYAN.boundary_cylinder",
    "section": "",
    "text": "boundary_cylinder(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a cylinder boundary.\ncenter(nm): The center of the cylinder.\naxis(nm): The direction and length of the cylinder. The spine line segment goes from center - axis/2 to center + axis/2 the full length of the cylinder is norm(axis).\nradius(nm): Radius of cylinder.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.vertexstate-450b7005d2acebe8.html",
    "href": "docstrings/medyan.vertexstate-450b7005d2acebe8.html",
    "title": "MEDYAN.VertexState",
    "section": "",
    "text": "Possible Cadherin Site: one end fixed on vertex, other end on filament. For fend within max to min range are linkable. If they have matching state with vertexstate and monomerstate."
  },
  {
    "objectID": "docstrings/medyan.vertexstate-450b7005d2acebe8.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.vertexstate-450b7005d2acebe8.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.VertexState",
    "section": "",
    "text": "Possible Cadherin Site: one end fixed on vertex, other end on filament. For fend within max to min range are linkable. If they have matching state with vertexstate and monomerstate."
  },
  {
    "objectID": "docstrings/medyan.add_link_2mon_site--b9548c4a2d23aac9.html",
    "href": "docstrings/medyan.add_link_2mon_site--b9548c4a2d23aac9.html",
    "title": "MEDYAN.add_link_2mon_site!",
    "section": "",
    "text": "add_link_2mon_site!(s::SysDef,link_2mon_typename::Symbol,link_2mon_sitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.add_link_2mon_site--b9548c4a2d23aac9.html#tuple-medyan.sysdef--symbol--symbol--any--b9a0ed342fa77751",
    "href": "docstrings/medyan.add_link_2mon_site--b9548c4a2d23aac9.html#tuple-medyan.sysdef--symbol--symbol--any--b9a0ed342fa77751",
    "title": "MEDYAN.add_link_2mon_site!",
    "section": "",
    "text": "add_link_2mon_site!(s::SysDef,link_2mon_typename::Symbol,link_2mon_sitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.link2monstate-9845e7e08620ea8a.html",
    "href": "docstrings/medyan.link2monstate-9845e7e08620ea8a.html",
    "title": "MEDYAN.Link2MonState",
    "section": "",
    "text": "There is one instance of this per link_2mon.\n\nchemstate::NamedTuple: Other state.\nmechstate::NamedTuple: Used in link_2mon force calculation.\nis_minimized::Bool: Set to true after minimization"
  },
  {
    "objectID": "docstrings/medyan.link2monstate-9845e7e08620ea8a.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.link2monstate-9845e7e08620ea8a.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Link2MonState",
    "section": "",
    "text": "There is one instance of this per link_2mon.\n\nchemstate::NamedTuple: Other state.\nmechstate::NamedTuple: Used in link_2mon force calculation.\nis_minimized::Bool: Set to true after minimization"
  },
  {
    "objectID": "docstrings/medyan.mon_plusvector-b7271c7721602813.html",
    "href": "docstrings/medyan.mon_plusvector-b7271c7721602813.html",
    "title": "MEDYAN.mon_plusvector",
    "section": "",
    "text": "mon_plusvector(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; StaticArraysCore.SVector{3, Float64}\nReturn the unit vector toward the plus end of the filament."
  },
  {
    "objectID": "docstrings/medyan.mon_plusvector-b7271c7721602813.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "href": "docstrings/medyan.mon_plusvector-b7271c7721602813.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "title": "MEDYAN.mon_plusvector",
    "section": "",
    "text": "mon_plusvector(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; StaticArraysCore.SVector{3, Float64}\nReturn the unit vector toward the plus end of the filament."
  },
  {
    "objectID": "docstrings/medyan.load_snapshot--e534be293ce74465.html",
    "href": "docstrings/medyan.load_snapshot--e534be293ce74465.html",
    "title": "MEDYAN.load_snapshot!",
    "section": "",
    "text": "load_snapshot!(c::Context,group::ZGroup)\nEmpty the context and load the state saved in the snapshot group.\nc should be constructed with the same SysDef and parameters as the Context used to create the snapshot. Trying to load a snapshot into a Context constructed with a different system or parameters may lead to unexpected results.\nSee Snapshot group for more details."
  },
  {
    "objectID": "docstrings/medyan.load_snapshot--e534be293ce74465.html#tuple-medyan.context--smallzarrgroups.zgroup--a98412e602b7637b",
    "href": "docstrings/medyan.load_snapshot--e534be293ce74465.html#tuple-medyan.context--smallzarrgroups.zgroup--a98412e602b7637b",
    "title": "MEDYAN.load_snapshot!",
    "section": "",
    "text": "load_snapshot!(c::Context,group::ZGroup)\nEmpty the context and load the state saved in the snapshot group.\nc should be constructed with the same SysDef and parameters as the Context used to create the snapshot. Trying to load a snapshot into a Context constructed with a different system or parameters may lead to unexpected results.\nSee Snapshot group for more details."
  },
  {
    "objectID": "docstrings/medyan.set_mechboundary--b5e26b6b690256aa.html",
    "href": "docstrings/medyan.set_mechboundary--b5e26b6b690256aa.html",
    "title": "MEDYAN.set_mechboundary!",
    "section": "",
    "text": "set_mechboundary!(\n    c::MEDYAN.Context;\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSee also Boundary"
  },
  {
    "objectID": "docstrings/medyan.set_mechboundary--b5e26b6b690256aa.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.set_mechboundary--b5e26b6b690256aa.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.set_mechboundary!",
    "section": "",
    "text": "set_mechboundary!(\n    c::MEDYAN.Context;\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSee also Boundary"
  },
  {
    "objectID": "docstrings/medyan.boundary_plane-2caa9b52b3b3f0cc.html",
    "href": "docstrings/medyan.boundary_plane-2caa9b52b3b3f0cc.html",
    "title": "MEDYAN.boundary_plane",
    "section": "",
    "text": "boundary_plane(\n;\n    normal,\n    point,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a plane boundary.\nnormal(unit vector): Vector pointing normal to the plane. This points outside of the boundary.\npoint(nm): Point on the plane.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.boundary_plane-2caa9b52b3b3f0cc.html#tuple---3937a4f1811c9dc1",
    "href": "docstrings/medyan.boundary_plane-2caa9b52b3b3f0cc.html#tuple---3937a4f1811c9dc1",
    "title": "MEDYAN.boundary_plane",
    "section": "",
    "text": "boundary_plane(\n;\n    normal,\n    point,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a plane boundary.\nnormal(unit vector): Vector pointing normal to the plane. This points outside of the boundary.\npoint(nm): Point on the plane.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.chem_depolymerize--a5f262191e484dd4.html",
    "href": "docstrings/medyan.chem_depolymerize--a5f262191e484dd4.html",
    "title": "MEDYAN.chem_depolymerize!",
    "section": "",
    "text": "chem_depolymerize!(c::Context, ftid, fid, isminusend::Bool)\nRemove a monomer from the end of the filament with type id ftid and id fid.\nIf isminusend is true remove the monomer from the minus end of the filament, if false remove it from the plus end of the filament.\nThis doesn’t affect the other monomer states, positions, linked link_2mons, or change any of the monomer names.\nError if the filament isn’t initially over 2 monomers long.\nWarn if the old end monomer is referenced in a link2mon, and remove the link2mon.\nThe warning can be disabled by passing keyword argument warniflink_2mon_removed=false"
  },
  {
    "objectID": "docstrings/medyan.chem_depolymerize--a5f262191e484dd4.html#tuple-medyan.context--int64--int64--bool--564746c220a20c60",
    "href": "docstrings/medyan.chem_depolymerize--a5f262191e484dd4.html#tuple-medyan.context--int64--int64--bool--564746c220a20c60",
    "title": "MEDYAN.chem_depolymerize!",
    "section": "",
    "text": "chem_depolymerize!(c::Context, ftid, fid, isminusend::Bool)\nRemove a monomer from the end of the filament with type id ftid and id fid.\nIf isminusend is true remove the monomer from the minus end of the filament, if false remove it from the plus end of the filament.\nThis doesn’t affect the other monomer states, positions, linked link_2mons, or change any of the monomer names.\nError if the filament isn’t initially over 2 monomers long.\nWarn if the old end monomer is referenced in a link2mon, and remove the link2mon.\nThe warning can be disabled by passing keyword argument warniflink_2mon_removed=false"
  },
  {
    "objectID": "docstrings/medyan.mon_minimized-5b17adaf7d8a4f62.html",
    "href": "docstrings/medyan.mon_minimized-5b17adaf7d8a4f62.html",
    "title": "MEDYAN.mon_minimized",
    "section": "",
    "text": "mon_minimized(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Bool\nReturn true iff the monomer has been minimized"
  },
  {
    "objectID": "docstrings/medyan.mon_minimized-5b17adaf7d8a4f62.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "href": "docstrings/medyan.mon_minimized-5b17adaf7d8a4f62.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "title": "MEDYAN.mon_minimized",
    "section": "",
    "text": "mon_minimized(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Bool\nReturn true iff the monomer has been minimized"
  },
  {
    "objectID": "docstrings/medyan.defer_chem_caching--9538a1c449f3da93.html",
    "href": "docstrings/medyan.defer_chem_caching--9538a1c449f3da93.html",
    "title": "MEDYAN.defer_chem_caching!",
    "section": "",
    "text": "defer_chem_caching!(c::Context)::Nothing\nThis should only be used for advanced optimizations.\nDuring chemistry, the context mutating functions will typically try to avoid invalidating various cached data needed to quickly sample sites.\nHowever, if you want to mutate the context outside of chemistry, for example right before or after minimization, you may not want to pay the cost of revalidating all the caches because minimization will already invalidate the caches. Caching will be enabled again and caches will be made valid the next time chemistry is run. Caching can also be manually refreshed and reenabled with: refresh_chem_cache!"
  },
  {
    "objectID": "docstrings/medyan.defer_chem_caching--9538a1c449f3da93.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.defer_chem_caching--9538a1c449f3da93.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.defer_chem_caching!",
    "section": "",
    "text": "defer_chem_caching!(c::Context)::Nothing\nThis should only be used for advanced optimizations.\nDuring chemistry, the context mutating functions will typically try to avoid invalidating various cached data needed to quickly sample sites.\nHowever, if you want to mutate the context outside of chemistry, for example right before or after minimization, you may not want to pay the cost of revalidating all the caches because minimization will already invalidate the caches. Caching will be enabled again and caches will be made valid the next time chemistry is run. Caching can also be manually refreshed and reenabled with: refresh_chem_cache!"
  },
  {
    "objectID": "docstrings/medyan.boundary_box-060d4c56df40146a.html",
    "href": "docstrings/medyan.boundary_box-060d4c56df40146a.html",
    "title": "MEDYAN.boundary_box",
    "section": "",
    "text": "boundary_box(\n    grid::MEDYAN.CubicGrid;\n    offset,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a box boundary at the edge of a grid.\noffset(nm): How far the bounding planes should be moved in from the edge of the grid. Positive is inside the grid, negative is outside the grid.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.boundary_box-060d4c56df40146a.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "href": "docstrings/medyan.boundary_box-060d4c56df40146a.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "title": "MEDYAN.boundary_box",
    "section": "",
    "text": "boundary_box(\n    grid::MEDYAN.CubicGrid;\n    offset,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a box boundary at the edge of a grid.\noffset(nm): How far the bounding planes should be moved in from the edge of the grid. Positive is inside the grid, negative is outside the grid.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.add_diffusion_coeff--a77d1ef833cfdedd.html",
    "href": "docstrings/medyan.add_diffusion_coeff--a77d1ef833cfdedd.html",
    "title": "MEDYAN.add_diffusion_coeff!",
    "section": "",
    "text": "add_diffusion_coeff!(s::SysDef, diffusing_name::Symbol, diffusing_coeff::Float64)\nAdd the diffusing species to the system with diffusion coefficent in units of (nm²/s). Return s."
  },
  {
    "objectID": "docstrings/medyan.add_diffusion_coeff--a77d1ef833cfdedd.html#tuple-medyan.sysdef--symbol--float64--936450f65416538e",
    "href": "docstrings/medyan.add_diffusion_coeff--a77d1ef833cfdedd.html#tuple-medyan.sysdef--symbol--float64--936450f65416538e",
    "title": "MEDYAN.add_diffusion_coeff!",
    "section": "",
    "text": "add_diffusion_coeff!(s::SysDef, diffusing_name::Symbol, diffusing_coeff::Float64)\nAdd the diffusing species to the system with diffusion coefficent in units of (nm²/s). Return s."
  },
  {
    "objectID": "docstrings/medyan.chem_setmonomerstate--ed756af0de4db0ca.html",
    "href": "docstrings/medyan.chem_setmonomerstate--ed756af0de4db0ca.html",
    "title": "MEDYAN.chem_setmonomerstate!",
    "section": "",
    "text": "chem_setmonomerstate!(c::Context, name::MonomerName, state::MonomerState)\nUpdate a monomer state."
  },
  {
    "objectID": "docstrings/medyan.chem_setmonomerstate--ed756af0de4db0ca.html#tuple-medyan.context--medyan.monomername--uint8--e08e6835e9c3cbe8",
    "href": "docstrings/medyan.chem_setmonomerstate--ed756af0de4db0ca.html#tuple-medyan.context--medyan.monomername--uint8--e08e6835e9c3cbe8",
    "title": "MEDYAN.chem_setmonomerstate!",
    "section": "",
    "text": "chem_setmonomerstate!(c::Context, name::MonomerName, state::MonomerState)\nUpdate a monomer state."
  },
  {
    "objectID": "docstrings/medyan.link2monsitemonomerstatematch-c495443de74016ce.html",
    "href": "docstrings/medyan.link2monsitemonomerstatematch-c495443de74016ce.html",
    "title": "MEDYAN.Link2MonSiteMonomerStateMatch",
    "section": "",
    "text": "Returns 1.0 if the monomer states match, otherwise, returns 0.0.\n\nminusstate::Tuple{UInt8, UInt8, UInt8}: minus end monomer state\nplusstate::Tuple{UInt8, UInt8, UInt8}: plus end monomer state"
  },
  {
    "objectID": "docstrings/medyan.link2monsitemonomerstatematch-c495443de74016ce.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.link2monsitemonomerstatematch-c495443de74016ce.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Link2MonSiteMonomerStateMatch",
    "section": "",
    "text": "Returns 1.0 if the monomer states match, otherwise, returns 0.0.\n\nminusstate::Tuple{UInt8, UInt8, UInt8}: minus end monomer state\nplusstate::Tuple{UInt8, UInt8, UInt8}: plus end monomer state"
  },
  {
    "objectID": "docstrings/medyan.membranesitediffusing-66734014eb12ddb1.html",
    "href": "docstrings/medyan.membranesitediffusing-66734014eb12ddb1.html",
    "title": "MEDYAN.MembraneSiteDiffusing",
    "section": "",
    "text": "Allows up to 1 membrane diffusing species as reactants. Also stores net stoich of membrane diffusing species.\n\nid_membranediffusing_reactant::Int64: Set to 0 if no membrane diffusing species is involved.\ncanchangerate_bypotentialenergy::Bool: Whether the reaction rate depends on reactant species potential energy.\nmembranediffusingnet_stoich::Vector{Pair{Int64, Int64}}: Pairs of membrane diffusing species index =&gt; Δcount"
  },
  {
    "objectID": "docstrings/medyan.membranesitediffusing-66734014eb12ddb1.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.membranesitediffusing-66734014eb12ddb1.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.MembraneSiteDiffusing",
    "section": "",
    "text": "Allows up to 1 membrane diffusing species as reactants. Also stores net stoich of membrane diffusing species.\n\nid_membranediffusing_reactant::Int64: Set to 0 if no membrane diffusing species is involved.\ncanchangerate_bypotentialenergy::Bool: Whether the reaction rate depends on reactant species potential energy.\nmembranediffusingnet_stoich::Vector{Pair{Int64, Int64}}: Pairs of membrane diffusing species index =&gt; Δcount"
  },
  {
    "objectID": "docstrings/medyan.chem_removefilament--f36888837f14bad7.html",
    "href": "docstrings/medyan.chem_removefilament--f36888837f14bad7.html",
    "title": "MEDYAN.chem_removefilament!",
    "section": "",
    "text": "chem_removefilament!(c::Context; ftid=1, fid=maximum(filtype_fil_ids(c, ftid)))\nRemove the filament with type id ftid and id fid.\nBy default the last added filament with type id ftid is removed.\nWarn if any monomers on the filament are referenced by any link2mons, and remove those link2mons.\nThe warning can be disabled by passing keyword argument warniflink_2mon_removed=false"
  },
  {
    "objectID": "docstrings/medyan.chem_removefilament--f36888837f14bad7.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.chem_removefilament--f36888837f14bad7.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.chem_removefilament!",
    "section": "",
    "text": "chem_removefilament!(c::Context; ftid=1, fid=maximum(filtype_fil_ids(c, ftid)))\nRemove the filament with type id ftid and id fid.\nBy default the last added filament with type id ftid is removed.\nWarn if any monomers on the filament are referenced by any link2mons, and remove those link2mons.\nThe warning can be disabled by passing keyword argument warniflink_2mon_removed=false"
  },
  {
    "objectID": "docstrings/medyan.grididat-8671e01413346deb.html",
    "href": "docstrings/medyan.grididat-8671e01413346deb.html",
    "title": "MEDYAN.grididat",
    "section": "",
    "text": "grididat(grid::CubicGrid, location)\nReturn the grid id of location The origin is in the center. Returns a close by voxel if out of the grid"
  },
  {
    "objectID": "docstrings/medyan.grididat-8671e01413346deb.html#tuple-medyan.cubicgrid--any--1be3c03f7960c1a3",
    "href": "docstrings/medyan.grididat-8671e01413346deb.html#tuple-medyan.cubicgrid--any--1be3c03f7960c1a3",
    "title": "MEDYAN.grididat",
    "section": "",
    "text": "grididat(grid::CubicGrid, location)\nReturn the grid id of location The origin is in the center. Returns a close by voxel if out of the grid"
  },
  {
    "objectID": "docstrings/medyan.fil_node_mon_ids-b1d3d66a81296343.html",
    "href": "docstrings/medyan.fil_node_mon_ids-b1d3d66a81296343.html",
    "title": "MEDYAN.fil_node_mon_ids",
    "section": "",
    "text": "fil_node_mon_ids(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; Vector{Int64}\nReturn the node monomer ids of the filament.\nThe fil_node_mon_ids are the monomer ids at (slightly plus side of) the fil_node_positions\n                                 |\n                      -----+-----|-----+-----\n  minus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                      -----+-----|-----+-----\n                                 |\n                                 ^ A node position is indicated by the line.\n\nThe monomer id with parenthesis (M) will in `fil_node_mon_ids`\nThe first monomer id is the first monomer id on the filament. The last monomer id is the last monomer id on the filament + 1"
  },
  {
    "objectID": "docstrings/medyan.fil_node_mon_ids-b1d3d66a81296343.html#tuple-medyan.context--int64--int64--481ec25ee4de4849",
    "href": "docstrings/medyan.fil_node_mon_ids-b1d3d66a81296343.html#tuple-medyan.context--int64--int64--481ec25ee4de4849",
    "title": "MEDYAN.fil_node_mon_ids",
    "section": "",
    "text": "fil_node_mon_ids(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; Vector{Int64}\nReturn the node monomer ids of the filament.\nThe fil_node_mon_ids are the monomer ids at (slightly plus side of) the fil_node_positions\n                                 |\n                      -----+-----|-----+-----\n  minus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                      -----+-----|-----+-----\n                                 |\n                                 ^ A node position is indicated by the line.\n\nThe monomer id with parenthesis (M) will in `fil_node_mon_ids`\nThe first monomer id is the first monomer id on the filament. The last monomer id is the last monomer id on the filament + 1"
  },
  {
    "objectID": "docstrings/medyan.agentnames-948e6a24b4fb0cb5.html",
    "href": "docstrings/medyan.agentnames-948e6a24b4fb0cb5.html",
    "title": "MEDYAN.AgentNames",
    "section": "",
    "text": "The names of the agents in a simulation\n\ndiffusingspeciesnames::Vector{Symbol}\nbulkspeciesnames::Vector{Symbol}\nmembranediffusingspeciesnames::Vector{Symbol}\nfixedspeciesnames::Vector{Symbol}\nfilamentnames::Vector{Tuple{Symbol, Vector{Symbol}}}\nvertexnames::Vector{Symbol}\nlink_2mon_names::Vector{Symbol}\ncadherinnames::Vector{Symbol}"
  },
  {
    "objectID": "docstrings/medyan.agentnames-948e6a24b4fb0cb5.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.agentnames-948e6a24b4fb0cb5.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.AgentNames",
    "section": "",
    "text": "The names of the agents in a simulation\n\ndiffusingspeciesnames::Vector{Symbol}\nbulkspeciesnames::Vector{Symbol}\nmembranediffusingspeciesnames::Vector{Symbol}\nfixedspeciesnames::Vector{Symbol}\nfilamentnames::Vector{Tuple{Symbol, Vector{Symbol}}}\nvertexnames::Vector{Symbol}\nlink_2mon_names::Vector{Symbol}\ncadherinnames::Vector{Symbol}"
  },
  {
    "objectID": "docstrings/medyan.chem_polymerize--7a5e88ac36e4ccbf.html",
    "href": "docstrings/medyan.chem_polymerize--7a5e88ac36e4ccbf.html",
    "title": "MEDYAN.chem_polymerize!",
    "section": "",
    "text": "chem_polymerize!(c::Context, ftid, fid, isminusend::Bool, newstate::MonomerState)\nAdd a monomer with state newstate to the end of the filament with type id ftid and id fid.\nIf isminusend is true add the monomer to the minus end of the filament, if false add it to the plus end of the filament.\nThis doesn’t affect the other monomer states, positions, linked link_2mons, or change any of the monomer names. New monomers are not linkable until after minimization."
  },
  {
    "objectID": "docstrings/medyan.chem_polymerize--7a5e88ac36e4ccbf.html#tuple-medyan.context--int64--int64--bool--uint8--2818fd698d9808ef",
    "href": "docstrings/medyan.chem_polymerize--7a5e88ac36e4ccbf.html#tuple-medyan.context--int64--int64--bool--uint8--2818fd698d9808ef",
    "title": "MEDYAN.chem_polymerize!",
    "section": "",
    "text": "chem_polymerize!(c::Context, ftid, fid, isminusend::Bool, newstate::MonomerState)\nAdd a monomer with state newstate to the end of the filament with type id ftid and id fid.\nIf isminusend is true add the monomer to the minus end of the filament, if false add it to the plus end of the filament.\nThis doesn’t affect the other monomer states, positions, linked link_2mons, or change any of the monomer names. New monomers are not linkable until after minimization."
  },
  {
    "objectID": "docstrings/medyan.chem_setlink_2mon_state--82213403237b28e5.html",
    "href": "docstrings/medyan.chem_setlink_2mon_state--82213403237b28e5.html",
    "title": "MEDYAN.chem_setlink_2mon_state!",
    "section": "",
    "text": "chem_setlink_2mon_state!(c::Context, ltid, lid, link_2mon_state::Link2MonState)\nSet link2monstate of the link_2mon of type id ltid with id lid.\nError if the specified link_2mon doesn’t exist."
  },
  {
    "objectID": "docstrings/medyan.chem_setlink_2mon_state--82213403237b28e5.html#tuple-medyan.context--any--any--medyan.link2monstate--05f3ca4b015e615e",
    "href": "docstrings/medyan.chem_setlink_2mon_state--82213403237b28e5.html#tuple-medyan.context--any--any--medyan.link2monstate--05f3ca4b015e615e",
    "title": "MEDYAN.chem_setlink_2mon_state!",
    "section": "",
    "text": "chem_setlink_2mon_state!(c::Context, ltid, lid, link_2mon_state::Link2MonState)\nSet link2monstate of the link_2mon of type id ltid with id lid.\nError if the specified link_2mon doesn’t exist."
  },
  {
    "objectID": "docstrings/base.empty--418304748816268d.html",
    "href": "docstrings/base.empty--418304748816268d.html",
    "title": "Base.empty!",
    "section": "",
    "text": "Clear all index records.\n\n\n\n\n\n\n\n\n\n\n\n\nempty!(c::Context)\nRemove all filaments, membranes, link_2mons, cadherins, diffusing species, fixed species, bulk species, chemboundary, and mechboundary."
  },
  {
    "objectID": "docstrings/base.empty--418304748816268d.html#tuple-medyan.stableindex--aec9c239cf42c0b9",
    "href": "docstrings/base.empty--418304748816268d.html#tuple-medyan.stableindex--aec9c239cf42c0b9",
    "title": "Base.empty!",
    "section": "",
    "text": "Clear all index records."
  },
  {
    "objectID": "docstrings/base.empty--418304748816268d.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/base.empty--418304748816268d.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "Base.empty!",
    "section": "",
    "text": "empty!(c::Context)\nRemove all filaments, membranes, link_2mons, cadherins, diffusing species, fixed species, bulk species, chemboundary, and mechboundary."
  },
  {
    "objectID": "docstrings/medyan.decimated2monsiteminanglerange-fc006e574376cfff.html",
    "href": "docstrings/medyan.decimated2monsiteminanglerange-fc006e574376cfff.html",
    "title": "MEDYAN.Decimated2MonSiteMinAngleRange",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate and if both the angles between the filaments and line between the pair are greater than acos(cosminangle) for example if cosminangle is 1, all angles are ok, if cosminangle is sqrt(2)/2, and the line between the pair of monomers is parallel or anti parallel to either filament, it won’t be linkable.\nThis can be used to prevent link_2mons from binding both ends to the same filament.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64\ncosminangle::Float64"
  },
  {
    "objectID": "docstrings/medyan.decimated2monsiteminanglerange-fc006e574376cfff.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.decimated2monsiteminanglerange-fc006e574376cfff.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Decimated2MonSiteMinAngleRange",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate and if both the angles between the filaments and line between the pair are greater than acos(cosminangle) for example if cosminangle is 1, all angles are ok, if cosminangle is sqrt(2)/2, and the line between the pair of monomers is parallel or anti parallel to either filament, it won’t be linkable.\nThis can be used to prevent link_2mons from binding both ends to the same filament.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64\ncosminangle::Float64"
  },
  {
    "objectID": "docstrings/medyan.adapt_membranes--1d26092defd0f4fa.html",
    "href": "docstrings/medyan.adapt_membranes--1d26092defd0f4fa.html",
    "title": "MEDYAN.adapt_membranes!",
    "section": "",
    "text": "Remesh all membrane meshes."
  },
  {
    "objectID": "docstrings/medyan.adapt_membranes--1d26092defd0f4fa.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.adapt_membranes--1d26092defd0f4fa.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.adapt_membranes!",
    "section": "",
    "text": "Remesh all membrane meshes."
  },
  {
    "objectID": "docstrings/medyan.fil_mon_states-3db9714621903b78.html",
    "href": "docstrings/medyan.fil_mon_states-3db9714621903b78.html",
    "title": "MEDYAN.fil_mon_states",
    "section": "",
    "text": "fil_mon_states(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; OffsetArrays.OffsetVector{UInt8, Vector{UInt8}}\nReturn a read only OffsetVector of monomer states on a filament.\nThis can be invalid after any mutations to context, so copy if needed."
  },
  {
    "objectID": "docstrings/medyan.fil_mon_states-3db9714621903b78.html#tuple-medyan.context--int64--int64--481ec25ee4de4849",
    "href": "docstrings/medyan.fil_mon_states-3db9714621903b78.html#tuple-medyan.context--int64--int64--481ec25ee4de4849",
    "title": "MEDYAN.fil_mon_states",
    "section": "",
    "text": "fil_mon_states(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; OffsetArrays.OffsetVector{UInt8, Vector{UInt8}}\nReturn a read only OffsetVector of monomer states on a filament.\nThis can be invalid after any mutations to context, so copy if needed."
  },
  {
    "objectID": "docstrings/medyan.boundary-f1e7be79002a27f8.html",
    "href": "docstrings/medyan.boundary-f1e7be79002a27f8.html",
    "title": "MEDYAN.Boundary",
    "section": "",
    "text": "Mechanical boundary\nSee also boundary_box\n\nplanes::Vector{StaticArraysCore.SVector{4, Float64}}: Planes that make up the mechanical boundary of the simulation.\nE = 1//2 * relu(pos ⋅ planes[bi][1:3] - planes[bi][4])^2\nFor example, a mech bounding plane [1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 1 pN/nm.\n2.0*[1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 4 pN/nm.\ncapsules::Vector{StaticArraysCore.SVector{8, Float64}}: Capsules that make up the mechanical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is the spring constant (pN/nm).\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\nE = 1//2*k*relu(d - r0)^2 where:\n\nd is the distance of the point to the spine line segment described by capsules[bi][1:6].\nr0 is capsules[bi][7]\nk is capsules[bi][8]"
  },
  {
    "objectID": "docstrings/medyan.boundary-f1e7be79002a27f8.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.boundary-f1e7be79002a27f8.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Boundary",
    "section": "",
    "text": "Mechanical boundary\nSee also boundary_box\n\nplanes::Vector{StaticArraysCore.SVector{4, Float64}}: Planes that make up the mechanical boundary of the simulation.\nE = 1//2 * relu(pos ⋅ planes[bi][1:3] - planes[bi][4])^2\nFor example, a mech bounding plane [1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 1 pN/nm.\n2.0*[1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 4 pN/nm.\ncapsules::Vector{StaticArraysCore.SVector{8, Float64}}: Capsules that make up the mechanical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is the spring constant (pN/nm).\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\nE = 1//2*k*relu(d - r0)^2 where:\n\nd is the distance of the point to the spine line segment described by capsules[bi][1:6].\nr0 is capsules[bi][7]\nk is capsules[bi][8]"
  },
  {
    "objectID": "docstrings/medyan.newfilament_rand--432ec27232aad41e.html",
    "href": "docstrings/medyan.newfilament_rand--432ec27232aad41e.html",
    "title": "MEDYAN.newfilament_rand!",
    "section": "",
    "text": "newfilament_rand!(c::Context, monomerstates; iterations = 10^9, ftid = 1)\nAdd a filament with type id ftid to the Context with random center position and direction.\nReturn the filament id of a new filament.\nmonomerstates is a collection of the MonomerState of the monomers in the new filament.\nThe filament will be inside the mech boundary.\nErrors if it fails to add a filament.\nThe monomer are spaced by the value in the filament type’s mechanical parameters."
  },
  {
    "objectID": "docstrings/medyan.newfilament_rand--432ec27232aad41e.html#tuple-medyan.context--any--86fc06bb8cbd13e8",
    "href": "docstrings/medyan.newfilament_rand--432ec27232aad41e.html#tuple-medyan.context--any--86fc06bb8cbd13e8",
    "title": "MEDYAN.newfilament_rand!",
    "section": "",
    "text": "newfilament_rand!(c::Context, monomerstates; iterations = 10^9, ftid = 1)\nAdd a filament with type id ftid to the Context with random center position and direction.\nReturn the filament id of a new filament.\nmonomerstates is a collection of the MonomerState of the monomers in the new filament.\nThe filament will be inside the mech boundary.\nErrors if it fails to add a filament.\nThe monomer are spaced by the value in the filament type’s mechanical parameters."
  },
  {
    "objectID": "docstrings/base.length-7ea31a421de7d258.html",
    "href": "docstrings/base.length-7ea31a421de7d258.html",
    "title": "Base.length",
    "section": "",
    "text": "Total number of IDs in use.\n\n\n\n\n\n\n\n\n\n\n\n\nBase.length(grid::CubicGrid)\nTotal number of compartments in the grid"
  },
  {
    "objectID": "docstrings/base.length-7ea31a421de7d258.html#tuple-medyan.stableindex--aec9c239cf42c0b9",
    "href": "docstrings/base.length-7ea31a421de7d258.html#tuple-medyan.stableindex--aec9c239cf42c0b9",
    "title": "Base.length",
    "section": "",
    "text": "Total number of IDs in use."
  },
  {
    "objectID": "docstrings/base.length-7ea31a421de7d258.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "href": "docstrings/base.length-7ea31a421de7d258.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "title": "Base.length",
    "section": "",
    "text": "Base.length(grid::CubicGrid)\nTotal number of compartments in the grid"
  },
  {
    "objectID": "docstrings/src/mon_link_2mon_sites.html",
    "href": "docstrings/src/mon_link_2mon_sites.html",
    "title": "src/mon_link_2mon_sites.jl",
    "section": "",
    "text": "Always returns 1.0"
  },
  {
    "objectID": "docstrings/src/mon_link_2mon_sites.html#medyan.monlink2monsiteone-77707f45e082c27e",
    "href": "docstrings/src/mon_link_2mon_sites.html#medyan.monlink2monsiteone-77707f45e082c27e",
    "title": "src/mon_link_2mon_sites.jl",
    "section": "",
    "text": "Always returns 1.0"
  },
  {
    "objectID": "docstrings/src/decimated_2mon_sites.html",
    "href": "docstrings/src/decimated_2mon_sites.html",
    "title": "src/decimated_2mon_sites.jl",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64\n\n\n\n\n\n\n\n\n\n\n\n\n\nAny pair within max to min range are linkable if they have matching state with minusstate and plusstate and if both the angles between the filaments and line between the pair are greater than acos(cosminangle) for example if cosminangle is 1, all angles are ok, if cosminangle is sqrt(2)/2, and the line between the pair of monomers is parallel or anti parallel to either filament, it won’t be linkable.\nThis can be used to prevent link_2mons from binding both ends to the same filament.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64\ncosminangle::Float64"
  },
  {
    "objectID": "docstrings/src/decimated_2mon_sites.html#medyan.decimated2monsiterange-8afd8f3188bbcd4a",
    "href": "docstrings/src/decimated_2mon_sites.html#medyan.decimated2monsiterange-8afd8f3188bbcd4a",
    "title": "src/decimated_2mon_sites.jl",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64"
  },
  {
    "objectID": "docstrings/src/decimated_2mon_sites.html#medyan.decimated2monsiteminanglerange-fc006e574376cfff",
    "href": "docstrings/src/decimated_2mon_sites.html#medyan.decimated2monsiteminanglerange-fc006e574376cfff",
    "title": "src/decimated_2mon_sites.jl",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate and if both the angles between the filaments and line between the pair are greater than acos(cosminangle) for example if cosminangle is 1, all angles are ok, if cosminangle is sqrt(2)/2, and the line between the pair of monomers is parallel or anti parallel to either filament, it won’t be linkable.\nThis can be used to prevent link_2mons from binding both ends to the same filament.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64\ncosminangle::Float64"
  },
  {
    "objectID": "docstrings/src/link_2mon_sites.html",
    "href": "docstrings/src/link_2mon_sites.html",
    "title": "src/link_2mon_sites.jl",
    "section": "",
    "text": "Always returns 1.0\n\n\n\n\n\n\n\n\n\n\n\n\nReturns link_2mon_state.chemstate.sitecount\n\n\n\n\n\n\n\n\n\n\n\n\nReturns 1.0 if the monomer states match, otherwise, returns 0.0.\n\nminusstate::Tuple{UInt8, UInt8, UInt8}: minus end monomer state\nplusstate::Tuple{UInt8, UInt8, UInt8}: plus end monomer state\n\n\n\n\n\n\n\n\n\n\n\n\n\nModels unbinding rates based on the following exponential form of Bell et al, 1978: min(k0*exp(f/f0), kmax) Where f is the magnitude of the force. So as to exponetially increase the unbinding with more force.\nlink_2mon_sitecount returns the unbinding rate in units of 1/s It returns k0 if the link_2mon hasn’t been minimized yet.\n\nf0::Float64: The charicteristic force magnitude. Units of pN\nk0::Float64: Unbinding rate at zero force. Units of 1/s\nkmax::Float64: Maximum rate. Units of 1/s\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe catch-bond nature of myosin unbinding with multiple heads. Adopted from the results of Erdmann et al. 2013. The parallel cluster model.\nAs the force increases, the motor unbinding rate decreases to a minimum of k0/10\nlink_2mon_sitecount returns the unbinding rate in units of 1/s It returns k0 if the link2mon hasn’t been minimized yet. It assumes link2monstate.chemstate.numHeads exists for the link2mon.\n\nf0::Float64: single head characteristic unbinding force, units of pN/head\nonRate::Float64: single head binding rate, units of 1/s\noffRate::Float64: single head unbinding rate, units of 1/s\nβ::Float64: slope of head binding, units of (head)/(pN/head)\n\n\n\n\n\n\n\n\n\n\n\n\n\nModels myosin walking rates from the results of Erdmann et al. 2013. The parallel cluster model.\nAs the motor work per step increases, its walking rate goes to zero.\nReturns the walking rate of one end. The callback can then sample which end to move, or reject the move.\n\nfs::Float64: The stall force magnitude. Units of pN\nk0::Float64: Walking rate of one end at zero force. Units of 1/s\nα::Float64: Positive dimensionless parameter defining the steepness of the curve, smaller is more steep, if α is inf, the curve is linear\nwalking_direction::Int32: Motor walking direction, +1 is towards plus end, -1 is towards minus end\nisminusend::Bool: which motor end does this represent"
  },
  {
    "objectID": "docstrings/src/link_2mon_sites.html#medyan.link2monsiteone-9886bc1476194731",
    "href": "docstrings/src/link_2mon_sites.html#medyan.link2monsiteone-9886bc1476194731",
    "title": "src/link_2mon_sites.jl",
    "section": "",
    "text": "Always returns 1.0"
  },
  {
    "objectID": "docstrings/src/link_2mon_sites.html#medyan.link2monsitecount-ab4fcc1eb50c2313",
    "href": "docstrings/src/link_2mon_sites.html#medyan.link2monsitecount-ab4fcc1eb50c2313",
    "title": "src/link_2mon_sites.jl",
    "section": "",
    "text": "Returns link_2mon_state.chemstate.sitecount"
  },
  {
    "objectID": "docstrings/src/link_2mon_sites.html#medyan.link2monsitemonomerstatematch-c495443de74016ce",
    "href": "docstrings/src/link_2mon_sites.html#medyan.link2monsitemonomerstatematch-c495443de74016ce",
    "title": "src/link_2mon_sites.jl",
    "section": "",
    "text": "Returns 1.0 if the monomer states match, otherwise, returns 0.0.\n\nminusstate::Tuple{UInt8, UInt8, UInt8}: minus end monomer state\nplusstate::Tuple{UInt8, UInt8, UInt8}: plus end monomer state"
  },
  {
    "objectID": "docstrings/src/link_2mon_sites.html#medyan.link2monsiteslipbond-2cec57cbea12864e",
    "href": "docstrings/src/link_2mon_sites.html#medyan.link2monsiteslipbond-2cec57cbea12864e",
    "title": "src/link_2mon_sites.jl",
    "section": "",
    "text": "Models unbinding rates based on the following exponential form of Bell et al, 1978: min(k0*exp(f/f0), kmax) Where f is the magnitude of the force. So as to exponetially increase the unbinding with more force.\nlink_2mon_sitecount returns the unbinding rate in units of 1/s It returns k0 if the link_2mon hasn’t been minimized yet.\n\nf0::Float64: The charicteristic force magnitude. Units of pN\nk0::Float64: Unbinding rate at zero force. Units of 1/s\nkmax::Float64: Maximum rate. Units of 1/s"
  },
  {
    "objectID": "docstrings/src/link_2mon_sites.html#medyan.link2monsitemotorcatch-0185d4c95b91e30b",
    "href": "docstrings/src/link_2mon_sites.html#medyan.link2monsitemotorcatch-0185d4c95b91e30b",
    "title": "src/link_2mon_sites.jl",
    "section": "",
    "text": "The catch-bond nature of myosin unbinding with multiple heads. Adopted from the results of Erdmann et al. 2013. The parallel cluster model.\nAs the force increases, the motor unbinding rate decreases to a minimum of k0/10\nlink_2mon_sitecount returns the unbinding rate in units of 1/s It returns k0 if the link2mon hasn’t been minimized yet. It assumes link2monstate.chemstate.numHeads exists for the link2mon.\n\nf0::Float64: single head characteristic unbinding force, units of pN/head\nonRate::Float64: single head binding rate, units of 1/s\noffRate::Float64: single head unbinding rate, units of 1/s\nβ::Float64: slope of head binding, units of (head)/(pN/head)"
  },
  {
    "objectID": "docstrings/src/link_2mon_sites.html#medyan.link2monsitemotorstall-deb10f7964d5bef9",
    "href": "docstrings/src/link_2mon_sites.html#medyan.link2monsitemotorstall-deb10f7964d5bef9",
    "title": "src/link_2mon_sites.jl",
    "section": "",
    "text": "Models myosin walking rates from the results of Erdmann et al. 2013. The parallel cluster model.\nAs the motor work per step increases, its walking rate goes to zero.\nReturns the walking rate of one end. The callback can then sample which end to move, or reject the move.\n\nfs::Float64: The stall force magnitude. Units of pN\nk0::Float64: Walking rate of one end at zero force. Units of 1/s\nα::Float64: Positive dimensionless parameter defining the steepness of the curve, smaller is more steep, if α is inf, the curve is linear\nwalking_direction::Int32: Motor walking direction, +1 is towards plus end, -1 is towards minus end\nisminusend::Bool: which motor end does this represent"
  },
  {
    "objectID": "docstrings/src/util/math/cuboidslicing.html",
    "href": "docstrings/src/util/math/cuboidslicing.html",
    "title": "src/util/math/cuboidslicing.jl",
    "section": "",
    "text": "scale the volume and area\n\n\n\n\n\n\n\n\n\nscale the volume and area by different amounts in each direction"
  },
  {
    "objectID": "docstrings/src/util/math/cuboidslicing.html#base.---a21e771ed8ea7d6f",
    "href": "docstrings/src/util/math/cuboidslicing.html#base.---a21e771ed8ea7d6f",
    "title": "src/util/math/cuboidslicing.jl",
    "section": "",
    "text": "scale the volume and area\n\n\n\n\n\n\n\n\n\nscale the volume and area by different amounts in each direction"
  },
  {
    "objectID": "docstrings/src/trajectory-io/snapshot.html",
    "href": "docstrings/src/trajectory-io/snapshot.html",
    "title": "src/trajectory-io/snapshot.jl",
    "section": "",
    "text": "load_snapshot!(c::Context,group::ZGroup)\nEmpty the context and load the state saved in the snapshot group.\nc should be constructed with the same SysDef and parameters as the Context used to create the snapshot. Trying to load a snapshot into a Context constructed with a different system or parameters may lead to unexpected results.\nSee Snapshot group for more details."
  },
  {
    "objectID": "docstrings/src/trajectory-io/snapshot.html#medyan.load_snapshot--e534be293ce74465",
    "href": "docstrings/src/trajectory-io/snapshot.html#medyan.load_snapshot--e534be293ce74465",
    "title": "src/trajectory-io/snapshot.jl",
    "section": "",
    "text": "load_snapshot!(c::Context,group::ZGroup)\nEmpty the context and load the state saved in the snapshot group.\nc should be constructed with the same SysDef and parameters as the Context used to create the snapshot. Trying to load a snapshot into a Context constructed with a different system or parameters may lead to unexpected results.\nSee Snapshot group for more details."
  },
  {
    "objectID": "docstrings/src/sys_def.html",
    "href": "docstrings/src/sys_def.html",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "The names of the agents in a simulation\n\ndiffusingspeciesnames::Vector{Symbol}\nbulkspeciesnames::Vector{Symbol}\nmembranediffusingspeciesnames::Vector{Symbol}\nfixedspeciesnames::Vector{Symbol}\nfilamentnames::Vector{Tuple{Symbol, Vector{Symbol}}}\nvertexnames::Vector{Symbol}\nlink_2mon_names::Vector{Symbol}\ncadherinnames::Vector{Symbol}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nftid::Int64: filament type id\nfid::Int64: filament id\nmid::Int64: monomer id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmembraneindex::Int64: membrane index\nvid::Int64: vertex id\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is one instance of this per link_2mon.\n\nchemstate::NamedTuple: Other state.\nmechstate::NamedTuple: Used in link_2mon force calculation.\nis_minimized::Bool: Set to true after minimization\n\n\n\n\n\n\n\n\n\n\n\n\n\nLink2mon Parameters, there is one instance of this per link2mon type\n\ndefaultstate::MEDYAN.Link2MonState\nmechparams::Any\nno_collide::Bool: if true, allows cylinders this link_2mon type connects and adjacent cylinders to clip\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is one instance of this per cadherin.\n\nchemstate::NamedTuple: Other state.\nmechstate::NamedTuple: Used in link_2mon force calculation.\nis_minimized::Bool: Set to true after minimization\n\n\n\n\n\n\n\n\n\n\n\n\n\nCadherin Parameters, there is one instance of this per cadherin type\n\ndefaultstate::MEDYAN.CadherinState\nmechparams::Any\n\n\n\n\n\n\n\n\n\n\n\n\n\nSysDef(agent_names::AgentNames)\nA mutable struct mapping names to id numbers in a simulation\n\nagent_names::MEDYAN.AgentNames\ndiffusing::MEDYAN.PropDictionary\ndiffusing_coeff::MEDYAN.PropDictionary\nbulkspecies_indexmap::MEDYAN.PropDictionary\nmembranediffusing::MEDYAN.PropDictionary\nfixedspecies::MEDYAN.PropDictionary\nfilament::MEDYAN.PropDictionary\nfilament_params::MEDYAN.PropDictionary\nvertex::MEDYAN.PropDictionary\nstate::MEDYAN.PropDictionary\nlink_2mon::MEDYAN.PropDictionary\nlink_2mon_params::MEDYAN.PropDictionary\ncadherin::MEDYAN.PropDictionary\ncadherinparams::MEDYAN.PropDictionary\nfilamentsite::MEDYAN.PropDictionary\nfilamentendsite::MEDYAN.PropDictionary\nmembranesite::MEDYAN.PropDictionary: Each membrane site represents the membrane patches in each compartment together with some membrane diffusing species.\nlink_2mon_site::MEDYAN.PropDictionary\nmon_link_2mon_site::MEDYAN.PropDictionary\ndecimated_2mon_site::MEDYAN.PropDictionary\ncadherinsite::MEDYAN.PropDictionary\npossiblecadherinsite::MEDYAN.PropDictionary\nallfixedspeciesnames::Vector{String}\ncompartmentreactions::Vector{MEDYAN.CompartmentReaction}\ncompartmentreactioncallbacks::Vector{Any}\nbulkreactions::Vector{MEDYAN.BulkReaction}\nbulkreactioncallbacks::Vector{Any}: Context -&gt; Nothing\n\n\n\n\n\n\n\n\n\n\n\n\n\nadd_diffusion_coeff!(s::SysDef, diffusing_name::Symbol, diffusing_coeff::Float64)\nAdd the diffusing species to the system with diffusion coefficent in units of (nm²/s). Return s.\n\n\n\n\n\n\n\n\n\n\n\n\nadd_filament_params!(s::SysDef, filament_name::Symbol, filament_params::FilamentMechParams)\nAdd the filament parameters to the system. Return s.\nSee MEDYAN.FilamentMechParams\n\n\n\n\n\n\n\n\n\n\n\n\nadd_link_2mon!(s::SysDef,link_2mon_typename::Symbol,defaultstate::Link2MonState,mechparams;no_collide=false)\nAdd the link_2mon to the system. Return s.\nSetting no_collide to true allows cylinders this link_2mon type connects and adjacent cylinders to clip.\n\n:::\n\n## [`` MEDYAN.addfilamentsite! ``](/docstrings/medyan.addfilamentsite--eb6bfd871a21b6f4.qmd) {#medyan.addfilamentsite--eb6bfd871a21b6f4}\n:::{.callout-note appearance=\"minimal\"}\n```julia\naddfilamentsite!(s::SysDef,filamenttypename::Symbol,filamentsitename::Symbol,site)\n\n\n\n\n\n\n\n\n\n\n\n\naddfilamentendsite!(s::SysDef,filamenttypename::Symbol,filamentendsitename::Symbol,site)::SysDef\n\n\n\n\n\n\n\n\n\n\n\n\nadd_link_2mon_site!(s::SysDef,link_2mon_typename::Symbol,link_2mon_sitename::Symbol,site)::SysDef\n\n\n\n\n\n\n\n\n\n\n\n\nadd_decimated_2mon_site!(s::SysDef,decimated_2mon_sitename::Symbol,site)::SysDef\n\n\n\n\n\n\n\n\n\n\n\n\naddcadherin!(s::SysDef,cadherintypename::Symbol,defaultstate::CadherinState,mechparams). Add the cadherin to the system. Return s.\n\n\n\n\n\n\n\n\n\n\n\n\naddcadherinsite!(s::SysDef,cadherintypename::Symbol,cadherinsitename::Symbol,site)::SysDef\n\n\n\n\n\n\n\n\n\n\n\n\naddpossiblecadherinsite!(s::SysDef,possiblecadherinsitename::Symbol,site)::SysDef\n\n\n\n\n\n\n\n\n\n\n\n\naddmembranesite!(\n    s::MEDYAN.SysDef,\n    membranesitename::Symbol,\n    site\n) -&gt; MEDYAN.SysDef\nAdd a new site with a specified name. During this process, a new fixed species is created suffixed with “membranesite.”.\n\n\n\n\n\n\n\n\n\n\n\n\naddreaction!(s::SysDef,reaction::CompartmentReaction)::SysDef\n\n\n\n\n\n\n\n\n\naddreaction!(s::SysDef,reactionexpr::AbstractString,rate::Float64,invvolumepower::Int)::SysDef\nAdd a reaction to the system. Return s\nreactionexpr is a string describing the reaction stoichiometry\nreactionexpr is comprised of reactant and product parts seperated by a \"--&gt;\"\nAll whitespace characters are ignored.\nEach side is then split by \"+\" to get the species names.\nRepeated or extra \"+\" are ignored.\nA species name can be prepended by a positive integer to represent multiple copies.\n\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s) rate constants correspond to stochastic rate constants in the sense used by Gillespie (J. Comp. Phys., 1976, 22 (4)).\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\"diffusing.a + diffusing.b --&gt; diffusing.c\"\n\"diffusing.c --&gt; diffusing.a + diffusing.b\"\n\"+ + diffusing.c + --&gt; + diffusing.a + + diffusing.b + +\"\n\" --&gt; diffusing.a + diffusing.b\"\n\"diffusing.a + diffusing.b --&gt; \"\n\"diffusing.a + diffusing.a --&gt; \"\n\"2diffusing.a --&gt; \"\n\"2diffusing.a --&gt; 20diffusing.a\"\n\"diffusing.c + diffusing.b --&gt; diffusing.c + diffusing.b\"\n\"fixedspecies.rate1b --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + 23fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.g --&gt; fixedspecies.rate1b + 23fixedspecies.g\"\n\"fixedspecies.g + fixedspecies.rate1b--&gt; 2fixedspecies.rate1b + 23fixedspecies.g\"\n\"filamentsite.MT.d --&gt; filamentsite.MT.d\"\n\"filamentsite.MT.d + diffusing.a --&gt; filamentsite.MT.d\"\n\"fixedspecies.g --&gt; diffusing.a\"\n\"diffusing.a --&gt; fixedspecies.g\"\n\"filamentsite.actin.pm + diffusing.a --&gt; filamentsite.actin.pm\"\n\n\n\n\n\n\n\n\n\n\n\n\n\naddreactioncallback!(s::SysDef, reaction::CompartmentReaction, callback)::SysDef\naddreactioncallback!(s::SysDef, reactantexpr::AbstractString, rate::Float64, invvolumepower::Int, callback)::SysDef\nLike addreaction! but also adds callback. callback is called when the reaction happens with input of MEDYAN.Context and Int the compartment id where the reaction happened.\nThe reaction should normally have no net stoichiometry because the callback should handle updating species counts. If an AbstractString is passed instead of a CompartmentReaction for the reaction, that string will be parsed to determine the reactants. The net stoichiometry will be zero.\nMEDYAN.errorcheck_addcallback(callback,s::SysDef) can optionally be overloaded to add errorchecking when the callback is added.\n\n\n\n\n\n\n\n\n\nCallback for bulk reactions: Context -&gt; Nothing.\n\n\n\n\n\n\n\n\n\n\n\n\nAdd filament reaction. Return s. Add a filamentsite and reaction with callback to change the monomer state. This can be used for filament aging, filament catalyzed reactions, or simple binding reactions.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentsitename::Symbol: the new name of the filamentsite added. This can be used as a catalyst in other reactions.\nchangedstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the monomer states, the first is the states to match. The second is the new monomer states after the reaction. both should be the same length. Ordered minus end first.\ncenter::Int: Which index of changedstatenames.first is the actual location of the filamentsite. Used for determining what compartment the reaction goes in.\nreactantexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentsite.$(filamenttypename).$(filamentsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. volumefactor only applies to this reaction not any other reaction using filamentsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    filamentnames= [(:filname,[\n                            :a,\n                            :b,\n                            :c,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\naddfilament_reaction!(s, :filname, :ab,\n    [:a]=&gt;[:b], 1,\n    \"--&gt;\", 1.75E-3, 0,\n)\naddfilament_reaction!(s, :filname, :aabc,\n    [:a,:a]=&gt;[:b,:c], 2,\n    \"--&gt;\", 1.75E-3, 0,\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd filament end reaction. Return s. Add a filamentendsite and reaction with callback to change the filaments. This can be used for polymerization, depolymeriation, and changing end state.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentendsitename::Symbol: the new name of the filamentendsite added. This can be used as a catalyst in other reactions.\nisminusend::Bool: true if changing the minus end, false if changing the plus end.\nchangedendstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the end monomer states, the first is the states to match. The second is the new monomer states after the reaction. If the second has more states than the first, new monomers will be added, if the second has less, monomers will be removed. Ordered minus end first.\nspacing::Float64: Space needed at the filament end for this reaction. (nm) ratefactor= exp(-β*spacing*loadforce) where β is 1/kT, loadforce is the external force pushing axially on the end of the filament. and ratefactor affects this reaction propensity and any others using filamentendsitename\nreactionexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentendsite.$(filamenttypename).$(filamentendsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the voxel in nm³. volumefactor only applies to this reaction not any other reaction using filamentendsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    diffusingspeciesnames= [:a,],\n    filamentnames= [(:filname,[\n                            :plus,\n                            :mid,\n                            :minus,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\nmonomerspacing= 2.7\n#minus end polymerization\naddfilamentend_reaction!(s, :filname, :pm, true,\n    [:minus]=&gt;[:minus,:mid], monomerspacing,\n    \"diffusing.a --&gt;\", 10E3, 1,\n)\n#plus end depolymerization\naddfilamentend_reaction!(s, :filname, :dpp, false,\n    [:mid,:plus]=&gt;[:plus], 0.0,\n    \"--&gt; diffusing.a\", 1.75E-3, 0,\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd unbinding site, callback, and reaction. Return s.\n\n\n\ns::SysDef: the system to add to.\nlink_2mon_typename::Symbol: the link_2mon type name.\nlink_2mon_sitename::Symbol: the new name of the link_2mon_site added. This can be used as a catalyst in other reactions.\nlink_2mon_site: the link_2mon site to add.\nplusfilamenttypename::Symbol: the filament type name of the plus end.\nplusnewmonomerstatename::Symbol: the new name of the monomer state of the plus end.\nminusfilamenttypename::Symbol: the filament type name of the minus end.\nminusnewmonomerstatename::Symbol: the new name of the monomer state of the minus end.\nreactionexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + link_2mon_site.$(link_2mon_typename).$(link_2mon_sitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. volumefactor only applies to this reaction not any other reaction using link_2mon_sitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a membrane site with the corresponding reaction with callback.\nKeyword arguments:\n\ns: SysDef.\nname_newmembranesite: Symbol.\nmembranediffusingreactants: Vector of symbols as membrane reactants. 0 or 1 reactant is currently supported.\nmembranediffusingproducts: Vector of symbols as membrane products.\nreactionexpr_extra: Reaction expression for other species involved.\nrate: Float.\nchangerage_bypotentialenergy: Whether the rate is affected by potential energy.\ninvvolumepower: rate scaling with compartment volume.\n\nNotes:\n\nIf error occurs, this function does not ensure that s is unchanged."
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.agentnames-948e6a24b4fb0cb5",
    "href": "docstrings/src/sys_def.html#medyan.agentnames-948e6a24b4fb0cb5",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "The names of the agents in a simulation\n\ndiffusingspeciesnames::Vector{Symbol}\nbulkspeciesnames::Vector{Symbol}\nmembranediffusingspeciesnames::Vector{Symbol}\nfixedspeciesnames::Vector{Symbol}\nfilamentnames::Vector{Tuple{Symbol, Vector{Symbol}}}\nvertexnames::Vector{Symbol}\nlink_2mon_names::Vector{Symbol}\ncadherinnames::Vector{Symbol}"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.monomername-bb517706cb60c4f5",
    "href": "docstrings/src/sys_def.html#medyan.monomername-bb517706cb60c4f5",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "ftid::Int64: filament type id\nfid::Int64: filament id\nmid::Int64: monomer id"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.vertexname-2d87a6a86cabc4f5",
    "href": "docstrings/src/sys_def.html#medyan.vertexname-2d87a6a86cabc4f5",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "membraneindex::Int64: membrane index\nvid::Int64: vertex id"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.link2monstate-9845e7e08620ea8a",
    "href": "docstrings/src/sys_def.html#medyan.link2monstate-9845e7e08620ea8a",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "There is one instance of this per link_2mon.\n\nchemstate::NamedTuple: Other state.\nmechstate::NamedTuple: Used in link_2mon force calculation.\nis_minimized::Bool: Set to true after minimization"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.link2monparams-d960d08f0808df0c",
    "href": "docstrings/src/sys_def.html#medyan.link2monparams-d960d08f0808df0c",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "Link2mon Parameters, there is one instance of this per link2mon type\n\ndefaultstate::MEDYAN.Link2MonState\nmechparams::Any\nno_collide::Bool: if true, allows cylinders this link_2mon type connects and adjacent cylinders to clip"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.cadherinstate-0cd5353e58a90ec2",
    "href": "docstrings/src/sys_def.html#medyan.cadherinstate-0cd5353e58a90ec2",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "There is one instance of this per cadherin.\n\nchemstate::NamedTuple: Other state.\nmechstate::NamedTuple: Used in link_2mon force calculation.\nis_minimized::Bool: Set to true after minimization"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.cadherinparams-b70febdaf4c8fba5",
    "href": "docstrings/src/sys_def.html#medyan.cadherinparams-b70febdaf4c8fba5",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "Cadherin Parameters, there is one instance of this per cadherin type\n\ndefaultstate::MEDYAN.CadherinState\nmechparams::Any"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.sysdef-c0c4da7a2b3d4fef",
    "href": "docstrings/src/sys_def.html#medyan.sysdef-c0c4da7a2b3d4fef",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "SysDef(agent_names::AgentNames)\nA mutable struct mapping names to id numbers in a simulation\n\nagent_names::MEDYAN.AgentNames\ndiffusing::MEDYAN.PropDictionary\ndiffusing_coeff::MEDYAN.PropDictionary\nbulkspecies_indexmap::MEDYAN.PropDictionary\nmembranediffusing::MEDYAN.PropDictionary\nfixedspecies::MEDYAN.PropDictionary\nfilament::MEDYAN.PropDictionary\nfilament_params::MEDYAN.PropDictionary\nvertex::MEDYAN.PropDictionary\nstate::MEDYAN.PropDictionary\nlink_2mon::MEDYAN.PropDictionary\nlink_2mon_params::MEDYAN.PropDictionary\ncadherin::MEDYAN.PropDictionary\ncadherinparams::MEDYAN.PropDictionary\nfilamentsite::MEDYAN.PropDictionary\nfilamentendsite::MEDYAN.PropDictionary\nmembranesite::MEDYAN.PropDictionary: Each membrane site represents the membrane patches in each compartment together with some membrane diffusing species.\nlink_2mon_site::MEDYAN.PropDictionary\nmon_link_2mon_site::MEDYAN.PropDictionary\ndecimated_2mon_site::MEDYAN.PropDictionary\ncadherinsite::MEDYAN.PropDictionary\npossiblecadherinsite::MEDYAN.PropDictionary\nallfixedspeciesnames::Vector{String}\ncompartmentreactions::Vector{MEDYAN.CompartmentReaction}\ncompartmentreactioncallbacks::Vector{Any}\nbulkreactions::Vector{MEDYAN.BulkReaction}\nbulkreactioncallbacks::Vector{Any}: Context -&gt; Nothing"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.add_diffusion_coeff--a77d1ef833cfdedd",
    "href": "docstrings/src/sys_def.html#medyan.add_diffusion_coeff--a77d1ef833cfdedd",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "add_diffusion_coeff!(s::SysDef, diffusing_name::Symbol, diffusing_coeff::Float64)\nAdd the diffusing species to the system with diffusion coefficent in units of (nm²/s). Return s."
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.add_filament_params--74c7d0081157ca31",
    "href": "docstrings/src/sys_def.html#medyan.add_filament_params--74c7d0081157ca31",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "add_filament_params!(s::SysDef, filament_name::Symbol, filament_params::FilamentMechParams)\nAdd the filament parameters to the system. Return s.\nSee MEDYAN.FilamentMechParams"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.add_link_2mon--b801c872b8ff168a",
    "href": "docstrings/src/sys_def.html#medyan.add_link_2mon--b801c872b8ff168a",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "add_link_2mon!(s::SysDef,link_2mon_typename::Symbol,defaultstate::Link2MonState,mechparams;no_collide=false)\nAdd the link_2mon to the system. Return s.\nSetting no_collide to true allows cylinders this link_2mon type connects and adjacent cylinders to clip.\n\n:::\n\n## [`` MEDYAN.addfilamentsite! ``](/docstrings/medyan.addfilamentsite--eb6bfd871a21b6f4.qmd) {#medyan.addfilamentsite--eb6bfd871a21b6f4}\n:::{.callout-note appearance=\"minimal\"}\n```julia\naddfilamentsite!(s::SysDef,filamenttypename::Symbol,filamentsitename::Symbol,site)"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addfilamentendsite--95612d72d1fda05f",
    "href": "docstrings/src/sys_def.html#medyan.addfilamentendsite--95612d72d1fda05f",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addfilamentendsite!(s::SysDef,filamenttypename::Symbol,filamentendsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.add_link_2mon_site--b9548c4a2d23aac9",
    "href": "docstrings/src/sys_def.html#medyan.add_link_2mon_site--b9548c4a2d23aac9",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "add_link_2mon_site!(s::SysDef,link_2mon_typename::Symbol,link_2mon_sitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.add_decimated_2mon_site--ad56e7ee56067940",
    "href": "docstrings/src/sys_def.html#medyan.add_decimated_2mon_site--ad56e7ee56067940",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "add_decimated_2mon_site!(s::SysDef,decimated_2mon_sitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addcadherin--3c757785fa097c75",
    "href": "docstrings/src/sys_def.html#medyan.addcadherin--3c757785fa097c75",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addcadherin!(s::SysDef,cadherintypename::Symbol,defaultstate::CadherinState,mechparams). Add the cadherin to the system. Return s."
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addcadherinsite--9e21ac42968d0196",
    "href": "docstrings/src/sys_def.html#medyan.addcadherinsite--9e21ac42968d0196",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addcadherinsite!(s::SysDef,cadherintypename::Symbol,cadherinsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addpossiblecadherinsite--ae8586daa0b5454a",
    "href": "docstrings/src/sys_def.html#medyan.addpossiblecadherinsite--ae8586daa0b5454a",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addpossiblecadherinsite!(s::SysDef,possiblecadherinsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addmembranesite--892875b2c079002d",
    "href": "docstrings/src/sys_def.html#medyan.addmembranesite--892875b2c079002d",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addmembranesite!(\n    s::MEDYAN.SysDef,\n    membranesitename::Symbol,\n    site\n) -&gt; MEDYAN.SysDef\nAdd a new site with a specified name. During this process, a new fixed species is created suffixed with “membranesite.”."
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addreaction--da9bd35e7d1df7c3",
    "href": "docstrings/src/sys_def.html#medyan.addreaction--da9bd35e7d1df7c3",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addreaction!(s::SysDef,reaction::CompartmentReaction)::SysDef\n\n\n\n\n\n\n\n\n\naddreaction!(s::SysDef,reactionexpr::AbstractString,rate::Float64,invvolumepower::Int)::SysDef\nAdd a reaction to the system. Return s\nreactionexpr is a string describing the reaction stoichiometry\nreactionexpr is comprised of reactant and product parts seperated by a \"--&gt;\"\nAll whitespace characters are ignored.\nEach side is then split by \"+\" to get the species names.\nRepeated or extra \"+\" are ignored.\nA species name can be prepended by a positive integer to represent multiple copies.\n\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s) rate constants correspond to stochastic rate constants in the sense used by Gillespie (J. Comp. Phys., 1976, 22 (4)).\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\"diffusing.a + diffusing.b --&gt; diffusing.c\"\n\"diffusing.c --&gt; diffusing.a + diffusing.b\"\n\"+ + diffusing.c + --&gt; + diffusing.a + + diffusing.b + +\"\n\" --&gt; diffusing.a + diffusing.b\"\n\"diffusing.a + diffusing.b --&gt; \"\n\"diffusing.a + diffusing.a --&gt; \"\n\"2diffusing.a --&gt; \"\n\"2diffusing.a --&gt; 20diffusing.a\"\n\"diffusing.c + diffusing.b --&gt; diffusing.c + diffusing.b\"\n\"fixedspecies.rate1b --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + 23fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.g --&gt; fixedspecies.rate1b + 23fixedspecies.g\"\n\"fixedspecies.g + fixedspecies.rate1b--&gt; 2fixedspecies.rate1b + 23fixedspecies.g\"\n\"filamentsite.MT.d --&gt; filamentsite.MT.d\"\n\"filamentsite.MT.d + diffusing.a --&gt; filamentsite.MT.d\"\n\"fixedspecies.g --&gt; diffusing.a\"\n\"diffusing.a --&gt; fixedspecies.g\"\n\"filamentsite.actin.pm + diffusing.a --&gt; filamentsite.actin.pm\""
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addreactioncallback--9c9d46adeded2d88",
    "href": "docstrings/src/sys_def.html#medyan.addreactioncallback--9c9d46adeded2d88",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "addreactioncallback!(s::SysDef, reaction::CompartmentReaction, callback)::SysDef\naddreactioncallback!(s::SysDef, reactantexpr::AbstractString, rate::Float64, invvolumepower::Int, callback)::SysDef\nLike addreaction! but also adds callback. callback is called when the reaction happens with input of MEDYAN.Context and Int the compartment id where the reaction happened.\nThe reaction should normally have no net stoichiometry because the callback should handle updating species counts. If an AbstractString is passed instead of a CompartmentReaction for the reaction, that string will be parsed to determine the reactants. The net stoichiometry will be zero.\nMEDYAN.errorcheck_addcallback(callback,s::SysDef) can optionally be overloaded to add errorchecking when the callback is added.\n\n\n\n\n\n\n\n\n\nCallback for bulk reactions: Context -&gt; Nothing."
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addfilament_reaction--63195cbff2ab4237",
    "href": "docstrings/src/sys_def.html#medyan.addfilament_reaction--63195cbff2ab4237",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "Add filament reaction. Return s. Add a filamentsite and reaction with callback to change the monomer state. This can be used for filament aging, filament catalyzed reactions, or simple binding reactions.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentsitename::Symbol: the new name of the filamentsite added. This can be used as a catalyst in other reactions.\nchangedstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the monomer states, the first is the states to match. The second is the new monomer states after the reaction. both should be the same length. Ordered minus end first.\ncenter::Int: Which index of changedstatenames.first is the actual location of the filamentsite. Used for determining what compartment the reaction goes in.\nreactantexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentsite.$(filamenttypename).$(filamentsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. volumefactor only applies to this reaction not any other reaction using filamentsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    filamentnames= [(:filname,[\n                            :a,\n                            :b,\n                            :c,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\naddfilament_reaction!(s, :filname, :ab,\n    [:a]=&gt;[:b], 1,\n    \"--&gt;\", 1.75E-3, 0,\n)\naddfilament_reaction!(s, :filname, :aabc,\n    [:a,:a]=&gt;[:b,:c], 2,\n    \"--&gt;\", 1.75E-3, 0,\n)"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addfilamentend_reaction--83ec3db37b4e2130",
    "href": "docstrings/src/sys_def.html#medyan.addfilamentend_reaction--83ec3db37b4e2130",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "Add filament end reaction. Return s. Add a filamentendsite and reaction with callback to change the filaments. This can be used for polymerization, depolymeriation, and changing end state.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentendsitename::Symbol: the new name of the filamentendsite added. This can be used as a catalyst in other reactions.\nisminusend::Bool: true if changing the minus end, false if changing the plus end.\nchangedendstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the end monomer states, the first is the states to match. The second is the new monomer states after the reaction. If the second has more states than the first, new monomers will be added, if the second has less, monomers will be removed. Ordered minus end first.\nspacing::Float64: Space needed at the filament end for this reaction. (nm) ratefactor= exp(-β*spacing*loadforce) where β is 1/kT, loadforce is the external force pushing axially on the end of the filament. and ratefactor affects this reaction propensity and any others using filamentendsitename\nreactionexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentendsite.$(filamenttypename).$(filamentendsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the voxel in nm³. volumefactor only applies to this reaction not any other reaction using filamentendsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    diffusingspeciesnames= [:a,],\n    filamentnames= [(:filname,[\n                            :plus,\n                            :mid,\n                            :minus,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\nmonomerspacing= 2.7\n#minus end polymerization\naddfilamentend_reaction!(s, :filname, :pm, true,\n    [:minus]=&gt;[:minus,:mid], monomerspacing,\n    \"diffusing.a --&gt;\", 10E3, 1,\n)\n#plus end depolymerization\naddfilamentend_reaction!(s, :filname, :dpp, false,\n    [:mid,:plus]=&gt;[:plus], 0.0,\n    \"--&gt; diffusing.a\", 1.75E-3, 0,\n)"
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.addunbindinglink_2mon_site--76d17dbe625169cd",
    "href": "docstrings/src/sys_def.html#medyan.addunbindinglink_2mon_site--76d17dbe625169cd",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "Add unbinding site, callback, and reaction. Return s.\n\n\n\ns::SysDef: the system to add to.\nlink_2mon_typename::Symbol: the link_2mon type name.\nlink_2mon_sitename::Symbol: the new name of the link_2mon_site added. This can be used as a catalyst in other reactions.\nlink_2mon_site: the link_2mon site to add.\nplusfilamenttypename::Symbol: the filament type name of the plus end.\nplusnewmonomerstatename::Symbol: the new name of the monomer state of the plus end.\nminusfilamenttypename::Symbol: the filament type name of the minus end.\nminusnewmonomerstatename::Symbol: the new name of the monomer state of the minus end.\nreactionexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + link_2mon_site.$(link_2mon_typename).$(link_2mon_sitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. volumefactor only applies to this reaction not any other reaction using link_2mon_sitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant."
  },
  {
    "objectID": "docstrings/src/sys_def.html#medyan.add_membranesitereaction--59d1fe245302e071",
    "href": "docstrings/src/sys_def.html#medyan.add_membranesitereaction--59d1fe245302e071",
    "title": "src/sys_def.jl",
    "section": "",
    "text": "Add a membrane site with the corresponding reaction with callback.\nKeyword arguments:\n\ns: SysDef.\nname_newmembranesite: Symbol.\nmembranediffusingreactants: Vector of symbols as membrane reactants. 0 or 1 reactant is currently supported.\nmembranediffusingproducts: Vector of symbols as membrane products.\nreactionexpr_extra: Reaction expression for other species involved.\nrate: Float.\nchangerage_bypotentialenergy: Whether the rate is affected by potential energy.\ninvvolumepower: rate scaling with compartment volume.\n\nNotes:\n\nIf error occurs, this function does not ensure that s is unchanged."
  },
  {
    "objectID": "docstrings/src/sever_filament.html",
    "href": "docstrings/src/sever_filament.html",
    "title": "src/sever_filament.jl",
    "section": "",
    "text": "sever_filament!(c::Context, mon_name::MonomerName)::Int\nReturn the new filament id of the minus end filament.\nCalling this will invalidate the chem cache.\nThe split will happen between mon_name and the monomer slightly towards the minus end.\nThe plus end will keep the same fil_id, the minus end will get a new fil_id.\nThe split cannot create a filament with less than 2 monomers."
  },
  {
    "objectID": "docstrings/src/sever_filament.html#medyan.sever_filament--a0475617dc0fbf93",
    "href": "docstrings/src/sever_filament.html#medyan.sever_filament--a0475617dc0fbf93",
    "title": "src/sever_filament.jl",
    "section": "",
    "text": "sever_filament!(c::Context, mon_name::MonomerName)::Int\nReturn the new filament id of the minus end filament.\nCalling this will invalidate the chem cache.\nThe split will happen between mon_name and the monomer slightly towards the minus end.\nThe plus end will keep the same fil_id, the minus end will get a new fil_id.\nThe split cannot create a filament with less than 2 monomers."
  },
  {
    "objectID": "docstrings/src/filamentsites.html",
    "href": "docstrings/src/filamentsites.html",
    "title": "src/filamentsites.jl",
    "section": "",
    "text": "General filament site just matches monomer states\n\ncenter::Int64: index of center monomer in states\nstates::Vector{UInt8}: monomer states to match"
  },
  {
    "objectID": "docstrings/src/filamentsites.html#medyan.filamentsitegeneral-0d87ce44fed17b2c",
    "href": "docstrings/src/filamentsites.html#medyan.filamentsitegeneral-0d87ce44fed17b2c",
    "title": "src/filamentsites.jl",
    "section": "",
    "text": "General filament site just matches monomer states\n\ncenter::Int64: index of center monomer in states\nstates::Vector{UInt8}: monomer states to match"
  },
  {
    "objectID": "docstrings/src/membrane/membranesites.html",
    "href": "docstrings/src/membrane/membranesites.html",
    "title": "src/membrane/membranesites.jl",
    "section": "",
    "text": "Allows up to 1 membrane diffusing species as reactants. Also stores net stoich of membrane diffusing species.\n\nid_membranediffusing_reactant::Int64: Set to 0 if no membrane diffusing species is involved.\ncanchangerate_bypotentialenergy::Bool: Whether the reaction rate depends on reactant species potential energy.\nmembranediffusingnet_stoich::Vector{Pair{Int64, Int64}}: Pairs of membrane diffusing species index =&gt; Δcount"
  },
  {
    "objectID": "docstrings/src/membrane/membranesites.html#medyan.membranesitediffusing-66734014eb12ddb1",
    "href": "docstrings/src/membrane/membranesites.html#medyan.membranesitediffusing-66734014eb12ddb1",
    "title": "src/membrane/membranesites.jl",
    "section": "",
    "text": "Allows up to 1 membrane diffusing species as reactants. Also stores net stoich of membrane diffusing species.\n\nid_membranediffusing_reactant::Int64: Set to 0 if no membrane diffusing species is involved.\ncanchangerate_bypotentialenergy::Bool: Whether the reaction rate depends on reactant species potential energy.\nmembranediffusingnet_stoich::Vector{Pair{Int64, Int64}}: Pairs of membrane diffusing species index =&gt; Δcount"
  },
  {
    "objectID": "docstrings/medyan.mon_3states-6c16efb303a60058.html",
    "href": "docstrings/medyan.mon_3states-6c16efb303a60058.html",
    "title": "MEDYAN.mon_3states",
    "section": "",
    "text": "mon_3states(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Tuple{UInt8, UInt8, UInt8}\nReturn a tuple of three monomer states centered at a monomer.\nIf a monomer doesn’t exist, its state will be zero. The filament must exist."
  },
  {
    "objectID": "docstrings/medyan.mon_3states-6c16efb303a60058.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "href": "docstrings/medyan.mon_3states-6c16efb303a60058.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "title": "MEDYAN.mon_3states",
    "section": "",
    "text": "mon_3states(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Tuple{UInt8, UInt8, UInt8}\nReturn a tuple of three monomer states centered at a monomer.\nIf a monomer doesn’t exist, its state will be zero. The filament must exist."
  },
  {
    "objectID": "docstrings/medyan.cadherinparams-b70febdaf4c8fba5.html",
    "href": "docstrings/medyan.cadherinparams-b70febdaf4c8fba5.html",
    "title": "MEDYAN.CadherinParams",
    "section": "",
    "text": "Cadherin Parameters, there is one instance of this per cadherin type\n\ndefaultstate::MEDYAN.CadherinState\nmechparams::Any"
  },
  {
    "objectID": "docstrings/medyan.cadherinparams-b70febdaf4c8fba5.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.cadherinparams-b70febdaf4c8fba5.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.CadherinParams",
    "section": "",
    "text": "Cadherin Parameters, there is one instance of this per cadherin type\n\ndefaultstate::MEDYAN.CadherinState\nmechparams::Any"
  },
  {
    "objectID": "docstrings/medyan.add_membranesitereaction--59d1fe245302e071.html",
    "href": "docstrings/medyan.add_membranesitereaction--59d1fe245302e071.html",
    "title": "MEDYAN.add_membranesitereaction!",
    "section": "",
    "text": "Add a membrane site with the corresponding reaction with callback.\nKeyword arguments:\n\ns: SysDef.\nname_newmembranesite: Symbol.\nmembranediffusingreactants: Vector of symbols as membrane reactants. 0 or 1 reactant is currently supported.\nmembranediffusingproducts: Vector of symbols as membrane products.\nreactionexpr_extra: Reaction expression for other species involved.\nrate: Float.\nchangerage_bypotentialenergy: Whether the rate is affected by potential energy.\ninvvolumepower: rate scaling with compartment volume.\n\nNotes:\n\nIf error occurs, this function does not ensure that s is unchanged."
  },
  {
    "objectID": "docstrings/medyan.add_membranesitereaction--59d1fe245302e071.html#tuple---3937a4f1811c9dc1",
    "href": "docstrings/medyan.add_membranesitereaction--59d1fe245302e071.html#tuple---3937a4f1811c9dc1",
    "title": "MEDYAN.add_membranesitereaction!",
    "section": "",
    "text": "Add a membrane site with the corresponding reaction with callback.\nKeyword arguments:\n\ns: SysDef.\nname_newmembranesite: Symbol.\nmembranediffusingreactants: Vector of symbols as membrane reactants. 0 or 1 reactant is currently supported.\nmembranediffusingproducts: Vector of symbols as membrane products.\nreactionexpr_extra: Reaction expression for other species involved.\nrate: Float.\nchangerage_bypotentialenergy: Whether the rate is affected by potential energy.\ninvvolumepower: rate scaling with compartment volume.\n\nNotes:\n\nIf error occurs, this function does not ensure that s is unchanged."
  },
  {
    "objectID": "docstrings/medyan.fil_num_unmin_ends-813ffc641f9ac9da.html",
    "href": "docstrings/medyan.fil_num_unmin_ends-813ffc641f9ac9da.html",
    "title": "MEDYAN.fil_num_unmin_ends",
    "section": "",
    "text": "fil_num_unmin_ends(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; Tuple{Int64, Int64}\nReturn a tuple (minus, plus) of the number of unminimized monomers on the minus and plus end of a filament.\nThis will be reset to (0, 0) by minimize_energy!\nWhen an end is depolymerized this will decrease, but saturate at 0. When an end is polymerized this will increase.\nFor example if after minimization a filament has a plus end depolymerization, this function will return (0, 0). Then if a plus end polymerization happens, this function will return (0, 1), even though the net change in filament length is zero."
  },
  {
    "objectID": "docstrings/medyan.fil_num_unmin_ends-813ffc641f9ac9da.html#tuple-medyan.context--int64--int64--481ec25ee4de4849",
    "href": "docstrings/medyan.fil_num_unmin_ends-813ffc641f9ac9da.html#tuple-medyan.context--int64--int64--481ec25ee4de4849",
    "title": "MEDYAN.fil_num_unmin_ends",
    "section": "",
    "text": "fil_num_unmin_ends(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; Tuple{Int64, Int64}\nReturn a tuple (minus, plus) of the number of unminimized monomers on the minus and plus end of a filament.\nThis will be reset to (0, 0) by minimize_energy!\nWhen an end is depolymerized this will decrease, but saturate at 0. When an end is polymerized this will increase.\nFor example if after minimization a filament has a plus end depolymerization, this function will return (0, 0). Then if a plus end polymerization happens, this function will return (0, 1), even though the net change in filament length is zero."
  },
  {
    "objectID": "docstrings/medyan.compute_all_membrane_geometry-_system-05b4d2a32e31560c.html",
    "href": "docstrings/medyan.compute_all_membrane_geometry-_system-05b4d2a32e31560c.html",
    "title": "MEDYAN.compute_all_membrane_geometry!_system",
    "section": "",
    "text": "Updates all membrane geometries used across various parts of MEDYAN.\nThe list of all items can be found in the document for MEDYAN.compute_geometry!_system function.\nKeyword parameters:\n\ninclude_ff::Bool: If true, compute_geometry! used in energy computations will be applied as well, requiring vectorization of the membrane. This happens before system geometry computation in case some fields are overriden."
  },
  {
    "objectID": "docstrings/medyan.compute_all_membrane_geometry-_system-05b4d2a32e31560c.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.compute_all_membrane_geometry-_system-05b4d2a32e31560c.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.compute_all_membrane_geometry!_system",
    "section": "",
    "text": "Updates all membrane geometries used across various parts of MEDYAN.\nThe list of all items can be found in the document for MEDYAN.compute_geometry!_system function.\nKeyword parameters:\n\ninclude_ff::Bool: If true, compute_geometry! used in energy computations will be applied as well, requiring vectorization of the membrane. This happens before system geometry computation in case some fields are overriden."
  },
  {
    "objectID": "docstrings/base.haskey-e7d3f961991e2663.html",
    "href": "docstrings/base.haskey-e7d3f961991e2663.html",
    "title": "Base.haskey",
    "section": "",
    "text": "Whether an ID is in use."
  },
  {
    "objectID": "docstrings/base.haskey-e7d3f961991e2663.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "href": "docstrings/base.haskey-e7d3f961991e2663.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "title": "Base.haskey",
    "section": "",
    "text": "Whether an ID is in use."
  },
  {
    "objectID": "docstrings/medyan.cubicgrid-fe4b7cc2dceb0431.html",
    "href": "docstrings/medyan.cubicgrid-fe4b7cc2dceb0431.html",
    "title": "MEDYAN.CubicGrid",
    "section": "",
    "text": "CubicGrid(num_voxels::SVector{3,Int}, compartmentsize::Float64)\n\nn::StaticArraysCore.SVector{3, Int64}\ncompartmentsize::Float64"
  },
  {
    "objectID": "docstrings/medyan.cubicgrid-fe4b7cc2dceb0431.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.cubicgrid-fe4b7cc2dceb0431.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.CubicGrid",
    "section": "",
    "text": "CubicGrid(num_voxels::SVector{3,Int}, compartmentsize::Float64)\n\nn::StaticArraysCore.SVector{3, Int64}\ncompartmentsize::Float64"
  },
  {
    "objectID": "docstrings/medyan.addfilamentendsite--95612d72d1fda05f.html",
    "href": "docstrings/medyan.addfilamentendsite--95612d72d1fda05f.html",
    "title": "MEDYAN.addfilamentendsite!",
    "section": "",
    "text": "addfilamentendsite!(s::SysDef,filamenttypename::Symbol,filamentendsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.addfilamentendsite--95612d72d1fda05f.html#tuple-medyan.sysdef--symbol--symbol--any--b9a0ed342fa77751",
    "href": "docstrings/medyan.addfilamentendsite--95612d72d1fda05f.html#tuple-medyan.sysdef--symbol--symbol--any--b9a0ed342fa77751",
    "title": "MEDYAN.addfilamentendsite!",
    "section": "",
    "text": "addfilamentendsite!(s::SysDef,filamenttypename::Symbol,filamentendsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/base.iterate-5228367cd62c0bf2.html",
    "href": "docstrings/base.iterate-5228367cd62c0bf2.html",
    "title": "Base.iterate",
    "section": "",
    "text": "Iterates through valid IDs in the StableIndex."
  },
  {
    "objectID": "docstrings/base.iterate-5228367cd62c0bf2.html#tuple-medyan.stableindex--namedtuple--21f3937ad430e895",
    "href": "docstrings/base.iterate-5228367cd62c0bf2.html#tuple-medyan.stableindex--namedtuple--21f3937ad430e895",
    "title": "Base.iterate",
    "section": "",
    "text": "Iterates through valid IDs in the StableIndex."
  },
  {
    "objectID": "docstrings/medyan.refresh_chem_cache--f90ebca1f896ad2c.html",
    "href": "docstrings/medyan.refresh_chem_cache--f90ebca1f896ad2c.html",
    "title": "MEDYAN.refresh_chem_cache!",
    "section": "",
    "text": "refresh_chem_cache!(c::Context)::Nothing\nNormally this isn’t needed as it will happen automatically."
  },
  {
    "objectID": "docstrings/medyan.refresh_chem_cache--f90ebca1f896ad2c.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.refresh_chem_cache--f90ebca1f896ad2c.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.refresh_chem_cache!",
    "section": "",
    "text": "refresh_chem_cache!(c::Context)::Nothing\nNormally this isn’t needed as it will happen automatically."
  },
  {
    "objectID": "docstrings/medyan.add_link_2mon--b801c872b8ff168a.html",
    "href": "docstrings/medyan.add_link_2mon--b801c872b8ff168a.html",
    "title": "MEDYAN.add_link_2mon!",
    "section": "",
    "text": "add_link_2mon!(s::SysDef,link_2mon_typename::Symbol,defaultstate::Link2MonState,mechparams;no_collide=false)\nAdd the link_2mon to the system. Return s.\nSetting no_collide to true allows cylinders this link_2mon type connects and adjacent cylinders to clip.\n```julia"
  },
  {
    "objectID": "docstrings/medyan.add_link_2mon--b801c872b8ff168a.html#tuple-medyan.sysdef--symbol--medyan.link2monstate--any--70671ee1f7d932fe",
    "href": "docstrings/medyan.add_link_2mon--b801c872b8ff168a.html#tuple-medyan.sysdef--symbol--medyan.link2monstate--any--70671ee1f7d932fe",
    "title": "MEDYAN.add_link_2mon!",
    "section": "",
    "text": "add_link_2mon!(s::SysDef,link_2mon_typename::Symbol,defaultstate::Link2MonState,mechparams;no_collide=false)\nAdd the link_2mon to the system. Return s.\nSetting no_collide to true allows cylinders this link_2mon type connects and adjacent cylinders to clip.\n```julia"
  },
  {
    "objectID": "docstrings/medyan.randompoint-83e939bdee528294.html",
    "href": "docstrings/medyan.randompoint-83e939bdee528294.html",
    "title": "MEDYAN.randompoint",
    "section": "",
    "text": "randompoint(grid::CubicGrid,cid)::SVector{3,Float64}\nReturn a random point in a voxel Note, due to floating point rounding, there is a small chance the returned point may be in a nearby voxel.\n\n\n\n\n\n\n\n\n\n\n\n\nrandompoint(grid::CubicGrid)::SVector{3,Float64}\nReturn a random point in the grid"
  },
  {
    "objectID": "docstrings/medyan.randompoint-83e939bdee528294.html#tuple-medyan.cubicgrid--any--1be3c03f7960c1a3",
    "href": "docstrings/medyan.randompoint-83e939bdee528294.html#tuple-medyan.cubicgrid--any--1be3c03f7960c1a3",
    "title": "MEDYAN.randompoint",
    "section": "",
    "text": "randompoint(grid::CubicGrid,cid)::SVector{3,Float64}\nReturn a random point in a voxel Note, due to floating point rounding, there is a small chance the returned point may be in a nearby voxel."
  },
  {
    "objectID": "docstrings/medyan.randompoint-83e939bdee528294.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "href": "docstrings/medyan.randompoint-83e939bdee528294.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "title": "MEDYAN.randompoint",
    "section": "",
    "text": "randompoint(grid::CubicGrid)::SVector{3,Float64}\nReturn a random point in the grid"
  },
  {
    "objectID": "docstrings/medyan.vertexname-2d87a6a86cabc4f5.html",
    "href": "docstrings/medyan.vertexname-2d87a6a86cabc4f5.html",
    "title": "MEDYAN.VertexName",
    "section": "",
    "text": "membraneindex::Int64: membrane index\nvid::Int64: vertex id"
  },
  {
    "objectID": "docstrings/medyan.vertexname-2d87a6a86cabc4f5.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.vertexname-2d87a6a86cabc4f5.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.VertexName",
    "section": "",
    "text": "membraneindex::Int64: membrane index\nvid::Int64: vertex id"
  },
  {
    "objectID": "docstrings/medyan.addmembranediffusingcount_rand--7b719dca63a36b1b.html",
    "href": "docstrings/medyan.addmembranediffusingcount_rand--7b719dca63a36b1b.html",
    "title": "MEDYAN.addmembranediffusingcount_rand!",
    "section": "",
    "text": "addmembranediffusingcount_rand!(\n    c::MEDYAN.Context,\n    membraneindex::Int64,\n    speciesindex::Int64,\n    addcount::Int64\n)\nDistribute the added membrane species count randomly to membrane cells, ignoring cell area difference. Does NOT update propensity."
  },
  {
    "objectID": "docstrings/medyan.addmembranediffusingcount_rand--7b719dca63a36b1b.html#tuple-medyan.context--int64--int64--int64--c6aa1d407904887b",
    "href": "docstrings/medyan.addmembranediffusingcount_rand--7b719dca63a36b1b.html#tuple-medyan.context--int64--int64--int64--c6aa1d407904887b",
    "title": "MEDYAN.addmembranediffusingcount_rand!",
    "section": "",
    "text": "addmembranediffusingcount_rand!(\n    c::MEDYAN.Context,\n    membraneindex::Int64,\n    speciesindex::Int64,\n    addcount::Int64\n)\nDistribute the added membrane species count randomly to membrane cells, ignoring cell area difference. Does NOT update propensity."
  },
  {
    "objectID": "docstrings/medyan.filamentsitegeneral-0d87ce44fed17b2c.html",
    "href": "docstrings/medyan.filamentsitegeneral-0d87ce44fed17b2c.html",
    "title": "MEDYAN.FilamentSiteGeneral",
    "section": "",
    "text": "General filament site just matches monomer states\n\ncenter::Int64: index of center monomer in states\nstates::Vector{UInt8}: monomer states to match"
  },
  {
    "objectID": "docstrings/medyan.filamentsitegeneral-0d87ce44fed17b2c.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.filamentsitegeneral-0d87ce44fed17b2c.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.FilamentSiteGeneral",
    "section": "",
    "text": "General filament site just matches monomer states\n\ncenter::Int64: index of center monomer in states\nstates::Vector{UInt8}: monomer states to match"
  },
  {
    "objectID": "docstrings/medyan.link2monsitecount-ab4fcc1eb50c2313.html",
    "href": "docstrings/medyan.link2monsitecount-ab4fcc1eb50c2313.html",
    "title": "MEDYAN.Link2MonSiteCount",
    "section": "",
    "text": "Returns link_2mon_state.chemstate.sitecount"
  },
  {
    "objectID": "docstrings/medyan.link2monsitecount-ab4fcc1eb50c2313.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.link2monsitecount-ab4fcc1eb50c2313.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Link2MonSiteCount",
    "section": "",
    "text": "Returns link_2mon_state.chemstate.sitecount"
  },
  {
    "objectID": "docstrings/medyan.addfilamentend_reaction--83ec3db37b4e2130.html",
    "href": "docstrings/medyan.addfilamentend_reaction--83ec3db37b4e2130.html",
    "title": "MEDYAN.addfilamentend_reaction!",
    "section": "",
    "text": "Add filament end reaction. Return s. Add a filamentendsite and reaction with callback to change the filaments. This can be used for polymerization, depolymeriation, and changing end state.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentendsitename::Symbol: the new name of the filamentendsite added. This can be used as a catalyst in other reactions.\nisminusend::Bool: true if changing the minus end, false if changing the plus end.\nchangedendstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the end monomer states, the first is the states to match. The second is the new monomer states after the reaction. If the second has more states than the first, new monomers will be added, if the second has less, monomers will be removed. Ordered minus end first.\nspacing::Float64: Space needed at the filament end for this reaction. (nm) ratefactor= exp(-β*spacing*loadforce) where β is 1/kT, loadforce is the external force pushing axially on the end of the filament. and ratefactor affects this reaction propensity and any others using filamentendsitename\nreactionexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentendsite.$(filamenttypename).$(filamentendsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the voxel in nm³. volumefactor only applies to this reaction not any other reaction using filamentendsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    diffusingspeciesnames= [:a,],\n    filamentnames= [(:filname,[\n                            :plus,\n                            :mid,\n                            :minus,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\nmonomerspacing= 2.7\n#minus end polymerization\naddfilamentend_reaction!(s, :filname, :pm, true,\n    [:minus]=&gt;[:minus,:mid], monomerspacing,\n    \"diffusing.a --&gt;\", 10E3, 1,\n)\n#plus end depolymerization\naddfilamentend_reaction!(s, :filname, :dpp, false,\n    [:mid,:plus]=&gt;[:plus], 0.0,\n    \"--&gt; diffusing.a\", 1.75E-3, 0,\n)"
  },
  {
    "objectID": "docstrings/medyan.addfilamentend_reaction--83ec3db37b4e2130.html#tuple-medyan.sysdef--symbol--symbol--bool--pair-vector-symbol---vector-symbol----float64--abstractstring--float64--int64--02be6e9d6f919481",
    "href": "docstrings/medyan.addfilamentend_reaction--83ec3db37b4e2130.html#tuple-medyan.sysdef--symbol--symbol--bool--pair-vector-symbol---vector-symbol----float64--abstractstring--float64--int64--02be6e9d6f919481",
    "title": "MEDYAN.addfilamentend_reaction!",
    "section": "",
    "text": "Add filament end reaction. Return s. Add a filamentendsite and reaction with callback to change the filaments. This can be used for polymerization, depolymeriation, and changing end state.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentendsitename::Symbol: the new name of the filamentendsite added. This can be used as a catalyst in other reactions.\nisminusend::Bool: true if changing the minus end, false if changing the plus end.\nchangedendstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the end monomer states, the first is the states to match. The second is the new monomer states after the reaction. If the second has more states than the first, new monomers will be added, if the second has less, monomers will be removed. Ordered minus end first.\nspacing::Float64: Space needed at the filament end for this reaction. (nm) ratefactor= exp(-β*spacing*loadforce) where β is 1/kT, loadforce is the external force pushing axially on the end of the filament. and ratefactor affects this reaction propensity and any others using filamentendsitename\nreactionexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentendsite.$(filamenttypename).$(filamentendsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the voxel in nm³. volumefactor only applies to this reaction not any other reaction using filamentendsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    diffusingspeciesnames= [:a,],\n    filamentnames= [(:filname,[\n                            :plus,\n                            :mid,\n                            :minus,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\nmonomerspacing= 2.7\n#minus end polymerization\naddfilamentend_reaction!(s, :filname, :pm, true,\n    [:minus]=&gt;[:minus,:mid], monomerspacing,\n    \"diffusing.a --&gt;\", 10E3, 1,\n)\n#plus end depolymerization\naddfilamentend_reaction!(s, :filname, :dpp, false,\n    [:mid,:plus]=&gt;[:plus], 0.0,\n    \"--&gt; diffusing.a\", 1.75E-3, 0,\n)"
  },
  {
    "objectID": "docstrings/medyan.link2monsitemotorcatch-0185d4c95b91e30b.html",
    "href": "docstrings/medyan.link2monsitemotorcatch-0185d4c95b91e30b.html",
    "title": "MEDYAN.Link2MonSiteMotorCatch",
    "section": "",
    "text": "The catch-bond nature of myosin unbinding with multiple heads. Adopted from the results of Erdmann et al. 2013. The parallel cluster model.\nAs the force increases, the motor unbinding rate decreases to a minimum of k0/10\nlink_2mon_sitecount returns the unbinding rate in units of 1/s It returns k0 if the link2mon hasn’t been minimized yet. It assumes link2monstate.chemstate.numHeads exists for the link2mon.\n\nf0::Float64: single head characteristic unbinding force, units of pN/head\nonRate::Float64: single head binding rate, units of 1/s\noffRate::Float64: single head unbinding rate, units of 1/s\nβ::Float64: slope of head binding, units of (head)/(pN/head)"
  },
  {
    "objectID": "docstrings/medyan.link2monsitemotorcatch-0185d4c95b91e30b.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.link2monsitemotorcatch-0185d4c95b91e30b.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Link2MonSiteMotorCatch",
    "section": "",
    "text": "The catch-bond nature of myosin unbinding with multiple heads. Adopted from the results of Erdmann et al. 2013. The parallel cluster model.\nAs the force increases, the motor unbinding rate decreases to a minimum of k0/10\nlink_2mon_sitecount returns the unbinding rate in units of 1/s It returns k0 if the link2mon hasn’t been minimized yet. It assumes link2monstate.chemstate.numHeads exists for the link2mon.\n\nf0::Float64: single head characteristic unbinding force, units of pN/head\nonRate::Float64: single head binding rate, units of 1/s\noffRate::Float64: single head unbinding rate, units of 1/s\nβ::Float64: slope of head binding, units of (head)/(pN/head)"
  },
  {
    "objectID": "docstrings/medyan.chem_newfilament--7a45f2860949bee3.html",
    "href": "docstrings/medyan.chem_newfilament--7a45f2860949bee3.html",
    "title": "MEDYAN.chem_newfilament!",
    "section": "",
    "text": "chem_newfilament!(c::Context; ftid=1, monomerstates, node_mids, nodepositions)\nReturn the filament id of a new filament.\nError if the filament isn’t initially over 2 monomers long.\nNewly added filaments don’t have decimated_2mon sites, until after minimization.\n\n\n\nftid=1: filament type id.\nmonomerstates: Collection of the MonomerState of the monomers in the new filament. In order from minus end to plus end.\nlength(monomerstates)&gt;1\nnodepositions: Collection of SVector{3,Float64}. The positions of the nodes, monomers are between nodes.\nnode_mids: Collection of Integer. The monomer ids at (slightly plus side of) the nodepositions\n                               |\n                    -----+-----|-----+-----\nminus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                    -----+-----|-----+-----\n                               |\n                               ^ A nodeposition is indicated by the line.\nThe monomer id with parenthesis (M) will in node_mids\nlength(node_mids) == length(nodepositions) - 1\nendloadforces=(0.0=&gt;0.0): end load forces, usually don’t use this, because load forces will automatically get updated at the next minimization."
  },
  {
    "objectID": "docstrings/medyan.chem_newfilament--7a45f2860949bee3.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.chem_newfilament--7a45f2860949bee3.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.chem_newfilament!",
    "section": "",
    "text": "chem_newfilament!(c::Context; ftid=1, monomerstates, node_mids, nodepositions)\nReturn the filament id of a new filament.\nError if the filament isn’t initially over 2 monomers long.\nNewly added filaments don’t have decimated_2mon sites, until after minimization.\n\n\n\nftid=1: filament type id.\nmonomerstates: Collection of the MonomerState of the monomers in the new filament. In order from minus end to plus end.\nlength(monomerstates)&gt;1\nnodepositions: Collection of SVector{3,Float64}. The positions of the nodes, monomers are between nodes.\nnode_mids: Collection of Integer. The monomer ids at (slightly plus side of) the nodepositions\n                               |\n                    -----+-----|-----+-----\nminus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                    -----+-----|-----+-----\n                               |\n                               ^ A nodeposition is indicated by the line.\nThe monomer id with parenthesis (M) will in node_mids\nlength(node_mids) == length(nodepositions) - 1\nendloadforces=(0.0=&gt;0.0): end load forces, usually don’t use this, because load forces will automatically get updated at the next minimization."
  },
  {
    "objectID": "docstrings/medyan.membranespeciesparams-548fecb643fc2599.html",
    "href": "docstrings/medyan.membranespeciesparams-548fecb643fc2599.html",
    "title": "MEDYAN.MembraneSpeciesParams",
    "section": "",
    "text": "Membrane protein physical parameters.\n\ndiffusion_coeff::Float64: Membrane diffusion coefficients (nm^2/s).\narea::Float64: Protein area projected onto the surface (nm^2).\nkbend::Float64: Bending rigidity (pN nm).\neqcurv::Float64: The protein’s own spontaneous mean curvature (/nm). Can be used in bending energy computations with curvatures."
  },
  {
    "objectID": "docstrings/medyan.membranespeciesparams-548fecb643fc2599.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.membranespeciesparams-548fecb643fc2599.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.MembraneSpeciesParams",
    "section": "",
    "text": "Membrane protein physical parameters.\n\ndiffusion_coeff::Float64: Membrane diffusion coefficients (nm^2/s).\narea::Float64: Protein area projected onto the surface (nm^2).\nkbend::Float64: Bending rigidity (pN nm).\neqcurv::Float64: The protein’s own spontaneous mean curvature (/nm). Can be used in bending energy computations with curvatures."
  },
  {
    "objectID": "docstrings/medyan.addpossiblecadherinsite--ae8586daa0b5454a.html",
    "href": "docstrings/medyan.addpossiblecadherinsite--ae8586daa0b5454a.html",
    "title": "MEDYAN.addpossiblecadherinsite!",
    "section": "",
    "text": "addpossiblecadherinsite!(s::SysDef,possiblecadherinsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.addpossiblecadherinsite--ae8586daa0b5454a.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "href": "docstrings/medyan.addpossiblecadherinsite--ae8586daa0b5454a.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "title": "MEDYAN.addpossiblecadherinsite!",
    "section": "",
    "text": "addpossiblecadherinsite!(s::SysDef,possiblecadherinsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "reference/sitesinfo.html",
    "href": "reference/sitesinfo.html",
    "title": "Sites",
    "section": "",
    "text": "Abstractly, sites are an interface that allow more complex structures like filaments to interact with diffusing species and chemistry voxel reaction propensities.\nEach site type has an associated fixed species. During chemistry that fixed species count will always be greater than or equal to the total counts of the site in the chemistry voxel.\nChemistry callbacks can try and pick a random site in a chemistry voxel to get specific information about exactly where in a chemistry voxel some event should happen.\nThese are the groups of sites currently in MEDYAN.jl:\n\n\nFilament sites can only be associated with one filament type.\n\n\nA type T must implement the following functions to be a filament site.\n\n\nHow many monomer states in the plus direction this site looks at.\n\n\n\nHow many monomer states in the minus direction this site looks at.\n\n\n\nReturn site count at a monomer given states, A vector of MonomerState with length length(states) == getminusrange(filamentsite) + 1 + getplusrange(filamentsite)\nThe site count gets put in the chemistry voxel of the center monomer.\n\n\n\n\n\n\n\n\n\nMEDYAN.pickrandomfilamentsite function\nMEDYAN.Context#filamentsites field\n\n\n\nMEDYAN.SysDef#filamentsite field\nMEDYAN.addfilamentsite! function\nMEDYAN.addfilament_reaction! function\n\n\n\n\n\nFilament end sites can only be associated with one filament type.\n\n\nA type T must implement the following functions to be a filament end site.\n\n\nHow many monomer states this site looks at.\n\n\n\nTrue if the filament end site is on the minus end, false if on the plus end.\n\n\n\nReturn spacing needed for the filament end site reaction to happen, units of nm.\n\n\n\nReturn number of monomers that need to be added for the filament end site reaction to happen. Each filament has a limited number of monomers that can be added per end between minimizations given by FilamentMechParams.max_num_unmin_end. If this function returns zero, this limit is ignored for site. Also, see fil_num_unmin_ends If this function returns a number greater than zero, the site count will be zero if the current number of unminimized monomers on the end plus the added_monomers result will go over FilamentMechParams.max_num_unmin_end.\n\n\n\nReturn the filament end site count at the end of a filament with monomer states vector states The rate of filament end reaction will be modified by the brownian ratchet model:\nexp(-β*F*L) where F is the compression force on the filament end, and L is spacing(site).\nlength(states) == getrange(filamentendsite)\nThe site count gets put in the chemistry voxel of the end monomer.\n\n\n\n\n\n\n\n\n\nMEDYAN.pickrandomfilamentendsite\nMEDYAN.Context#filamentendsites field\n\n\n\nMEDYAN.SysDef#filamentendsite field\nMEDYAN.addfilamentendsite!\nMEDYAN.addfilamentend_reaction!\n\n\n\n\n\nLink_2mon sites can only be associated with one link_2mon type. They can represent propensities for reactions to happen to a link_2mon attached to two monomers, like unbinding or motor walking, or a site for a diffusing species to interact with a bound link_2mon.\n\n\nA type T must implement the following functions to be a link_2mon site.\n\n\nReturn the site count given the state of the link_2mon, the minusftid, plusftid filament type ids, the minusmonomerstates, plusmonomerstates monomer states, and the positions and orientations of the two monomers.\nminusmonomerstates and plusmonomerstates should be collections of 3 MonomerState ordered from minus to plus end, with the link_2mon attached to the center monomer.\nIf a monomer doesn’t exist, its state should be input as zero.\nThe site count gets put in the chemistry voxel of the minus end of the link_2mon.\n\n\n\n\n\n\n\n\n\nMEDYAN.pickrandomlink_2mon_site\nMEDYAN.Context#link_2mon_sites field\n\n\n\nMEDYAN.SysDef#link_2mon_site field\nMEDYAN.add_link_2mon_site!\n\n\n\n\n\nDecimated_2mon sites represent a potential link between two monomers, potentially on two different filaments. The site count is added to the chemistry voxel of the potential monomer that could attach to the minus end of the link_2mon.\n\n\nA type T must implement the following functions to be a decimated_2mon site.\n\n\nReturn the maximum distance in nm of a decimated_2mon site.\n\n\n\nReturn the maximum decimated_2mon_sitecount will return given a pair of monomers in_linking_range.\n\n\n\nReturn if two monomers are in range to possibly link in the forward direction, and if they are in range to possibly link in the reverse direction.\n\n\n\nReturn the filament types of the minus and plus monomers.\n\n\n\nReturn the monomer step size starting with mid 0 in the search for potential decimated_2mon sites on the minus and plus ends respectively.\n1 searches every monomer. 2 searches every monomer with even mid …\nIf the plus and minus filament types are the same, then getmidsteps(site)[1] == getmidsteps(site)[2]\n\n\n\nReturn the site count of two monomers getting linked given their states, their positions, and their plus vectors. The monomers can be assumed to be in_linking_range, from the correct filament types, and at the correct step.\n\n\n\n\n\n\n\n\n\nMEDYAN.pickrandom_decimated_2mon_site\nMEDYAN.Context#decimated_2mon_sites field\n\n\n\nMEDYAN.SysDef#decimated_2mon_site field\nMEDYAN.add_decimated_2mon_site!",
    "crumbs": [
      "Reference",
      "Sites"
    ]
  },
  {
    "objectID": "reference/sitesinfo.html#filament-sites",
    "href": "reference/sitesinfo.html#filament-sites",
    "title": "Sites",
    "section": "",
    "text": "Filament sites can only be associated with one filament type.\n\n\nA type T must implement the following functions to be a filament site.\n\n\nHow many monomer states in the plus direction this site looks at.\n\n\n\nHow many monomer states in the minus direction this site looks at.\n\n\n\nReturn site count at a monomer given states, A vector of MonomerState with length length(states) == getminusrange(filamentsite) + 1 + getplusrange(filamentsite)\nThe site count gets put in the chemistry voxel of the center monomer.\n\n\n\n\n\n\n\n\n\nMEDYAN.pickrandomfilamentsite function\nMEDYAN.Context#filamentsites field\n\n\n\nMEDYAN.SysDef#filamentsite field\nMEDYAN.addfilamentsite! function\nMEDYAN.addfilament_reaction! function",
    "crumbs": [
      "Reference",
      "Sites"
    ]
  },
  {
    "objectID": "reference/sitesinfo.html#filament-end-sites",
    "href": "reference/sitesinfo.html#filament-end-sites",
    "title": "Sites",
    "section": "",
    "text": "Filament end sites can only be associated with one filament type.\n\n\nA type T must implement the following functions to be a filament end site.\n\n\nHow many monomer states this site looks at.\n\n\n\nTrue if the filament end site is on the minus end, false if on the plus end.\n\n\n\nReturn spacing needed for the filament end site reaction to happen, units of nm.\n\n\n\nReturn number of monomers that need to be added for the filament end site reaction to happen. Each filament has a limited number of monomers that can be added per end between minimizations given by FilamentMechParams.max_num_unmin_end. If this function returns zero, this limit is ignored for site. Also, see fil_num_unmin_ends If this function returns a number greater than zero, the site count will be zero if the current number of unminimized monomers on the end plus the added_monomers result will go over FilamentMechParams.max_num_unmin_end.\n\n\n\nReturn the filament end site count at the end of a filament with monomer states vector states The rate of filament end reaction will be modified by the brownian ratchet model:\nexp(-β*F*L) where F is the compression force on the filament end, and L is spacing(site).\nlength(states) == getrange(filamentendsite)\nThe site count gets put in the chemistry voxel of the end monomer.\n\n\n\n\n\n\n\n\n\nMEDYAN.pickrandomfilamentendsite\nMEDYAN.Context#filamentendsites field\n\n\n\nMEDYAN.SysDef#filamentendsite field\nMEDYAN.addfilamentendsite!\nMEDYAN.addfilamentend_reaction!",
    "crumbs": [
      "Reference",
      "Sites"
    ]
  },
  {
    "objectID": "reference/sitesinfo.html#link_2mon-sites",
    "href": "reference/sitesinfo.html#link_2mon-sites",
    "title": "Sites",
    "section": "",
    "text": "Link_2mon sites can only be associated with one link_2mon type. They can represent propensities for reactions to happen to a link_2mon attached to two monomers, like unbinding or motor walking, or a site for a diffusing species to interact with a bound link_2mon.\n\n\nA type T must implement the following functions to be a link_2mon site.\n\n\nReturn the site count given the state of the link_2mon, the minusftid, plusftid filament type ids, the minusmonomerstates, plusmonomerstates monomer states, and the positions and orientations of the two monomers.\nminusmonomerstates and plusmonomerstates should be collections of 3 MonomerState ordered from minus to plus end, with the link_2mon attached to the center monomer.\nIf a monomer doesn’t exist, its state should be input as zero.\nThe site count gets put in the chemistry voxel of the minus end of the link_2mon.\n\n\n\n\n\n\n\n\n\nMEDYAN.pickrandomlink_2mon_site\nMEDYAN.Context#link_2mon_sites field\n\n\n\nMEDYAN.SysDef#link_2mon_site field\nMEDYAN.add_link_2mon_site!",
    "crumbs": [
      "Reference",
      "Sites"
    ]
  },
  {
    "objectID": "reference/sitesinfo.html#decimated_2mon-sites",
    "href": "reference/sitesinfo.html#decimated_2mon-sites",
    "title": "Sites",
    "section": "",
    "text": "Decimated_2mon sites represent a potential link between two monomers, potentially on two different filaments. The site count is added to the chemistry voxel of the potential monomer that could attach to the minus end of the link_2mon.\n\n\nA type T must implement the following functions to be a decimated_2mon site.\n\n\nReturn the maximum distance in nm of a decimated_2mon site.\n\n\n\nReturn the maximum decimated_2mon_sitecount will return given a pair of monomers in_linking_range.\n\n\n\nReturn if two monomers are in range to possibly link in the forward direction, and if they are in range to possibly link in the reverse direction.\n\n\n\nReturn the filament types of the minus and plus monomers.\n\n\n\nReturn the monomer step size starting with mid 0 in the search for potential decimated_2mon sites on the minus and plus ends respectively.\n1 searches every monomer. 2 searches every monomer with even mid …\nIf the plus and minus filament types are the same, then getmidsteps(site)[1] == getmidsteps(site)[2]\n\n\n\nReturn the site count of two monomers getting linked given their states, their positions, and their plus vectors. The monomers can be assumed to be in_linking_range, from the correct filament types, and at the correct step.\n\n\n\n\n\n\n\n\n\nMEDYAN.pickrandom_decimated_2mon_site\nMEDYAN.Context#decimated_2mon_sites field\n\n\n\nMEDYAN.SysDef#decimated_2mon_site field\nMEDYAN.add_decimated_2mon_site!",
    "crumbs": [
      "Reference",
      "Sites"
    ]
  },
  {
    "objectID": "reference/sitesinfo.html#mon_link_2mon-sites",
    "href": "reference/sitesinfo.html#mon_link_2mon-sites",
    "title": "Sites",
    "section": "mon_link_2mon sites",
    "text": "mon_link_2mon sites\nMon_link_2mon sites can only be associated with one link_2mon type. They can represent propensities for reactions to happen between a link_2mon attached to two monomers and another nearby monomer, like cross linking.\n\nRequired Functions\nA type T must implement the following functions to be a mon_link_2mon site.\n\ncutoff_distance(site::T)::Float64\nReturn the maximum distance in nm of a site. The nearby monomer must be within this distance of the minus end of the link to be counted.\n\n\ngetftid(site::T)::Integer\nReturn the required filament type id of the nearby monomers.\n\n\nmon_link_2mon_sitecount(site::T, link_2mon_state::Link2MonState)::Float64\nReturn the site count that should be added for each monomer of the required filament type in the cutoff distance.\nThe site count gets put in the chemistry voxel of the minus end of the link_2mon.\n\n\n\nBuilt-in mon_link_2mon sites\n\n\nRelated Functions and Fields\n\nContext\nMEDYAN.pickrandommon_link_2mon_site\nMEDYAN.Context#mon_link_2mon_sites field\n\n\nSysDef\nMEDYAN.SysDef#mon_link_2mon_site field\nMEDYAN.add_mon_link_2mon_site!",
    "crumbs": [
      "Reference",
      "Sites"
    ]
  },
  {
    "objectID": "reference/sitesinfo.html#cadherin-sites",
    "href": "reference/sitesinfo.html#cadherin-sites",
    "title": "Sites",
    "section": "cadherin sites",
    "text": "cadherin sites\nCadherin sites can only be associated with the cadherin type. They can represent propensities for reactions to happen to a cadherin between one monomer and one membrane vertex.\n\nRequired Functions\nA type T must implement the following functions to be a cadherin site.\n\ncadherin_sitecount(site::T, cadherin_state::CadherinState, mechparams, vid, ftid, vertexstate, monomerstates, v_pos, m_pos, m_plusv)::Float64\nReturn the site count given the state of the cadherin, the vid vertex id, the ftid filament type id, the vertexstate vertex state, the monomerstates monomer states, the positions of vertex and the monomer, and the orientation of the monomer.\nvertexstate should be the state of vertex on the one end of cadherin, when monomerstates should be the collection of 3 MonomerState ordered from minus to plus end, with the other end of cadherin attached to the center monomer.\nVertex state is defined to denote the reaction activity of vertices. The default state of vertex is one, which means the vertex is inert to chemical reaction.\nIf a monomer or a vertex doesn’t exist, its state should be input as zero.\nThe site count gets put in the chemistry voxel with the vertex.\n\n\n\nBuilt-in cadherin sites\n\n\nRelated Functions and Fields\n\nContext\nMEDYAN.Context#cadherinsites field\n\n\nSysDef\nMEDYAN.SysDef#cadherinsite field\nMEDYAN.addcadherinsite!",
    "crumbs": [
      "Reference",
      "Sites"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Table of Contents",
    "section": "",
    "text": "src/sysdefs.jl\n\nMEDYAN.AgentNames\nMEDYAN.SysDef\nadd_diffusion_coeff!\naddreaction!\naddreactioncallback!\nadd_filament_params!\naddfilamentsite!\naddfilament_reaction!\naddfilamentendsite!\naddfilamentend_reaction!\nadd_link_2mon!\n\n\n\n\n\nMEDYAN.Context\nCubicGrid\ndeepcopy, note: rng is shared\n\n\n\n\n\nBase.empty!\nload_snapshot!\nchem_newfilament!\nchem_removefilament!\nchem_polymerize!\nchem_depolymerize!\nchem_setmonomerstate!\nchem_newlink_2mon!\nchem_removelink_2mon!\nchem_setlink_2mon_state!\nchem_adddiffusingcount!\nchem_addfixedcount!\nadddiffusingcount_rand!\nnewfilament_rand!\nset_time!\nset_enable_cylinder_volume_exclusion!\nset_chemboundary!\nset_mechboundary!\nsever_filament!\n\n\n\n\n\nnum_filtypes\nfiltype_fil_ids\nfil_node_positions\nfil_node_mon_ids\nfil_mon_states\nfil_num_unmin_ends\nmon_exists\nmon_minimized\nmon_position\nmon_plusvector\nmon_position_plusvector\nmon_3states\nnum_link_2montypes\nlink_2mon_endnames\nlink_2mon_state\n\n\n\n\n\nrun_chemistry!\nminimize_energy!\n\n\n\n\n\n\n\n\n\n\nfilament sites\nfilament end sites\nlink_2mon sites\ndecimated_2mon sites\n\n\n\n\n\n\n\n\n\n\nCubicGrid\nMEDYAN.grididat\nMEDYAN.filter_grididat\nMEDYAN.centerof",
    "crumbs": [
      "Reference",
      "Table of Contents"
    ]
  },
  {
    "objectID": "reference/index.html#functions",
    "href": "reference/index.html#functions",
    "title": "Table of Contents",
    "section": "",
    "text": "src/sysdefs.jl\n\nMEDYAN.AgentNames\nMEDYAN.SysDef\nadd_diffusion_coeff!\naddreaction!\naddreactioncallback!\nadd_filament_params!\naddfilamentsite!\naddfilament_reaction!\naddfilamentendsite!\naddfilamentend_reaction!\nadd_link_2mon!\n\n\n\n\n\nMEDYAN.Context\nCubicGrid\ndeepcopy, note: rng is shared\n\n\n\n\n\nBase.empty!\nload_snapshot!\nchem_newfilament!\nchem_removefilament!\nchem_polymerize!\nchem_depolymerize!\nchem_setmonomerstate!\nchem_newlink_2mon!\nchem_removelink_2mon!\nchem_setlink_2mon_state!\nchem_adddiffusingcount!\nchem_addfixedcount!\nadddiffusingcount_rand!\nnewfilament_rand!\nset_time!\nset_enable_cylinder_volume_exclusion!\nset_chemboundary!\nset_mechboundary!\nsever_filament!\n\n\n\n\n\nnum_filtypes\nfiltype_fil_ids\nfil_node_positions\nfil_node_mon_ids\nfil_mon_states\nfil_num_unmin_ends\nmon_exists\nmon_minimized\nmon_position\nmon_plusvector\nmon_position_plusvector\nmon_3states\nnum_link_2montypes\nlink_2mon_endnames\nlink_2mon_state\n\n\n\n\n\nrun_chemistry!\nminimize_energy!",
    "crumbs": [
      "Reference",
      "Table of Contents"
    ]
  },
  {
    "objectID": "reference/index.html#interfaces",
    "href": "reference/index.html#interfaces",
    "title": "Table of Contents",
    "section": "",
    "text": "filament sites\nfilament end sites\nlink_2mon sites\ndecimated_2mon sites",
    "crumbs": [
      "Reference",
      "Table of Contents"
    ]
  },
  {
    "objectID": "reference/index.html#utilities",
    "href": "reference/index.html#utilities",
    "title": "Table of Contents",
    "section": "",
    "text": "CubicGrid\nMEDYAN.grididat\nMEDYAN.filter_grididat\nMEDYAN.centerof",
    "crumbs": [
      "Reference",
      "Table of Contents"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MEDYAN.jl",
    "section": "",
    "text": "Documentation for MEDYAN."
  },
  {
    "objectID": "index.html#warning-the-api-is-very-unstable-and-this-package-is-not-released-yet.",
    "href": "index.html#warning-the-api-is-very-unstable-and-this-package-is-not-released-yet.",
    "title": "MEDYAN.jl",
    "section": "Warning, the API is very unstable, and this package is not released yet.",
    "text": "Warning, the API is very unstable, and this package is not released yet.\nWelcome to Papoian Lab’s Mechanochemical Dynamics of Active Networks Julia package.\nThis is based on the C++ medyan command line tool also developed by the Papoian Lab.\nCopyright 2022, Papoian lab at the University of Maryland.\nThis code is distributed under the license found in this directory, license.txt."
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "MEDYAN.jl",
    "section": "Usage",
    "text": "Usage\nFirst install and run Julia https://julialang.org/downloads/\nNext download or clone this repository.\nFinally, to use MEDYAN.jl, in Julia run:\nusing Pkg; pkg\"dev &lt;path to repo&gt;\"\nWhere &lt;path to repo&gt; should be replaced with a local or absolute path to the repo.\n\nTutorials\nReference"
  },
  {
    "objectID": "index.html#authors",
    "href": "index.html#authors",
    "title": "MEDYAN.jl",
    "section": "Authors",
    "text": "Authors\nActive developers:\n\n\n\nName\nEmail\n\n\n\n\nNathan Zimmerberg\nnzimmerb@umd.edu\n\n\nMengxin Gu\nmxgu1234@umd.edu\n\n\nPatrick Kelly\nptfk1677@umd.edu\n\n\n\nAll developers including developers of C++ medyan:\nGaregin Papoian (gpapoian@umd.edu), Konstantin Popov, James Komianos, Aravind Chandrasekaran, Qin Ni, Carlos Floyd, Haoran Ni, Nathan Zimmerberg, Joshua Lucker, Mengxin Gu, Patrick Kelly\nAll general correspondence about the code and its applications should be directed to Garegin Papoian. All developer and more specific code, installation, and usage correspondence should be directed to Active developers via email or the issue tracker."
  },
  {
    "objectID": "index.html#running-tests",
    "href": "index.html#running-tests",
    "title": "MEDYAN.jl",
    "section": "Running tests",
    "text": "Running tests\nIn shell:\ncd test\njulia install-deps.jl\njulia --project runtests.jl\nYou can also include individual test files to run just those tests."
  },
  {
    "objectID": "index.html#sub-packages",
    "href": "index.html#sub-packages",
    "title": "MEDYAN.jl",
    "section": "Sub Packages",
    "text": "Sub Packages\nThere are a number of sub packages found in the “lib” directory.\nFor example “lib/MEDYAN2Vtk”, can be tested using the following shell commands:\ncd lib/MEDYAN2Vtk/test\njulia install-deps.jl\njulia --project runtests.jl\nTo use “lib/MEDYAN2Vtk” package in a new environment in Julia run:\nusing Pkg; pkg\"dev &lt;path to repo&gt;/lib/MEDYAN2Vtk\"\nIf the sub package depends on other sub packages or depends on MEDYAN, you may have to dev multiple paths."
  },
  {
    "objectID": "index.html#running-notebooks",
    "href": "index.html#running-notebooks",
    "title": "MEDYAN.jl",
    "section": "Running notebooks",
    "text": "Running notebooks\nTo run interactively in a Pluto Notebook, run the following shell commands:\ncd notebooks\njulia install-deps.jl\njulia --project -e 'import Pluto; Pluto.run()'\nTo generate static html files, run the following shell commands:\ncd notebooks\njulia install-deps.jl\njulia --project runnotebooks.jl"
  },
  {
    "objectID": "index.html#editing-documentation",
    "href": "index.html#editing-documentation",
    "title": "MEDYAN.jl",
    "section": "Editing Documentation",
    "text": "Editing Documentation\nFirst, if you haven’t yet, install quarto at least 1.2.\nRun the following to check your quarto installation has the julia kernel.\nquarto check jupyter\nYou may have to run the following after updating julia if jupyter doesn’t have the latest kernel.\nusing Pkg\nPkg.add(\"IJulia\")\nPkg.build(\"IJulia\")\nRun the following to set up the environment and create a preview. Any changes to files in docs should auto update.\n./docs/make.jl\nor\njulia docs/make.jl\nRun the following to refresh the docstrings for the site.\njulia --project=docs docs/make-docstrings.jl"
  },
  {
    "objectID": "tutorials/3treadmill.html",
    "href": "tutorials/3treadmill.html",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "Using reactions and rates from\nDitlev JA, Vacanti NM, Novak IL, Loew LM. An open model of actin dendritic nucleation. Biophys J. 2009;96(9):3529-3542. doi:10.1016/j.bpj.2009.01.037\nThis example doesn’t have any of the actin binding proteins, or filament severing or annealing.\n\n\nOpen a julia REPL or jupyter notebook using the medyan-tutorial environment you created in tutorial 1.\nLoad MEDYAN with MeshCat for visualization\n\nusing MEDYAN\nusing MEDYANVis\nusing CairoMakie\nusing Random\nusing SmallZarrGroups\nusing StaticArrays\nusing LinearAlgebra\nRandom.seed!(1234);\n\n\n\n\nThe first step is declaring the names of agents in the system.\nThis system will contain three diffusing species.\nThe system will also contain one filament type.\nThe monomers that make up this filament can be in one of 9 states.\n\nagent_names = MEDYAN.AgentNames(;\n    diffusingspeciesnames=[\n        :GA, # G-Actin with no bound nucleotide\n        :GAD, # G-Actin in the ADP form\n        :GADPi, # G-Actin in the ADP Pi form\n        :GAT, # G-Actin in the ATP form\n    ],\n    filamentnames=[\n        (:actin, [\n            # Monomer states\n            :FAD, # F-Actin in the ADP form\n            :FADPi, # F-Actin in the ADP Pi form\n            :FAT, # F-Actin in the ATP form\n            :BarbedD, # Barbed end in the ADP form\n            :BarbedDPi, # Barbed end in the ADP Pi form\n            :BarbedT, # Barbed end in the ATP form\n            :PointedD, # Pointed end in the ADP form\n            :PointedDPi, # Pointed end in the ADP Pi form\n            :PointedT, # Pointed end in the ATP form\n        ])\n    ]\n)\n\nMEDYAN.AgentNames([:GA, :GAD, :GADPi, :GAT], Symbol[], Symbol[], Symbol[], [(:actin, [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT])], Symbol[], Symbol[], Symbol[])\n\n\n\n\n\nAfter the agent names are declared, the system can be defined.\nThis is done by constructing a MEDYAN.SysDef object from the agent_names and then mutating it to add parameters, reactions, and callbacks.\n\ns = MEDYAN.SysDef(agent_names)\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 0.0 nm²/s\n  GAD: 0.0 nm²/s\n  GADPi: 0.0 nm²/s\n  GAT: 0.0 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(NaN, NaN, NaN, NaN, -1, -1)\n\n\nAdd a diffusion coefficient of 5E6 nm²/s to all diffusing species. All units are based on nm, s, pN\nadd_diffusion_coeff!\n\nDGActin = 5E6\nfor name in keys(s.diffusing)\n    add_diffusion_coeff!(s, name, DGActin) # nm²/s\nend\n\nAdd the default actin filament parameters.\n\nadd_filament_params!(s, :actin, MEDYAN.ACTIN_FIL_PARAMS)\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 5.0e6 nm²/s\n  GAD: 5.0e6 nm²/s\n  GADPi: 5.0e6 nm²/s\n  GAT: 5.0e6 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(3.0, 2.7, 4000.0, 26880.0, 40, 1)\n\n\nAdd reactions between diffusing species. These represent G-Actin interacting with ATP ADP and Pi.\naddreaction!\n\n# Assume ATP, Pi, and ADP concentrations are fixed\nATP = 10000.0 * MEDYAN.μM⁻¹_per_nm³\nPi = 2000.0 * MEDYAN.μM⁻¹_per_nm³\nADP = 2000.0 * MEDYAN.μM⁻¹_per_nm³\nKfGATPoint  = 1.3/MEDYAN.μM⁻¹_per_nm³\nKrGATPoint  = 0.8\nKfGADPoint  = 0.16/MEDYAN.μM⁻¹_per_nm³\nKrGADPoint  = 0.3\nKfGATBarb   = 10.0/MEDYAN.μM⁻¹_per_nm³\nKrGATBarb   = 1.0\nKfGADBarb   = 2.5/MEDYAN.μM⁻¹_per_nm³\nKrGADBarb   = 4.25\nKfPiRelease = 0.0026\nKrPiRelease = 5.20E-6/MEDYAN.μM⁻¹_per_nm³\n\n# 100\naddreaction!(s,\n    \"diffusing.GADPi --&gt; diffusing.GAD\",\n    0.0312,\n    0,\n)\naddreaction!(s,\n    \"diffusing.GAD --&gt; diffusing.GADPi\",\n    KrPiRelease*Pi,\n    0,\n)\n\n# 104\naddreaction!(s,\n    \"diffusing.GA --&gt; diffusing.GAT\",\n    1.7/MEDYAN.μM⁻¹_per_nm³*ATP,\n    0,\n)\naddreaction!(s,\n    \"diffusing.GAT --&gt; diffusing.GA\",\n    0.011,\n    0,\n)\n\n# 109\naddreaction!(s,\n    \"diffusing.GA --&gt; diffusing.GAD\",\n    0.9/MEDYAN.μM⁻¹_per_nm³*ADP,\n    0,\n)\naddreaction!(s,\n    \"diffusing.GAD --&gt; diffusing.GA\",\n    0.071,\n    0,\n)\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 5.0e6 nm²/s\n  GAD: 5.0e6 nm²/s\n  GADPi: 5.0e6 nm²/s\n  GAT: 5.0e6 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(3.0, 2.7, 4000.0, 26880.0, 40, 1)\n Compartment reactions without callbacks:\n  \"diffusing.GADPi --&gt; diffusing.GAD\" 0.0312 1/s\n  \"diffusing.GAD --&gt; diffusing.GADPi\" 0.0104 1/s\n  \"diffusing.GA --&gt; diffusing.GAT\" 17000.0 1/s\n  \"diffusing.GAT --&gt; diffusing.GA\" 0.011 1/s\n  \"diffusing.GA --&gt; diffusing.GAD\" 1799.9999999999998 1/s\n  \"diffusing.GAD --&gt; diffusing.GA\" 0.071 1/s\n\n\nNext add filament reactions.\nThe barbed end is the plus end and the pointed end is the minus end.\n\nmonomerspacing=2.7 # nm\n\n\nnucleotide_states = (\"T\", \"DPi\", \"D\")\n\n# Barbed end polymerization and depolymerization\nbarbed_rates = [\n    (\"T\", KfGATBarb, KrGATBarb),\n    (\"DPi\", KfGATBarb, KrGATBarb),\n    (\"D\", KfGADBarb, KrGADBarb),\n]\nfor (new_nuc, forward_rate, reverse_rate) in barbed_rates\n    for base_nuc in nucleotide_states\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"f\", \"GA\", new_nuc, \"_to_Barbed\", base_nuc),\n            false,\n            [Symbol(\"Barbed\", base_nuc)]=&gt;[Symbol(\"FA\", base_nuc), Symbol(\"Barbed\", new_nuc)],\n            monomerspacing,\n            \"diffusing.GA\"*new_nuc*\" --&gt;\",\n            forward_rate,\n            1,\n        )\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"r\", \"GA\", new_nuc, \"_to_Barbed\", base_nuc),\n            false,\n            [Symbol(\"FA\", base_nuc), Symbol(\"Barbed\", new_nuc)]=&gt;[Symbol(\"Barbed\", base_nuc)],\n            0.0,\n            \"--&gt; diffusing.GA\"*new_nuc,\n            reverse_rate,\n            0,\n        )\n    end\nend\n\n# Pointed end polymerization and depolymerization\npointed_rates = [\n    (\"T\", KfGATPoint, KrGATPoint),\n    (\"DPi\", KfGATPoint, KrGATPoint),\n    (\"D\", KfGADPoint, KrGADPoint),\n]\nfor (new_nuc, forward_rate, reverse_rate) in pointed_rates\n    for base_nuc in nucleotide_states\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"f\", \"GA\", new_nuc, \"_to_Pointed\", base_nuc),\n            true,\n            [Symbol(\"Pointed\", base_nuc)]=&gt;[Symbol(\"Pointed\", new_nuc), Symbol(\"FA\", base_nuc)],\n            monomerspacing,\n            \"diffusing.GA\"*new_nuc*\" --&gt;\",\n            forward_rate,\n            1,\n        )\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"r\", \"GA\", new_nuc, \"_to_Pointed\", base_nuc),\n            true,\n            [Symbol(\"Pointed\", new_nuc), Symbol(\"FA\", base_nuc)]=&gt;[Symbol(\"Pointed\", base_nuc)],\n            0.0,\n            \"--&gt; diffusing.GA\"*new_nuc,\n            reverse_rate,\n            0,\n        )\n    end\nend\n\n# Filament ATP hydrolysis and Pi Dissociation\nfor monomer_state in (\"FA\", \"Barbed\", \"Pointed\")\n    addfilament_reaction!(s,\n        :actin,\n        Symbol(monomer_state, \"T_to_\", monomer_state, \"DPi\"),\n        [Symbol(monomer_state, \"T\")]=&gt;[Symbol(monomer_state, \"DPi\")],\n        1,\n        \"--&gt;\",\n        0.3,\n        0,\n    )\n    addfilament_reaction!(s,\n        :actin,\n        Symbol(monomer_state, \"DPi_to_\", monomer_state, \"D\"),\n        [Symbol(monomer_state, \"DPi\")]=&gt;[Symbol(monomer_state, \"D\")],\n        1,\n        \"--&gt;\",\n        KfPiRelease,\n        0,\n    )\n    addfilament_reaction!(s,\n        :actin,\n        Symbol(monomer_state, \"D_to_\", monomer_state, \"DPi\"),\n        [Symbol(monomer_state, \"D\")]=&gt;[Symbol(monomer_state, \"DPi\")],\n        1,\n        \"--&gt;\",\n        KrPiRelease*Pi,\n        0,\n    )\nend\ns\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 5.0e6 nm²/s\n  GAD: 5.0e6 nm²/s\n  GADPi: 5.0e6 nm²/s\n  GAT: 5.0e6 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(3.0, 2.7, 4000.0, 26880.0, 40, 1)\n   filament sites:\n    FAT_to_FADPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x03])\n    FADPi_to_FAD: MEDYAN.FilamentSiteGeneral(1, UInt8[0x02])\n    FAD_to_FADPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x01])\n    BarbedT_to_BarbedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x06])\n    BarbedDPi_to_BarbedD: MEDYAN.FilamentSiteGeneral(1, UInt8[0x05])\n    BarbedD_to_BarbedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x04])\n    PointedT_to_PointedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x09])\n    PointedDPi_to_PointedD: MEDYAN.FilamentSiteGeneral(1, UInt8[0x08])\n    PointedD_to_PointedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x07])\n   filament end sites:\n    fGAT_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x06], 2.7, 1)\n    rGAT_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x03, 0x06], 0.0, 0)\n    fGAT_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x05], 2.7, 1)\n    rGAT_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x02, 0x06], 0.0, 0)\n    fGAT_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x04], 2.7, 1)\n    rGAT_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x01, 0x06], 0.0, 0)\n    fGADPi_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x06], 2.7, 1)\n    rGADPi_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x03, 0x05], 0.0, 0)\n    fGADPi_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x05], 2.7, 1)\n    rGADPi_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x02, 0x05], 0.0, 0)\n    fGADPi_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x04], 2.7, 1)\n    rGADPi_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x01, 0x05], 0.0, 0)\n    fGAD_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x06], 2.7, 1)\n    rGAD_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x03, 0x04], 0.0, 0)\n    fGAD_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x05], 2.7, 1)\n    rGAD_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x02, 0x04], 0.0, 0)\n    fGAD_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x04], 2.7, 1)\n    rGAD_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x01, 0x04], 0.0, 0)\n    fGAT_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09], 2.7, 1)\n    rGAT_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09, 0x03], 0.0, 0)\n    fGAT_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08], 2.7, 1)\n    rGAT_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09, 0x02], 0.0, 0)\n    fGAT_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07], 2.7, 1)\n    rGAT_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09, 0x01], 0.0, 0)\n    fGADPi_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09], 2.7, 1)\n    rGADPi_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08, 0x03], 0.0, 0)\n    fGADPi_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08], 2.7, 1)\n    rGADPi_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08, 0x02], 0.0, 0)\n    fGADPi_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07], 2.7, 1)\n    rGADPi_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08, 0x01], 0.0, 0)\n    fGAD_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09], 2.7, 1)\n    rGAD_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07, 0x03], 0.0, 0)\n    fGAD_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08], 2.7, 1)\n    rGAD_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07, 0x02], 0.0, 0)\n    fGAD_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07], 2.7, 1)\n    rGAD_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07, 0x01], 0.0, 0)\n Compartment reactions with callbacks:\n  1. \"filamentsite.actin.PointedD_to_PointedDPi --&gt; filamentsite.actin.PointedD_to_PointedDPi\" 0.0104 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 9, 1, UInt8[0x08], Pair{Int64, Int64}[])\n  2. \"filamentsite.actin.PointedDPi_to_PointedD --&gt; filamentsite.actin.PointedDPi_to_PointedD\" 0.0026 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 8, 1, UInt8[0x07], Pair{Int64, Int64}[])\n  3. \"filamentsite.actin.PointedT_to_PointedDPi --&gt; filamentsite.actin.PointedT_to_PointedDPi\" 0.3 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 7, 1, UInt8[0x08], Pair{Int64, Int64}[])\n  4. \"filamentsite.actin.BarbedD_to_BarbedDPi --&gt; filamentsite.actin.BarbedD_to_BarbedDPi\" 0.0104 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 6, 1, UInt8[0x05], Pair{Int64, Int64}[])\n  5. \"filamentsite.actin.BarbedDPi_to_BarbedD --&gt; filamentsite.actin.BarbedDPi_to_BarbedD\" 0.0026 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 5, 1, UInt8[0x04], Pair{Int64, Int64}[])\n  6. \"filamentsite.actin.BarbedT_to_BarbedDPi --&gt; filamentsite.actin.BarbedT_to_BarbedDPi\" 0.3 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 4, 1, UInt8[0x05], Pair{Int64, Int64}[])\n  7. \"filamentsite.actin.FAD_to_FADPi --&gt; filamentsite.actin.FAD_to_FADPi\" 0.0104 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 3, 1, UInt8[0x02], Pair{Int64, Int64}[])\n  8. \"filamentsite.actin.FADPi_to_FAD --&gt; filamentsite.actin.FADPi_to_FAD\" 0.0026 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 2, 1, UInt8[0x01], Pair{Int64, Int64}[])\n  9. \"filamentsite.actin.FAT_to_FADPi --&gt; filamentsite.actin.FAT_to_FADPi\" 0.3 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 1, 1, UInt8[0x02], Pair{Int64, Int64}[])\n  10. \"filamentendsite.actin.rGAD_to_PointedD --&gt; filamentendsite.actin.rGAD_to_PointedD\" 0.3 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 36, -1, UInt8[0x07], [2 =&gt; 1])\n  11. \"diffusing.GAD + filamentendsite.actin.fGAD_to_PointedD --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_PointedD\" 265686.2507478155 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 35, 1, UInt8[0x07, 0x01], [2 =&gt; -1])\n  12. \"filamentendsite.actin.rGAD_to_PointedDPi --&gt; filamentendsite.actin.rGAD_to_PointedDPi\" 0.3 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 34, -1, UInt8[0x08], [2 =&gt; 1])\n  13. \"diffusing.GAD + filamentendsite.actin.fGAD_to_PointedDPi --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_PointedDPi\" 265686.2507478155 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 33, 1, UInt8[0x07, 0x02], [2 =&gt; -1])\n  14. \"filamentendsite.actin.rGAD_to_PointedT --&gt; filamentendsite.actin.rGAD_to_PointedT\" 0.3 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 32, -1, UInt8[0x09], [2 =&gt; 1])\n  15. \"diffusing.GAD + filamentendsite.actin.fGAD_to_PointedT --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_PointedT\" 265686.2507478155 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 31, 1, UInt8[0x07, 0x03], [2 =&gt; -1])\n  16. \"filamentendsite.actin.rGADPi_to_PointedD --&gt; filamentendsite.actin.rGADPi_to_PointedD\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 30, -1, UInt8[0x07], [3 =&gt; 1])\n  17. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedD --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedD\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 29, 1, UInt8[0x08, 0x01], [3 =&gt; -1])\n  18. \"filamentendsite.actin.rGADPi_to_PointedDPi --&gt; filamentendsite.actin.rGADPi_to_PointedDPi\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 28, -1, UInt8[0x08], [3 =&gt; 1])\n  19. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedDPi --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedDPi\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 27, 1, UInt8[0x08, 0x02], [3 =&gt; -1])\n  20. \"filamentendsite.actin.rGADPi_to_PointedT --&gt; filamentendsite.actin.rGADPi_to_PointedT\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 26, -1, UInt8[0x09], [3 =&gt; 1])\n  21. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedT --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedT\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 25, 1, UInt8[0x08, 0x03], [3 =&gt; -1])\n  22. \"filamentendsite.actin.rGAT_to_PointedD --&gt; filamentendsite.actin.rGAT_to_PointedD\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 24, -1, UInt8[0x07], [4 =&gt; 1])\n  23. \"diffusing.GAT + filamentendsite.actin.fGAT_to_PointedD --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_PointedD\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 23, 1, UInt8[0x09, 0x01], [4 =&gt; -1])\n  24. \"filamentendsite.actin.rGAT_to_PointedDPi --&gt; filamentendsite.actin.rGAT_to_PointedDPi\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 22, -1, UInt8[0x08], [4 =&gt; 1])\n  25. \"diffusing.GAT + filamentendsite.actin.fGAT_to_PointedDPi --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_PointedDPi\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 21, 1, UInt8[0x09, 0x02], [4 =&gt; -1])\n  26. \"filamentendsite.actin.rGAT_to_PointedT --&gt; filamentendsite.actin.rGAT_to_PointedT\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 20, -1, UInt8[0x09], [4 =&gt; 1])\n  27. \"diffusing.GAT + filamentendsite.actin.fGAT_to_PointedT --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_PointedT\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 19, 1, UInt8[0x09, 0x03], [4 =&gt; -1])\n  28. \"filamentendsite.actin.rGAD_to_BarbedD --&gt; filamentendsite.actin.rGAD_to_BarbedD\" 4.25 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 18, -1, UInt8[0x04], [2 =&gt; 1])\n  29. \"diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedD --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedD\" 4.151347667934617e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 17, 1, UInt8[0x01, 0x04], [2 =&gt; -1])\n  30. \"filamentendsite.actin.rGAD_to_BarbedDPi --&gt; filamentendsite.actin.rGAD_to_BarbedDPi\" 4.25 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 16, -1, UInt8[0x05], [2 =&gt; 1])\n  31. \"diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedDPi --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedDPi\" 4.151347667934617e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 15, 1, UInt8[0x02, 0x04], [2 =&gt; -1])\n  32. \"filamentendsite.actin.rGAD_to_BarbedT --&gt; filamentendsite.actin.rGAD_to_BarbedT\" 4.25 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 14, -1, UInt8[0x06], [2 =&gt; 1])\n  33. \"diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedT --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedT\" 4.151347667934617e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 13, 1, UInt8[0x03, 0x04], [2 =&gt; -1])\n  34. \"filamentendsite.actin.rGADPi_to_BarbedD --&gt; filamentendsite.actin.rGADPi_to_BarbedD\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 12, -1, UInt8[0x04], [3 =&gt; 1])\n  35. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedD --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedD\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 11, 1, UInt8[0x01, 0x05], [3 =&gt; -1])\n  36. \"filamentendsite.actin.rGADPi_to_BarbedDPi --&gt; filamentendsite.actin.rGADPi_to_BarbedDPi\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 10, -1, UInt8[0x05], [3 =&gt; 1])\n  37. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedDPi --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedDPi\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 9, 1, UInt8[0x02, 0x05], [3 =&gt; -1])\n  38. \"filamentendsite.actin.rGADPi_to_BarbedT --&gt; filamentendsite.actin.rGADPi_to_BarbedT\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 8, -1, UInt8[0x06], [3 =&gt; 1])\n  39. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedT --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedT\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 7, 1, UInt8[0x03, 0x05], [3 =&gt; -1])\n  40. \"filamentendsite.actin.rGAT_to_BarbedD --&gt; filamentendsite.actin.rGAT_to_BarbedD\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 6, -1, UInt8[0x04], [4 =&gt; 1])\n  41. \"diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedD --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedD\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 5, 1, UInt8[0x01, 0x06], [4 =&gt; -1])\n  42. \"filamentendsite.actin.rGAT_to_BarbedDPi --&gt; filamentendsite.actin.rGAT_to_BarbedDPi\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 4, -1, UInt8[0x05], [4 =&gt; 1])\n  43. \"diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedDPi --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedDPi\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 3, 1, UInt8[0x02, 0x06], [4 =&gt; -1])\n  44. \"filamentendsite.actin.rGAT_to_BarbedT --&gt; filamentendsite.actin.rGAT_to_BarbedT\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 2, -1, UInt8[0x06], [4 =&gt; 1])\n  45. \"diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedT --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedT\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 1, 1, UInt8[0x03, 0x06], [4 =&gt; -1])\n Compartment reactions without callbacks:\n  \"diffusing.GADPi --&gt; diffusing.GAD\" 0.0312 1/s\n  \"diffusing.GAD --&gt; diffusing.GADPi\" 0.0104 1/s\n  \"diffusing.GA --&gt; diffusing.GAT\" 17000.0 1/s\n  \"diffusing.GAT --&gt; diffusing.GA\" 0.011 1/s\n  \"diffusing.GA --&gt; diffusing.GAD\" 1799.9999999999998 1/s\n  \"diffusing.GAD --&gt; diffusing.GA\" 0.071 1/s\n\n\n\n\n\nCreate a 1 by 1 by 3 grid of 500 nm side length voxels.\n\nL = 3\ngrid = CubicGrid((1,1,L),500.0)\n\nCubicGrid([1, 1, 3], 500.0)\n\n\n\n\n\nThe Context is the object the handles the state of a running simulation.\nCreate a Context using s and grid\n\nc = MEDYAN.Context(s, grid)\n\nMEDYAN.Context at time 0.0s in CubicGrid([1, 1, 3], 500.0)\n\n\n\n\n\n\nset_mechboundary!(c, MEDYAN.boundary_box(grid; stiffness=100.0))\n\nMEDYAN.Boundary(SVector{4, Float64}[[-10.0, 0.0, 0.0, 2500.0], [10.0, 0.0, 0.0, 2500.0], [0.0, -10.0, 0.0, 2500.0], [0.0, 10.0, 0.0, 2500.0], [0.0, 0.0, -10.0, 7500.0], [0.0, 0.0, 10.0, 7500.0]], SVector{8, Float64}[])\n\n\n\n\n\nThe context starts empty.\nDistribute 700 of GAT randomly to the chem voxels by mutating the context.\nadddiffusingcount_rand!\n\nadddiffusingcount_rand!(c, s.diffusing.GAT, 700)\n\nAdd a single short filament by mutating the context.\n\nmonomerstates = [s.state.actin.PointedD, s.state.actin.FADPi, s.state.actin.FAT, s.state.actin.BarbedT]\nnodepositions = [\n    SA[0.0,0.0,0.0], \n    SA[0.0,0.0,monomerspacing*length(monomerstates)]\n]\nchem_newfilament!(c; monomerstates, nodepositions, node_mids=[1,])\n\n1\n\n\n\n\n\nRun chemistry for 1.0s and visualize the results.\n\nvis = Visualizer()\nsetvisible!(vis[\"/Grid\"], false)\nsetvisible!(vis[\"/Axes\"], false)\nsetvisible!(vis[\"/Background\"], false)\n\nIf you open the visualizer in a browser and run the following you should get an animated version of below.\n\nfor i in 1:100\n    run_chemistry!(c, 0.01)\n    minimize_energy!(c)\n    draw_context!(vis, c, s)\nend",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#setup",
    "href": "tutorials/3treadmill.html#setup",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "Open a julia REPL or jupyter notebook using the medyan-tutorial environment you created in tutorial 1.\nLoad MEDYAN with MeshCat for visualization\n\nusing MEDYAN\nusing MEDYANVis\nusing CairoMakie\nusing Random\nusing SmallZarrGroups\nusing StaticArrays\nusing LinearAlgebra\nRandom.seed!(1234);",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#declaring-agent-names",
    "href": "tutorials/3treadmill.html#declaring-agent-names",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "The first step is declaring the names of agents in the system.\nThis system will contain three diffusing species.\nThe system will also contain one filament type.\nThe monomers that make up this filament can be in one of 9 states.\n\nagent_names = MEDYAN.AgentNames(;\n    diffusingspeciesnames=[\n        :GA, # G-Actin with no bound nucleotide\n        :GAD, # G-Actin in the ADP form\n        :GADPi, # G-Actin in the ADP Pi form\n        :GAT, # G-Actin in the ATP form\n    ],\n    filamentnames=[\n        (:actin, [\n            # Monomer states\n            :FAD, # F-Actin in the ADP form\n            :FADPi, # F-Actin in the ADP Pi form\n            :FAT, # F-Actin in the ATP form\n            :BarbedD, # Barbed end in the ADP form\n            :BarbedDPi, # Barbed end in the ADP Pi form\n            :BarbedT, # Barbed end in the ATP form\n            :PointedD, # Pointed end in the ADP form\n            :PointedDPi, # Pointed end in the ADP Pi form\n            :PointedT, # Pointed end in the ATP form\n        ])\n    ]\n)\n\nMEDYAN.AgentNames([:GA, :GAD, :GADPi, :GAT], Symbol[], Symbol[], Symbol[], [(:actin, [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT])], Symbol[], Symbol[], Symbol[])",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#defining-system",
    "href": "tutorials/3treadmill.html#defining-system",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "After the agent names are declared, the system can be defined.\nThis is done by constructing a MEDYAN.SysDef object from the agent_names and then mutating it to add parameters, reactions, and callbacks.\n\ns = MEDYAN.SysDef(agent_names)\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 0.0 nm²/s\n  GAD: 0.0 nm²/s\n  GADPi: 0.0 nm²/s\n  GAT: 0.0 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(NaN, NaN, NaN, NaN, -1, -1)\n\n\nAdd a diffusion coefficient of 5E6 nm²/s to all diffusing species. All units are based on nm, s, pN\nadd_diffusion_coeff!\n\nDGActin = 5E6\nfor name in keys(s.diffusing)\n    add_diffusion_coeff!(s, name, DGActin) # nm²/s\nend\n\nAdd the default actin filament parameters.\n\nadd_filament_params!(s, :actin, MEDYAN.ACTIN_FIL_PARAMS)\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 5.0e6 nm²/s\n  GAD: 5.0e6 nm²/s\n  GADPi: 5.0e6 nm²/s\n  GAT: 5.0e6 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(3.0, 2.7, 4000.0, 26880.0, 40, 1)\n\n\nAdd reactions between diffusing species. These represent G-Actin interacting with ATP ADP and Pi.\naddreaction!\n\n# Assume ATP, Pi, and ADP concentrations are fixed\nATP = 10000.0 * MEDYAN.μM⁻¹_per_nm³\nPi = 2000.0 * MEDYAN.μM⁻¹_per_nm³\nADP = 2000.0 * MEDYAN.μM⁻¹_per_nm³\nKfGATPoint  = 1.3/MEDYAN.μM⁻¹_per_nm³\nKrGATPoint  = 0.8\nKfGADPoint  = 0.16/MEDYAN.μM⁻¹_per_nm³\nKrGADPoint  = 0.3\nKfGATBarb   = 10.0/MEDYAN.μM⁻¹_per_nm³\nKrGATBarb   = 1.0\nKfGADBarb   = 2.5/MEDYAN.μM⁻¹_per_nm³\nKrGADBarb   = 4.25\nKfPiRelease = 0.0026\nKrPiRelease = 5.20E-6/MEDYAN.μM⁻¹_per_nm³\n\n# 100\naddreaction!(s,\n    \"diffusing.GADPi --&gt; diffusing.GAD\",\n    0.0312,\n    0,\n)\naddreaction!(s,\n    \"diffusing.GAD --&gt; diffusing.GADPi\",\n    KrPiRelease*Pi,\n    0,\n)\n\n# 104\naddreaction!(s,\n    \"diffusing.GA --&gt; diffusing.GAT\",\n    1.7/MEDYAN.μM⁻¹_per_nm³*ATP,\n    0,\n)\naddreaction!(s,\n    \"diffusing.GAT --&gt; diffusing.GA\",\n    0.011,\n    0,\n)\n\n# 109\naddreaction!(s,\n    \"diffusing.GA --&gt; diffusing.GAD\",\n    0.9/MEDYAN.μM⁻¹_per_nm³*ADP,\n    0,\n)\naddreaction!(s,\n    \"diffusing.GAD --&gt; diffusing.GA\",\n    0.071,\n    0,\n)\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 5.0e6 nm²/s\n  GAD: 5.0e6 nm²/s\n  GADPi: 5.0e6 nm²/s\n  GAT: 5.0e6 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(3.0, 2.7, 4000.0, 26880.0, 40, 1)\n Compartment reactions without callbacks:\n  \"diffusing.GADPi --&gt; diffusing.GAD\" 0.0312 1/s\n  \"diffusing.GAD --&gt; diffusing.GADPi\" 0.0104 1/s\n  \"diffusing.GA --&gt; diffusing.GAT\" 17000.0 1/s\n  \"diffusing.GAT --&gt; diffusing.GA\" 0.011 1/s\n  \"diffusing.GA --&gt; diffusing.GAD\" 1799.9999999999998 1/s\n  \"diffusing.GAD --&gt; diffusing.GA\" 0.071 1/s\n\n\nNext add filament reactions.\nThe barbed end is the plus end and the pointed end is the minus end.\n\nmonomerspacing=2.7 # nm\n\n\nnucleotide_states = (\"T\", \"DPi\", \"D\")\n\n# Barbed end polymerization and depolymerization\nbarbed_rates = [\n    (\"T\", KfGATBarb, KrGATBarb),\n    (\"DPi\", KfGATBarb, KrGATBarb),\n    (\"D\", KfGADBarb, KrGADBarb),\n]\nfor (new_nuc, forward_rate, reverse_rate) in barbed_rates\n    for base_nuc in nucleotide_states\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"f\", \"GA\", new_nuc, \"_to_Barbed\", base_nuc),\n            false,\n            [Symbol(\"Barbed\", base_nuc)]=&gt;[Symbol(\"FA\", base_nuc), Symbol(\"Barbed\", new_nuc)],\n            monomerspacing,\n            \"diffusing.GA\"*new_nuc*\" --&gt;\",\n            forward_rate,\n            1,\n        )\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"r\", \"GA\", new_nuc, \"_to_Barbed\", base_nuc),\n            false,\n            [Symbol(\"FA\", base_nuc), Symbol(\"Barbed\", new_nuc)]=&gt;[Symbol(\"Barbed\", base_nuc)],\n            0.0,\n            \"--&gt; diffusing.GA\"*new_nuc,\n            reverse_rate,\n            0,\n        )\n    end\nend\n\n# Pointed end polymerization and depolymerization\npointed_rates = [\n    (\"T\", KfGATPoint, KrGATPoint),\n    (\"DPi\", KfGATPoint, KrGATPoint),\n    (\"D\", KfGADPoint, KrGADPoint),\n]\nfor (new_nuc, forward_rate, reverse_rate) in pointed_rates\n    for base_nuc in nucleotide_states\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"f\", \"GA\", new_nuc, \"_to_Pointed\", base_nuc),\n            true,\n            [Symbol(\"Pointed\", base_nuc)]=&gt;[Symbol(\"Pointed\", new_nuc), Symbol(\"FA\", base_nuc)],\n            monomerspacing,\n            \"diffusing.GA\"*new_nuc*\" --&gt;\",\n            forward_rate,\n            1,\n        )\n        addfilamentend_reaction!(s,\n            :actin,\n            Symbol(\"r\", \"GA\", new_nuc, \"_to_Pointed\", base_nuc),\n            true,\n            [Symbol(\"Pointed\", new_nuc), Symbol(\"FA\", base_nuc)]=&gt;[Symbol(\"Pointed\", base_nuc)],\n            0.0,\n            \"--&gt; diffusing.GA\"*new_nuc,\n            reverse_rate,\n            0,\n        )\n    end\nend\n\n# Filament ATP hydrolysis and Pi Dissociation\nfor monomer_state in (\"FA\", \"Barbed\", \"Pointed\")\n    addfilament_reaction!(s,\n        :actin,\n        Symbol(monomer_state, \"T_to_\", monomer_state, \"DPi\"),\n        [Symbol(monomer_state, \"T\")]=&gt;[Symbol(monomer_state, \"DPi\")],\n        1,\n        \"--&gt;\",\n        0.3,\n        0,\n    )\n    addfilament_reaction!(s,\n        :actin,\n        Symbol(monomer_state, \"DPi_to_\", monomer_state, \"D\"),\n        [Symbol(monomer_state, \"DPi\")]=&gt;[Symbol(monomer_state, \"D\")],\n        1,\n        \"--&gt;\",\n        KfPiRelease,\n        0,\n    )\n    addfilament_reaction!(s,\n        :actin,\n        Symbol(monomer_state, \"D_to_\", monomer_state, \"DPi\"),\n        [Symbol(monomer_state, \"D\")]=&gt;[Symbol(monomer_state, \"DPi\")],\n        1,\n        \"--&gt;\",\n        KrPiRelease*Pi,\n        0,\n    )\nend\ns\n\nMEDYAN.SysDef\n Diffusing species:\n  GA: 5.0e6 nm²/s\n  GAD: 5.0e6 nm²/s\n  GADPi: 5.0e6 nm²/s\n  GAT: 5.0e6 nm²/s\n Filaments:\n  actin:\n   monomer states: [:FAD, :FADPi, :FAT, :BarbedD, :BarbedDPi, :BarbedT, :PointedD, :PointedDPi, :PointedT]\n   params: MEDYAN.FilamentMechParams(3.0, 2.7, 4000.0, 26880.0, 40, 1)\n   filament sites:\n    FAT_to_FADPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x03])\n    FADPi_to_FAD: MEDYAN.FilamentSiteGeneral(1, UInt8[0x02])\n    FAD_to_FADPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x01])\n    BarbedT_to_BarbedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x06])\n    BarbedDPi_to_BarbedD: MEDYAN.FilamentSiteGeneral(1, UInt8[0x05])\n    BarbedD_to_BarbedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x04])\n    PointedT_to_PointedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x09])\n    PointedDPi_to_PointedD: MEDYAN.FilamentSiteGeneral(1, UInt8[0x08])\n    PointedD_to_PointedDPi: MEDYAN.FilamentSiteGeneral(1, UInt8[0x07])\n   filament end sites:\n    fGAT_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x06], 2.7, 1)\n    rGAT_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x03, 0x06], 0.0, 0)\n    fGAT_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x05], 2.7, 1)\n    rGAT_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x02, 0x06], 0.0, 0)\n    fGAT_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x04], 2.7, 1)\n    rGAT_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x01, 0x06], 0.0, 0)\n    fGADPi_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x06], 2.7, 1)\n    rGADPi_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x03, 0x05], 0.0, 0)\n    fGADPi_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x05], 2.7, 1)\n    rGADPi_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x02, 0x05], 0.0, 0)\n    fGADPi_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x04], 2.7, 1)\n    rGADPi_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x01, 0x05], 0.0, 0)\n    fGAD_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x06], 2.7, 1)\n    rGAD_to_BarbedT: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x03, 0x04], 0.0, 0)\n    fGAD_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x05], 2.7, 1)\n    rGAD_to_BarbedDPi: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x02, 0x04], 0.0, 0)\n    fGAD_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x04], 2.7, 1)\n    rGAD_to_BarbedD: MEDYAN.FilamentEndSiteGeneral(false, UInt8[0x01, 0x04], 0.0, 0)\n    fGAT_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09], 2.7, 1)\n    rGAT_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09, 0x03], 0.0, 0)\n    fGAT_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08], 2.7, 1)\n    rGAT_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09, 0x02], 0.0, 0)\n    fGAT_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07], 2.7, 1)\n    rGAT_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09, 0x01], 0.0, 0)\n    fGADPi_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09], 2.7, 1)\n    rGADPi_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08, 0x03], 0.0, 0)\n    fGADPi_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08], 2.7, 1)\n    rGADPi_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08, 0x02], 0.0, 0)\n    fGADPi_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07], 2.7, 1)\n    rGADPi_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08, 0x01], 0.0, 0)\n    fGAD_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x09], 2.7, 1)\n    rGAD_to_PointedT: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07, 0x03], 0.0, 0)\n    fGAD_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x08], 2.7, 1)\n    rGAD_to_PointedDPi: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07, 0x02], 0.0, 0)\n    fGAD_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07], 2.7, 1)\n    rGAD_to_PointedD: MEDYAN.FilamentEndSiteGeneral(true, UInt8[0x07, 0x01], 0.0, 0)\n Compartment reactions with callbacks:\n  1. \"filamentsite.actin.PointedD_to_PointedDPi --&gt; filamentsite.actin.PointedD_to_PointedDPi\" 0.0104 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 9, 1, UInt8[0x08], Pair{Int64, Int64}[])\n  2. \"filamentsite.actin.PointedDPi_to_PointedD --&gt; filamentsite.actin.PointedDPi_to_PointedD\" 0.0026 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 8, 1, UInt8[0x07], Pair{Int64, Int64}[])\n  3. \"filamentsite.actin.PointedT_to_PointedDPi --&gt; filamentsite.actin.PointedT_to_PointedDPi\" 0.3 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 7, 1, UInt8[0x08], Pair{Int64, Int64}[])\n  4. \"filamentsite.actin.BarbedD_to_BarbedDPi --&gt; filamentsite.actin.BarbedD_to_BarbedDPi\" 0.0104 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 6, 1, UInt8[0x05], Pair{Int64, Int64}[])\n  5. \"filamentsite.actin.BarbedDPi_to_BarbedD --&gt; filamentsite.actin.BarbedDPi_to_BarbedD\" 0.0026 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 5, 1, UInt8[0x04], Pair{Int64, Int64}[])\n  6. \"filamentsite.actin.BarbedT_to_BarbedDPi --&gt; filamentsite.actin.BarbedT_to_BarbedDPi\" 0.3 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 4, 1, UInt8[0x05], Pair{Int64, Int64}[])\n  7. \"filamentsite.actin.FAD_to_FADPi --&gt; filamentsite.actin.FAD_to_FADPi\" 0.0104 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 3, 1, UInt8[0x02], Pair{Int64, Int64}[])\n  8. \"filamentsite.actin.FADPi_to_FAD --&gt; filamentsite.actin.FADPi_to_FAD\" 0.0026 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 2, 1, UInt8[0x01], Pair{Int64, Int64}[])\n  9. \"filamentsite.actin.FAT_to_FADPi --&gt; filamentsite.actin.FAT_to_FADPi\" 0.3 1/s\n       MEDYAN.GeneralFilamentSiteCallback(1, 1, 1, UInt8[0x02], Pair{Int64, Int64}[])\n  10. \"filamentendsite.actin.rGAD_to_PointedD --&gt; filamentendsite.actin.rGAD_to_PointedD\" 0.3 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 36, -1, UInt8[0x07], [2 =&gt; 1])\n  11. \"diffusing.GAD + filamentendsite.actin.fGAD_to_PointedD --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_PointedD\" 265686.2507478155 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 35, 1, UInt8[0x07, 0x01], [2 =&gt; -1])\n  12. \"filamentendsite.actin.rGAD_to_PointedDPi --&gt; filamentendsite.actin.rGAD_to_PointedDPi\" 0.3 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 34, -1, UInt8[0x08], [2 =&gt; 1])\n  13. \"diffusing.GAD + filamentendsite.actin.fGAD_to_PointedDPi --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_PointedDPi\" 265686.2507478155 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 33, 1, UInt8[0x07, 0x02], [2 =&gt; -1])\n  14. \"filamentendsite.actin.rGAD_to_PointedT --&gt; filamentendsite.actin.rGAD_to_PointedT\" 0.3 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 32, -1, UInt8[0x09], [2 =&gt; 1])\n  15. \"diffusing.GAD + filamentendsite.actin.fGAD_to_PointedT --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_PointedT\" 265686.2507478155 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 31, 1, UInt8[0x07, 0x03], [2 =&gt; -1])\n  16. \"filamentendsite.actin.rGADPi_to_PointedD --&gt; filamentendsite.actin.rGADPi_to_PointedD\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 30, -1, UInt8[0x07], [3 =&gt; 1])\n  17. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedD --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedD\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 29, 1, UInt8[0x08, 0x01], [3 =&gt; -1])\n  18. \"filamentendsite.actin.rGADPi_to_PointedDPi --&gt; filamentendsite.actin.rGADPi_to_PointedDPi\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 28, -1, UInt8[0x08], [3 =&gt; 1])\n  19. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedDPi --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedDPi\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 27, 1, UInt8[0x08, 0x02], [3 =&gt; -1])\n  20. \"filamentendsite.actin.rGADPi_to_PointedT --&gt; filamentendsite.actin.rGADPi_to_PointedT\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 26, -1, UInt8[0x09], [3 =&gt; 1])\n  21. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedT --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_PointedT\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 25, 1, UInt8[0x08, 0x03], [3 =&gt; -1])\n  22. \"filamentendsite.actin.rGAT_to_PointedD --&gt; filamentendsite.actin.rGAT_to_PointedD\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 24, -1, UInt8[0x07], [4 =&gt; 1])\n  23. \"diffusing.GAT + filamentendsite.actin.fGAT_to_PointedD --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_PointedD\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 23, 1, UInt8[0x09, 0x01], [4 =&gt; -1])\n  24. \"filamentendsite.actin.rGAT_to_PointedDPi --&gt; filamentendsite.actin.rGAT_to_PointedDPi\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 22, -1, UInt8[0x08], [4 =&gt; 1])\n  25. \"diffusing.GAT + filamentendsite.actin.fGAT_to_PointedDPi --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_PointedDPi\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 21, 1, UInt8[0x09, 0x02], [4 =&gt; -1])\n  26. \"filamentendsite.actin.rGAT_to_PointedT --&gt; filamentendsite.actin.rGAT_to_PointedT\" 0.8 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 20, -1, UInt8[0x09], [4 =&gt; 1])\n  27. \"diffusing.GAT + filamentendsite.actin.fGAT_to_PointedT --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_PointedT\" 2.158700787326001e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 19, 1, UInt8[0x09, 0x03], [4 =&gt; -1])\n  28. \"filamentendsite.actin.rGAD_to_BarbedD --&gt; filamentendsite.actin.rGAD_to_BarbedD\" 4.25 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 18, -1, UInt8[0x04], [2 =&gt; 1])\n  29. \"diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedD --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedD\" 4.151347667934617e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 17, 1, UInt8[0x01, 0x04], [2 =&gt; -1])\n  30. \"filamentendsite.actin.rGAD_to_BarbedDPi --&gt; filamentendsite.actin.rGAD_to_BarbedDPi\" 4.25 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 16, -1, UInt8[0x05], [2 =&gt; 1])\n  31. \"diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedDPi --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedDPi\" 4.151347667934617e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 15, 1, UInt8[0x02, 0x04], [2 =&gt; -1])\n  32. \"filamentendsite.actin.rGAD_to_BarbedT --&gt; filamentendsite.actin.rGAD_to_BarbedT\" 4.25 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 14, -1, UInt8[0x06], [2 =&gt; 1])\n  33. \"diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedT --&gt; diffusing.GAD + filamentendsite.actin.fGAD_to_BarbedT\" 4.151347667934617e6 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 13, 1, UInt8[0x03, 0x04], [2 =&gt; -1])\n  34. \"filamentendsite.actin.rGADPi_to_BarbedD --&gt; filamentendsite.actin.rGADPi_to_BarbedD\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 12, -1, UInt8[0x04], [3 =&gt; 1])\n  35. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedD --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedD\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 11, 1, UInt8[0x01, 0x05], [3 =&gt; -1])\n  36. \"filamentendsite.actin.rGADPi_to_BarbedDPi --&gt; filamentendsite.actin.rGADPi_to_BarbedDPi\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 10, -1, UInt8[0x05], [3 =&gt; 1])\n  37. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedDPi --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedDPi\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 9, 1, UInt8[0x02, 0x05], [3 =&gt; -1])\n  38. \"filamentendsite.actin.rGADPi_to_BarbedT --&gt; filamentendsite.actin.rGADPi_to_BarbedT\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 8, -1, UInt8[0x06], [3 =&gt; 1])\n  39. \"diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedT --&gt; diffusing.GADPi + filamentendsite.actin.fGADPi_to_BarbedT\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 7, 1, UInt8[0x03, 0x05], [3 =&gt; -1])\n  40. \"filamentendsite.actin.rGAT_to_BarbedD --&gt; filamentendsite.actin.rGAT_to_BarbedD\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 6, -1, UInt8[0x04], [4 =&gt; 1])\n  41. \"diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedD --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedD\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 5, 1, UInt8[0x01, 0x06], [4 =&gt; -1])\n  42. \"filamentendsite.actin.rGAT_to_BarbedDPi --&gt; filamentendsite.actin.rGAT_to_BarbedDPi\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 4, -1, UInt8[0x05], [4 =&gt; 1])\n  43. \"diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedDPi --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedDPi\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 3, 1, UInt8[0x02, 0x06], [4 =&gt; -1])\n  44. \"filamentendsite.actin.rGAT_to_BarbedT --&gt; filamentendsite.actin.rGAT_to_BarbedT\" 1.0 1/s\n        MEDYAN.GeneralFilamentEndCallback(1, 2, -1, UInt8[0x06], [4 =&gt; 1])\n  45. \"diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedT --&gt; diffusing.GAT + filamentendsite.actin.fGAT_to_BarbedT\" 1.6605390671738468e7 nm³/s\n        MEDYAN.GeneralFilamentEndCallback(1, 1, 1, UInt8[0x03, 0x06], [4 =&gt; -1])\n Compartment reactions without callbacks:\n  \"diffusing.GADPi --&gt; diffusing.GAD\" 0.0312 1/s\n  \"diffusing.GAD --&gt; diffusing.GADPi\" 0.0104 1/s\n  \"diffusing.GA --&gt; diffusing.GAT\" 17000.0 1/s\n  \"diffusing.GAT --&gt; diffusing.GA\" 0.011 1/s\n  \"diffusing.GA --&gt; diffusing.GAD\" 1799.9999999999998 1/s\n  \"diffusing.GAD --&gt; diffusing.GA\" 0.071 1/s",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#creating-a-grid",
    "href": "tutorials/3treadmill.html#creating-a-grid",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "Create a 1 by 1 by 3 grid of 500 nm side length voxels.\n\nL = 3\ngrid = CubicGrid((1,1,L),500.0)\n\nCubicGrid([1, 1, 3], 500.0)",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#creating-a-context",
    "href": "tutorials/3treadmill.html#creating-a-context",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "The Context is the object the handles the state of a running simulation.\nCreate a Context using s and grid\n\nc = MEDYAN.Context(s, grid)\n\nMEDYAN.Context at time 0.0s in CubicGrid([1, 1, 3], 500.0)",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#add-mechanical-boundary",
    "href": "tutorials/3treadmill.html#add-mechanical-boundary",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "set_mechboundary!(c, MEDYAN.boundary_box(grid; stiffness=100.0))\n\nMEDYAN.Boundary(SVector{4, Float64}[[-10.0, 0.0, 0.0, 2500.0], [10.0, 0.0, 0.0, 2500.0], [0.0, -10.0, 0.0, 2500.0], [0.0, 10.0, 0.0, 2500.0], [0.0, 0.0, -10.0, 7500.0], [0.0, 0.0, 10.0, 7500.0]], SVector{8, Float64}[])",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#add-agents-to-the-context",
    "href": "tutorials/3treadmill.html#add-agents-to-the-context",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "The context starts empty.\nDistribute 700 of GAT randomly to the chem voxels by mutating the context.\nadddiffusingcount_rand!\n\nadddiffusingcount_rand!(c, s.diffusing.GAT, 700)\n\nAdd a single short filament by mutating the context.\n\nmonomerstates = [s.state.actin.PointedD, s.state.actin.FADPi, s.state.actin.FAT, s.state.actin.BarbedT]\nnodepositions = [\n    SA[0.0,0.0,0.0], \n    SA[0.0,0.0,monomerspacing*length(monomerstates)]\n]\nchem_newfilament!(c; monomerstates, nodepositions, node_mids=[1,])\n\n1",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/3treadmill.html#run-chemistry",
    "href": "tutorials/3treadmill.html#run-chemistry",
    "title": "3. Actin Treadmilling",
    "section": "",
    "text": "Run chemistry for 1.0s and visualize the results.\n\nvis = Visualizer()\nsetvisible!(vis[\"/Grid\"], false)\nsetvisible!(vis[\"/Axes\"], false)\nsetvisible!(vis[\"/Background\"], false)\n\nIf you open the visualizer in a browser and run the following you should get an animated version of below.\n\nfor i in 1:100\n    run_chemistry!(c, 0.01)\n    minimize_energy!(c)\n    draw_context!(vis, c, s)\nend",
    "crumbs": [
      "Tutorials",
      "3. Actin Treadmilling"
    ]
  },
  {
    "objectID": "tutorials/1install.html",
    "href": "tutorials/1install.html",
    "title": "1. Installing MEDYAN.jl",
    "section": "",
    "text": "MEDYAN.jl is a julia package so first install the julia programming language.\nThis tutorial was generated using:\n\n\nJulia Version 1.10.4\nCommit 48d4fd48430 (2024-06-04 10:41 UTC)\nBuild Info:\n  Official https://julialang.org/ release\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 16 × Intel(R) Core(TM) i7-10700KF CPU @ 3.80GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-15.0.7 (ORCJIT, skylake)\nThreads: 1 default, 0 interactive, 1 GC (on 16 virtual cores)\n\n\nThe tutorials should work on newer versions of julia, and on MacOS and Windows, please create an issue if you have a problem or question.\nJulia can be installed with juliaup.\nYou can also download julia here.\nDo not install julia using apt install julia or module load julia, as these don’t have a recent version of julia.\nAfter installing julia, open the REPL with the julia command in terminal.",
    "crumbs": [
      "Tutorials",
      "1. Installing MEDYAN.jl"
    ]
  },
  {
    "objectID": "tutorials/1install.html#install-julia",
    "href": "tutorials/1install.html#install-julia",
    "title": "1. Installing MEDYAN.jl",
    "section": "",
    "text": "MEDYAN.jl is a julia package so first install the julia programming language.\nThis tutorial was generated using:\n\n\nJulia Version 1.10.4\nCommit 48d4fd48430 (2024-06-04 10:41 UTC)\nBuild Info:\n  Official https://julialang.org/ release\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 16 × Intel(R) Core(TM) i7-10700KF CPU @ 3.80GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-15.0.7 (ORCJIT, skylake)\nThreads: 1 default, 0 interactive, 1 GC (on 16 virtual cores)\n\n\nThe tutorials should work on newer versions of julia, and on MacOS and Windows, please create an issue if you have a problem or question.\nJulia can be installed with juliaup.\nYou can also download julia here.\nDo not install julia using apt install julia or module load julia, as these don’t have a recent version of julia.\nAfter installing julia, open the REPL with the julia command in terminal.",
    "crumbs": [
      "Tutorials",
      "1. Installing MEDYAN.jl"
    ]
  },
  {
    "objectID": "tutorials/1install.html#install-packages-needed-for-tutorials",
    "href": "tutorials/1install.html#install-packages-needed-for-tutorials",
    "title": "1. Installing MEDYAN.jl",
    "section": "Install packages needed for tutorials",
    "text": "Install packages needed for tutorials\nDownload the exact julia environment used to generate the tutorials.\nClick to Download\nNext extract this zip file and cd into the extracted directory.\nNow run\njulia --project -e 'import Pkg; Pkg.instantiate()'\nTo start the julia REPL in the correct environment to run the tutorials, use:\njulia --project\nFrom inside the medyan-tutorial directory.\nYou can also save julia files in this directory and use the VSCode julia extension to set the environment, and run code blocks, if you prefer that over the REPL.\nhttps://code.visualstudio.com/docs/languages/julia",
    "crumbs": [
      "Tutorials",
      "1. Installing MEDYAN.jl"
    ]
  },
  {
    "objectID": "tutorials/1install.html#running-tests",
    "href": "tutorials/1install.html#running-tests",
    "title": "1. Installing MEDYAN.jl",
    "section": "Running tests",
    "text": "Running tests\nThese tests may take a few minutes to run.\njulia lib/MEDYAN/test/install-deps.jl\njulia --project=lib/MEDYAN/test lib/MEDYAN/test/runtests.jl\nIf you have any errors or failing tests create an issue",
    "crumbs": [
      "Tutorials",
      "1. Installing MEDYAN.jl"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html",
    "href": "tutorials/2rdme.html",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "Inspired by:\nhttps://www.youtube.com/watch?v=TORwMc2AaRE&t=0s\n\n\nOpen a julia REPL or jupyter notebook using the medyan-tutorial environment you created in tutorial 1.\nLoad MEDYAN with MEDYANVis for visualization\n\nusing MEDYAN\nusing MEDYANVis\nusing CairoMakie\nusing Random\nusing SmallZarrGroups\nRandom.seed!(1234);\n\n\n\n\nThe first step is declaring the names of agents in the system.\nThis system will contain three diffusing species.\n\nagent_names = MEDYAN.AgentNames(;\n    diffusingspeciesnames=[\n        :R, # Rock\n        :P, # Paper\n        :S, # Scissors\n    ],\n)\n\nMEDYAN.AgentNames([:R, :P, :S], Symbol[], Symbol[], Symbol[], Tuple{Symbol, Vector{Symbol}}[], Symbol[], Symbol[], Symbol[])\n\n\n\n\n\nAfter the agent names are declared, the system can be defined.\nThis is done by constructing a MEDYAN.SysDef object from the agent_names and then mutating it to add parameters, reactions, and callbacks.\n\ns = MEDYAN.SysDef(agent_names)\n\nMEDYAN.SysDef\n Diffusing species:\n  R: 0.0 nm²/s\n  P: 0.0 nm²/s\n  S: 0.0 nm²/s\n\n\nAdd a diffusion coefficient of 1E6 nm²/s to all species. All units are based on nm, s, pN\nadd_diffusion_coeff!\n\nD = 1E6\nadd_diffusion_coeff!(s, :R, D) # nm²/s\nadd_diffusion_coeff!(s, :P, D) # nm²/s\nadd_diffusion_coeff!(s, :S, D) # nm²/s\n\nMEDYAN.SysDef\n Diffusing species:\n  R: 1.0e6 nm²/s\n  P: 1.0e6 nm²/s\n  S: 1.0e6 nm²/s\n\n\nAdd reactions, paper “beats” rock, scissors “beats” paper, rock “beats” scissors. In this simulation “beats” means convert to self type.\nIn this case because the reaction is between two diffusing species, it has units of nm³/s. You can think of this as the volume where if exactly one of each reactant existed the rate would be 1 per second.\naddreaction!\n\nrate = 50.0*(500.0^3) # nm³/s\naddreaction!(s,\n    \"diffusing.P + diffusing.R --&gt; 2diffusing.P\",\n    rate,\n    1,\n)\naddreaction!(s,\n    \"diffusing.S + diffusing.P --&gt; 2diffusing.S\",\n    rate,\n    1,\n)\naddreaction!(s,\n    \"diffusing.R + diffusing.S --&gt; 2diffusing.R\",\n    rate,\n    1,\n)\n\nMEDYAN.SysDef\n Diffusing species:\n  R: 1.0e6 nm²/s\n  P: 1.0e6 nm²/s\n  S: 1.0e6 nm²/s\n Compartment reactions without callbacks:\n  \"diffusing.P + diffusing.R --&gt; 2diffusing.P\" 6.25e9 nm³/s\n  \"diffusing.S + diffusing.P --&gt; 2diffusing.S\" 6.25e9 nm³/s\n  \"diffusing.R + diffusing.S --&gt; 2diffusing.R\" 6.25e9 nm³/s\n\n\n\n\n\nAll simulations run in a grid.\nThis is a box that contains the simulation.\nThe grid is composed of chemistry voxels, small cubes that can have different counts of the various diffusing species.\nCreate a 50 by 50 by 1 grid of 500 nm side length voxels.\n\nL = 50\ngrid = CubicGrid((L,L,1),500.0)\n\nCubicGrid([50, 50, 1], 500.0)\n\n\n\n\n\nThe Context is the object the handles the state of a running simulation.\nCreate a Context using s and grid\n\nc = MEDYAN.Context(s, grid)\n\nMEDYAN.Context at time 0.0s in CubicGrid([50, 50, 1], 500.0)\n\n\n\n\n\nThe context starts empty.\nDistribute 2000 of each species randomly to the chem voxels by mutating the context.\nadddiffusingcount_rand!\n\nadddiffusingcount_rand!(c, s.diffusing.R, 2000)\nadddiffusingcount_rand!(c, s.diffusing.P, 2000)\nadddiffusingcount_rand!(c, s.diffusing.S, 2000)\n\n\n\n\nRun chemistry for 1.0s and visualize the results.\n\nvis = Visualizer()\nsetvisible!(vis[\"/Grid\"], false)\nsetvisible!(vis[\"/Axes\"], false)\nsetvisible!(vis[\"/Background\"], false)\n\nIf you open the visualizer in a browser with open(vis) and run the following you should get an animated version of below.\n\nfor i in 1:100\n    run_chemistry!(c, 0.01)\n    MEDYANVis.drawdiffusing!(vis[\"diffusing\"], c.grid, c.chemistryengine, s; size = 0.8)\n    sleep(0.02)\nend\n\n\n\n    \n    \n    \n    \n\n\n\n\n\nNext we will see how to plot quantities from the simulation.\nIf you want to analyze a trajectory in detail, or load a system state, one method is to use snapshots. For details see snapshot group reference\nMEDYAN.load_snapshot! can be used to reload snapshots, this is very useful for restarting simulations, or changing the simulation state in a different programming language, but not needed in this tutorial.\nSmallZarrGroups.jl can be used to save/load snapshot groups to/from disk, in zip files, or in directories.\nRun chemistry for another 1.0s and store a snapshot every 0.01s in a vector.\n\nusing SmallZarrGroups\nsnapshots = ZGroup[]\nfor i in 1:100\n    run_chemistry!(c, 0.01)\n    push!(snapshots, MEDYAN.snapshot(c))\nend\n\nNow that the simulation is done the results can be analyzed. For longer simulations, these snapshots should be saved to disk with for example:\nSmallZarrGroups.save_dir(\"snapshot$i.zarr.zip\",MEDYAN.snapshot(c))\nto avoid needed to rerun the simulation and to avoid using too much RAM.\n\ntotal_rocks = Int[]\ntotal_papers = Int[]\ntotal_scissors = Int[]\ntimes = Float64[]\nfor group in snapshots\n    totals = sum(collect(group[\"diffusingcounts\"]);dims=2)\n    push!(times, attrs(group)[\"time (s)\"])\n    push!(total_rocks, totals[s.diffusing.R])\n    push!(total_papers, totals[s.diffusing.P])\n    push!(total_scissors, totals[s.diffusing.S])\nend\n\n\nfigure, axis, lineplot = lines(times, total_rocks; label=\"rock\")\nlines!(times, total_papers; label=\"paper\")\nlines!(times, total_scissors; label=\"scissors\")\nlines!(\n    times,\n    total_scissors.+total_papers.+total_rocks;\n    label=\"combined\")\naxislegend()\ncurrent_figure()\n\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie ~/.julia/packages/Makie/rEu75/src/scenes.jl:227\n\n\n\n\n\n\n\n\n\nIf you are using VSCode or Jupyter the figure will be displayed.\nIf you are using the REPL, save the figure as a PDF to view it.\nsave(\"tutorial2-plot.pdf\", current_figure())",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#setup",
    "href": "tutorials/2rdme.html#setup",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "Open a julia REPL or jupyter notebook using the medyan-tutorial environment you created in tutorial 1.\nLoad MEDYAN with MEDYANVis for visualization\n\nusing MEDYAN\nusing MEDYANVis\nusing CairoMakie\nusing Random\nusing SmallZarrGroups\nRandom.seed!(1234);",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#declaring-agent-names",
    "href": "tutorials/2rdme.html#declaring-agent-names",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "The first step is declaring the names of agents in the system.\nThis system will contain three diffusing species.\n\nagent_names = MEDYAN.AgentNames(;\n    diffusingspeciesnames=[\n        :R, # Rock\n        :P, # Paper\n        :S, # Scissors\n    ],\n)\n\nMEDYAN.AgentNames([:R, :P, :S], Symbol[], Symbol[], Symbol[], Tuple{Symbol, Vector{Symbol}}[], Symbol[], Symbol[], Symbol[])",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#defining-system",
    "href": "tutorials/2rdme.html#defining-system",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "After the agent names are declared, the system can be defined.\nThis is done by constructing a MEDYAN.SysDef object from the agent_names and then mutating it to add parameters, reactions, and callbacks.\n\ns = MEDYAN.SysDef(agent_names)\n\nMEDYAN.SysDef\n Diffusing species:\n  R: 0.0 nm²/s\n  P: 0.0 nm²/s\n  S: 0.0 nm²/s\n\n\nAdd a diffusion coefficient of 1E6 nm²/s to all species. All units are based on nm, s, pN\nadd_diffusion_coeff!\n\nD = 1E6\nadd_diffusion_coeff!(s, :R, D) # nm²/s\nadd_diffusion_coeff!(s, :P, D) # nm²/s\nadd_diffusion_coeff!(s, :S, D) # nm²/s\n\nMEDYAN.SysDef\n Diffusing species:\n  R: 1.0e6 nm²/s\n  P: 1.0e6 nm²/s\n  S: 1.0e6 nm²/s\n\n\nAdd reactions, paper “beats” rock, scissors “beats” paper, rock “beats” scissors. In this simulation “beats” means convert to self type.\nIn this case because the reaction is between two diffusing species, it has units of nm³/s. You can think of this as the volume where if exactly one of each reactant existed the rate would be 1 per second.\naddreaction!\n\nrate = 50.0*(500.0^3) # nm³/s\naddreaction!(s,\n    \"diffusing.P + diffusing.R --&gt; 2diffusing.P\",\n    rate,\n    1,\n)\naddreaction!(s,\n    \"diffusing.S + diffusing.P --&gt; 2diffusing.S\",\n    rate,\n    1,\n)\naddreaction!(s,\n    \"diffusing.R + diffusing.S --&gt; 2diffusing.R\",\n    rate,\n    1,\n)\n\nMEDYAN.SysDef\n Diffusing species:\n  R: 1.0e6 nm²/s\n  P: 1.0e6 nm²/s\n  S: 1.0e6 nm²/s\n Compartment reactions without callbacks:\n  \"diffusing.P + diffusing.R --&gt; 2diffusing.P\" 6.25e9 nm³/s\n  \"diffusing.S + diffusing.P --&gt; 2diffusing.S\" 6.25e9 nm³/s\n  \"diffusing.R + diffusing.S --&gt; 2diffusing.R\" 6.25e9 nm³/s",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#creating-a-grid",
    "href": "tutorials/2rdme.html#creating-a-grid",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "All simulations run in a grid.\nThis is a box that contains the simulation.\nThe grid is composed of chemistry voxels, small cubes that can have different counts of the various diffusing species.\nCreate a 50 by 50 by 1 grid of 500 nm side length voxels.\n\nL = 50\ngrid = CubicGrid((L,L,1),500.0)\n\nCubicGrid([50, 50, 1], 500.0)",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#creating-a-context",
    "href": "tutorials/2rdme.html#creating-a-context",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "The Context is the object the handles the state of a running simulation.\nCreate a Context using s and grid\n\nc = MEDYAN.Context(s, grid)\n\nMEDYAN.Context at time 0.0s in CubicGrid([50, 50, 1], 500.0)",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#add-agents-to-the-context",
    "href": "tutorials/2rdme.html#add-agents-to-the-context",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "The context starts empty.\nDistribute 2000 of each species randomly to the chem voxels by mutating the context.\nadddiffusingcount_rand!\n\nadddiffusingcount_rand!(c, s.diffusing.R, 2000)\nadddiffusingcount_rand!(c, s.diffusing.P, 2000)\nadddiffusingcount_rand!(c, s.diffusing.S, 2000)",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#run-chemistry",
    "href": "tutorials/2rdme.html#run-chemistry",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "Run chemistry for 1.0s and visualize the results.\n\nvis = Visualizer()\nsetvisible!(vis[\"/Grid\"], false)\nsetvisible!(vis[\"/Axes\"], false)\nsetvisible!(vis[\"/Background\"], false)\n\nIf you open the visualizer in a browser with open(vis) and run the following you should get an animated version of below.\n\nfor i in 1:100\n    run_chemistry!(c, 0.01)\n    MEDYANVis.drawdiffusing!(vis[\"diffusing\"], c.grid, c.chemistryengine, s; size = 0.8)\n    sleep(0.02)\nend",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "tutorials/2rdme.html#snapshots-and-plotting",
    "href": "tutorials/2rdme.html#snapshots-and-plotting",
    "title": "2. Rock Paper Scissors Stochastic Reaction Diffusion",
    "section": "",
    "text": "Next we will see how to plot quantities from the simulation.\nIf you want to analyze a trajectory in detail, or load a system state, one method is to use snapshots. For details see snapshot group reference\nMEDYAN.load_snapshot! can be used to reload snapshots, this is very useful for restarting simulations, or changing the simulation state in a different programming language, but not needed in this tutorial.\nSmallZarrGroups.jl can be used to save/load snapshot groups to/from disk, in zip files, or in directories.\nRun chemistry for another 1.0s and store a snapshot every 0.01s in a vector.\n\nusing SmallZarrGroups\nsnapshots = ZGroup[]\nfor i in 1:100\n    run_chemistry!(c, 0.01)\n    push!(snapshots, MEDYAN.snapshot(c))\nend\n\nNow that the simulation is done the results can be analyzed. For longer simulations, these snapshots should be saved to disk with for example:\nSmallZarrGroups.save_dir(\"snapshot$i.zarr.zip\",MEDYAN.snapshot(c))\nto avoid needed to rerun the simulation and to avoid using too much RAM.\n\ntotal_rocks = Int[]\ntotal_papers = Int[]\ntotal_scissors = Int[]\ntimes = Float64[]\nfor group in snapshots\n    totals = sum(collect(group[\"diffusingcounts\"]);dims=2)\n    push!(times, attrs(group)[\"time (s)\"])\n    push!(total_rocks, totals[s.diffusing.R])\n    push!(total_papers, totals[s.diffusing.P])\n    push!(total_scissors, totals[s.diffusing.S])\nend\n\n\nfigure, axis, lineplot = lines(times, total_rocks; label=\"rock\")\nlines!(times, total_papers; label=\"paper\")\nlines!(times, total_scissors; label=\"scissors\")\nlines!(\n    times,\n    total_scissors.+total_papers.+total_rocks;\n    label=\"combined\")\naxislegend()\ncurrent_figure()\n\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie ~/.julia/packages/Makie/rEu75/src/scenes.jl:227\n\n\n\n\n\n\n\n\n\nIf you are using VSCode or Jupyter the figure will be displayed.\nIf you are using the REPL, save the figure as a PDF to view it.\nsave(\"tutorial2-plot.pdf\", current_figure())",
    "crumbs": [
      "Tutorials",
      "2. Rock Paper Scissors Stochastic Reaction Diffusion"
    ]
  },
  {
    "objectID": "docstrings.html",
    "href": "docstrings.html",
    "title": "Docstrings",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\n\n\n\n\nBase.:*\n\n\n\n\nBase.copy\n\n\n\n\nBase.delete!\n\n\n\n\nBase.empty!\n\n\n\n\nBase.getindex\n\n\n\n\nBase.haskey\n\n\n\n\nBase.iterate\n\n\n\n\nBase.length\n\n\n\n\nBase.push!\n\n\n\n\nBase.setindex!\n\n\n\n\nMEDYAN.AgentNames\n\n\n\n\nMEDYAN.Boundary\n\n\n\n\nMEDYAN.CadherinParams\n\n\n\n\nMEDYAN.CadherinState\n\n\n\n\nMEDYAN.Context\n\n\n\n\nMEDYAN.CubicGrid\n\n\n\n\nMEDYAN.Decimated2MonSiteMinAngleRange\n\n\n\n\nMEDYAN.Decimated2MonSiteRange\n\n\n\n\nMEDYAN.FilamentEndSiteGeneral\n\n\n\n\nMEDYAN.FilamentSiteGeneral\n\n\n\n\nMEDYAN.Link2MonParams\n\n\n\n\nMEDYAN.Link2MonSiteCount\n\n\n\n\nMEDYAN.Link2MonSiteMonomerStateMatch\n\n\n\n\nMEDYAN.Link2MonSiteMotorCatch\n\n\n\n\nMEDYAN.Link2MonSiteMotorStall\n\n\n\n\nMEDYAN.Link2MonSiteOne\n\n\n\n\nMEDYAN.Link2MonSiteSlipBond\n\n\n\n\nMEDYAN.Link2MonState\n\n\n\n\nMEDYAN.MembraneSiteDiffusing\n\n\n\n\nMEDYAN.MembraneSpeciesParams\n\n\n\n\nMEDYAN.MonLink2MonSiteOne\n\n\n\n\nMEDYAN.MonomerName\n\n\n\n\nMEDYAN.SysDef\n\n\n\n\nMEDYAN.VertexName\n\n\n\n\nMEDYAN.VertexState\n\n\n\n\nMEDYAN.adapt_membranes!\n\n\n\n\nMEDYAN.add_decimated_2mon_site!\n\n\n\n\nMEDYAN.add_diffusion_coeff!\n\n\n\n\nMEDYAN.add_filament_params!\n\n\n\n\nMEDYAN.add_link_2mon!\n\n\n\n\nMEDYAN.add_link_2mon_site!\n\n\n\n\nMEDYAN.add_membranesitereaction!\n\n\n\n\nMEDYAN.addcadherin!\n\n\n\n\nMEDYAN.addcadherinsite!\n\n\n\n\nMEDYAN.adddiffusingcount_rand!\n\n\n\n\nMEDYAN.addfilament_reaction!\n\n\n\n\nMEDYAN.addfilamentend_reaction!\n\n\n\n\nMEDYAN.addfilamentendsite!\n\n\n\n\nMEDYAN.addfilamentsite!\n\n\n\n\nMEDYAN.addmembranediffusingcount_rand!\n\n\n\n\nMEDYAN.addmembranesite!\n\n\n\n\nMEDYAN.addpossiblecadherinsite!\n\n\n\n\nMEDYAN.addreaction!\n\n\n\n\nMEDYAN.addreactioncallback!\n\n\n\n\nMEDYAN.addunbindinglink_2mon_site!\n\n\n\n\nMEDYAN.boundary_box\n\n\n\n\nMEDYAN.boundary_capsule\n\n\n\n\nMEDYAN.boundary_cylinder\n\n\n\n\nMEDYAN.boundary_plane\n\n\n\n\nMEDYAN.centerof\n\n\n\n\nMEDYAN.chem_adddiffusingcount!\n\n\n\n\nMEDYAN.chem_addfixedcount!\n\n\n\n\nMEDYAN.chem_depolymerize!\n\n\n\n\nMEDYAN.chem_newfilament!\n\n\n\n\nMEDYAN.chem_newlink_2mon!\n\n\n\n\nMEDYAN.chem_polymerize!\n\n\n\n\nMEDYAN.chem_removefilament!\n\n\n\n\nMEDYAN.chem_removelink_2mon!\n\n\n\n\nMEDYAN.chem_setlink_2mon_state!\n\n\n\n\nMEDYAN.chem_setmonomerstate!\n\n\n\n\nMEDYAN.compute_all_membrane_geometry!_system\n\n\n\n\nMEDYAN.defer_chem_caching!\n\n\n\n\nMEDYAN.fil_mon_states\n\n\n\n\nMEDYAN.fil_node_mon_ids\n\n\n\n\nMEDYAN.fil_node_positions\n\n\n\n\nMEDYAN.fil_num_unmin_ends\n\n\n\n\nMEDYAN.filter_grididat\n\n\n\n\nMEDYAN.filtype_fil_ids\n\n\n\n\nMEDYAN.grididat\n\n\n\n\nMEDYAN.is_chem_cache_valid\n\n\n\n\nMEDYAN.link_2mon_endnames\n\n\n\n\nMEDYAN.link_2mon_state\n\n\n\n\nMEDYAN.load_snapshot!\n\n\n\n\nMEDYAN.minimize_energy!\n\n\n\n\nMEDYAN.mon_3states\n\n\n\n\nMEDYAN.mon_exists\n\n\n\n\nMEDYAN.mon_minimized\n\n\n\n\nMEDYAN.mon_plusvector\n\n\n\n\nMEDYAN.mon_position\n\n\n\n\nMEDYAN.mon_position_plusvector\n\n\n\n\nMEDYAN.newfilament_rand!\n\n\n\n\nMEDYAN.newmembrane!\n\n\n\n\nMEDYAN.num_filtypes\n\n\n\n\nMEDYAN.num_vertexwithstate\n\n\n\n\nMEDYAN.randompoint\n\n\n\n\nMEDYAN.refresh_chem_cache!\n\n\n\n\nMEDYAN.resolve_all_filament_mesh_crossing!\n\n\n\n\nMEDYAN.run_chemistry!\n\n\n\n\nMEDYAN.set_chemboundary!\n\n\n\n\nMEDYAN.set_enable_cylinder_volume_exclusion!\n\n\n\n\nMEDYAN.set_mechboundary!\n\n\n\n\nMEDYAN.set_time!\n\n\n\n\nMEDYAN.sever_filament!\n\n\n\n\nMEDYAN.vertex_state\n\n\n\n\nNLSolversBase.value!!\n\n\n\n\nsrc/auxprocs.jl\n\n\n\n\nsrc/boundary.jl\n\n\n\n\nsrc/cadherins/possiblecadherinsite.jl\n\n\n\n\nsrc/context.jl\n\n\n\n\nsrc/decimated_2mon_sites.jl\n\n\n\n\nsrc/filamentendsites.jl\n\n\n\n\nsrc/filamentsites.jl\n\n\n\n\nsrc/grids.jl\n\n\n\n\nsrc/link_2mon_sites.jl\n\n\n\n\nsrc/membrane/membranesites.jl\n\n\n\n\nsrc/membrane/meshadapt.jl\n\n\n\n\nsrc/minimize_energy.jl\n\n\n\n\nsrc/mon_link_2mon_sites.jl\n\n\n\n\nsrc/sever_filament.jl\n\n\n\n\nsrc/sys_def.jl\n\n\n\n\nsrc/trajectory-io/snapshot.jl\n\n\n\n\nsrc/util/math/cuboidslicing.jl\n\n\n\n\nsrc/util/stableindex.jl\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Reference",
      "Docstrings"
    ]
  },
  {
    "objectID": "reference/fileformats.html",
    "href": "reference/fileformats.html",
    "title": "File Formats",
    "section": "",
    "text": "MEDYAN.jl uses Zarr v2 zip store for saving snapshots.",
    "crumbs": [
      "Reference",
      "File Formats"
    ]
  },
  {
    "objectID": "reference/fileformats.html#trajectory-output-directory",
    "href": "reference/fileformats.html#trajectory-output-directory",
    "title": "File Formats",
    "section": "trajectory output directory",
    "text": "trajectory output directory\nTrajectory outputs and logs are stored in a directory.\nThe output directory contains a traj sub directory with a header.json file, many snap$(NUMBER).zarr.zip files where NUMBER is the frame number of the snapshot, and finally a footer.json.\nThe initial state returned by setup is stored in snap0.zarr.zip.\nInside the snap$(NUMBER).zarr.zip there is a snap/medyan group containing the snapshot of the MEDYAN.Context at the step. Other state may be stored in child groups of snap.\nThe header.json file also has a top level \"medyan\" key with a value describing the system being simulated.\nOther header information may be under other top level keys.\nSee https://github.com/medyan-dev/MEDYANSimRunner.jl for more details on the output directory structure.",
    "crumbs": [
      "Reference",
      "File Formats"
    ]
  },
  {
    "objectID": "reference/fileformats.html#medyan-header-json-object.",
    "href": "reference/fileformats.html#medyan-header-json-object.",
    "title": "File Formats",
    "section": "\"medyan\" Header JSON object.",
    "text": "\"medyan\" Header JSON object.\nheader.json[\"medyan\"] contains static metadata about the simulation that is constant over time.\n\nExample header.json \"medyan\" value\n\nusing MEDYAN\nimport JSON3\ncinit, s = MEDYAN.example_all_sites_context()\nJSON3.pretty(MEDYAN.header(cinit); allow_inf = true)\n\n{\n    \"version\": \"0.1.0\",\n    \"medyanInfo\": {\n        \"title\": \"MEDYAN.jl\",\n        \"version\": \"0.1.0\",\n        \"sourceCodeUrl\": \"https://github.com/medyan-dev/MEDYAN.jl\"\n    },\n    \"size\": {\n        \"x(nm)\": 2000,\n        \"y(nm)\": 500,\n        \"z(nm)\": 500\n    },\n    \"chem_grid_size\": {\n        \"nx\": 4,\n        \"ny\": 1,\n        \"nz\": 1,\n        \"voxel_x(nm)\": 500,\n        \"voxel_y(nm)\": 500,\n        \"voxel_z(nm)\": 500\n    },\n    \"diffusing_species\": [\n        {\n            \"name\": \"b\"\n        },\n        {\n            \"name\": \"c\"\n        }\n    ],\n    \"membrane_diffusing_species\": [\n        {\n            \"name\": \"ma\"\n        },\n        {\n            \"name\": \"mb\"\n        },\n        {\n            \"name\": \"mc\"\n        }\n    ],\n    \"fixed_species\": [\n        {\n            \"name\": \"d\"\n        },\n        {\n            \"name\": \"a\"\n        }\n    ],\n    \"filaments\": [\n        {\n            \"name\": \"a\",\n            \"radius(nm)\": 3,\n            \"monomerstates\": [\n                \"me\",\n                \"a\",\n                \"b\",\n                \"c\",\n                \"pe\"\n            ]\n        },\n        {\n            \"name\": \"b\",\n            \"radius(nm)\": 3,\n            \"monomerstates\": [\n                \"me\",\n                \"a\",\n                \"b\",\n                \"c\",\n                \"pe\"\n            ]\n        }\n    ],\n    \"link_2mons\": [\n        {\n            \"name\": \"a\"\n        },\n        {\n            \"name\": \"b\"\n        },\n        {\n            \"name\": \"c\"\n        },\n        {\n            \"name\": \"d\"\n        }\n    ]\n}",
    "crumbs": [
      "Reference",
      "File Formats"
    ]
  },
  {
    "objectID": "reference/fileformats.html#snapshot-group",
    "href": "reference/fileformats.html#snapshot-group",
    "title": "File Formats",
    "section": "Snapshot group",
    "text": "Snapshot group\nA snapshot describes the state of a Context at a single point in time.\nA snapshot can be used to set the state of a Context if it was constructed with the same system and parameters as the Context used to create the snapshot. Trying to load a snapshot into a Context constructed with a different system or parameters may lead to unexpected results.\nBy default units are in nm, pN, and s. Coordinates are relative to the center of the grid.\nThe snapshot doesn’t hold the exact full state of a Context, simulations restarted from a snapshot may not have the exact same results because:\n\nThe snapshot doesn’t store the state of the random number generator.\nCoordinates may be rounded to save disk space.\nDictionaries and other internal data structures may get reordered and or resorted when the snapshot is loaded.\nMultithreading may be non deterministic.\n\nBut if rounding isn’t too extreme, the reloaded Context should have the same statistics.\n\nSnapshot Versioning\nThe snapshot format is versioned by the “version” attribute. The current snapshot version is:\n\nusing MEDYAN\nMEDYAN.SNAPSHOT_VERSION\n\nv\"0.8.0\"\n\n\nCurrently before snapshot version 1.0.0 anything goes.\nAfter snapshot version 1.0.0 is released.\nSnapshots written with a previous snapshot version above v\"1\" should be readable. Snapshots written with a newer snapshot version are generally not readable.\nIf new agent types are added to MEDYAN.jl, usually only the minor version needs to be updated, as nothing special needs to be done to read older snapshot versions without that added agent type.\nIf new data is added to an existing agent type, also usually only the minor version needs to be increment, though the case of the new data not existing must be handled with some default.\nIf the way an existing agent type is stored significantly changes, such that external code analyzing the snapshot would need to be modified, the major version must be incremented. Also if possible there should be a function to update a snapshot from the old version to the new version.\n\n“#experimental” and “#comment” prefixes\nAny group, dataset, or attribute name prefixed with with “#” can change format or be removed without changing the snapshot version.\n“#experimental” is used for saving new types of agents or other data that doesn’t have a stable format yet.\n“#comment” is used for saving human readable comments that could change in format or wording.\n\n\n\nExample snapshot\n\nusing MEDYAN\nusing SmallZarrGroups\ncinit, s = MEDYAN.example_all_sites_context()\ngroup = MEDYAN.snapshot(cinit)\n\n\n\n\n\n\n\nSnapshot 📂\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\ntime (s)\n\n\nattrs(group)[\"time (s)\"]\n\n0.0\n\n\nDefault: No change\nSee MEDYAN.set_time!\n\n\n\nversion\n\n\nattrs(group)[\"version\"]\n\n\"0.8.0\"\n\n\nDefault: No change\nSee Snapshot Versioning\n\n\n\nuuid\n\n\nattrs(group)[\"uuid\"]\n\n\"37eee81f-88ae-4d11-b6b3-d38e1ccf0a08\"\n\n\nMust be set to exactly “37eee81f-88ae-4d11-b6b3-d38e1ccf0a08”\nto be considered a valid MEDYAN snapshot.\n\n\n\n\n\n\n\n\n\n\n🔢\n\n\n\n\n\n\n\ndiffusingcounts\n\n\ncollect(group[\"diffusingcounts\"])\n\n2×4 Matrix{Int32}:\n 0   100   40  0\n 0  1000  400  0\n\n\nDefault: Empty\nIndexed by [species id, compartment id] to give count.\nSee MEDYAN.chem_adddiffusingcount!\n\n\n\nfixedcounts\n\n\ncollect(group[\"fixedcounts\"])\n\n2×4 Matrix{Float64}:\n 10.25  0.0  0.0   0.0\n  0.0   0.0  0.0  20.25\n\n\nDefault: Empty\nIndexed by [species id, compartment id] to give count.\nSee MEDYAN.chem_addfixedcount!\n\n\n\n\n\n\n\n\n\n\n\n📂\n\n\n\n\n\n\n\n\n\n\n\n\nchemboundary\n\n\n\n\n\nThere is a dataset for each type of boundary, the total boundary is an intersection of the following.\nSee MEDYAN.Boundary\n\n\n🔢 capsules\n\n\ncollect(group[\"chemboundary/capsules\"])\n\n8×1 Matrix{Float64}:\n     0.0\n     0.0\n     0.0\n     0.0\n     0.0\n     0.0\n 10000.0\n     1.0\n\n\nDefault: Empty\nEach column of the dataset is a capsule.\n\n\n\n🔢 planes\n\n\ncollect(group[\"chemboundary/planes\"])\n\n4×6 Matrix{Float64}:\n   -10.0     10.0     0.0     0.0     0.0     0.0\n     0.0      0.0   -10.0    10.0     0.0     0.0\n     0.0      0.0     0.0     0.0   -10.0    10.0\n 10000.0  10000.0  2500.0  2500.0  2500.0  2500.0\n\n\nDefault: Empty\nEach column of the dataset is a plane.\n\n\n\n\n\n\n\n\n\n\n\n\nfilaments\n\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\nposition_scale\n\n\nattrs(group[\"filaments\"])[\"position_scale\"]\n\n3\n\n\nDefault: No effect\nFilament positions were rounded to the nearest 2^-position_scale nm when saved.\n\n\n\n\n\nThere is a subgroup for each filament type with at least one filament. The subgroups are named by their filament type id. For example:\n\n\n\n\n\n\n\n📂 1\n\n\n\n\n\n\n\n🔢 endloadforces\n\n\ncollect(group[\"filaments/1/endloadforces\"])\n\n2×2 Matrix{Float64}:\n 0.0  0.0\n 0.0  0.0\n\n\nFilament end load forces (pN).\nEach row is the load force on the minus and plus ends of a filament.\n\n\n\n🔢 fids\n\n\ncollect(group[\"filaments/1/fids\"])\n\n2-element Vector{Int32}:\n 1\n 2\n\n\nFilament ids.\n\n\n\n🔢 minusend_num_notminimized\n\n\ncollect(group[\"filaments/1/minusend_num_notminimized\"])\n\n2-element Vector{Int32}:\n 0\n 0\n\n\nNumber of newly added monomers to the filament minus ends since last minimization.\n\n\n\n🔢 plusend_num_notminimized\n\n\ncollect(group[\"filaments/1/plusend_num_notminimized\"])\n\n2-element Vector{Int32}:\n 0\n 0\n\n\nNumber of newly added monomers to the filament plus ends since last minimization.\n\n\n\n🔢 num_cylinders\n\n\ncollect(group[\"filaments/1/num_cylinders\"])\n\n2-element Vector{Int32}:\n 1\n 1\n\n\nNumber of cylinders per filament.\n\n\n\n🔢 num_monomers\n\n\ncollect(group[\"filaments/1/num_monomers\"])\n\n2-element Vector{Int32}:\n 9\n 9\n\n\nNumber of monomers per filament.\n\n\n\n🔢 node_mids\n\n\ncollect(group[\"filaments/1/node_mids\"])\n\n2-element Vector{Int32}:\n 1\n 1\n\n\nThe monomer ids at the minus ends of the cylinders.\n                                   |\n                        -----+-----|-----+-----\n    minus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                        -----+-----|-----+-----\n                                   |\n                                   ^ A nodeposition is indicated by the line.\nThe monomer id with parenthesis (M) will in node_mids\n\n\n\n🔢 nodepositions\n\n\ncollect(group[\"filaments/1/nodepositions\"])\n\n4×3 Matrix{Float64}:\n -530.0  -50.0  -50.0\n -440.0  -50.0  -50.0\n -520.0  -49.0  -50.0\n -430.0  -49.0  -50.0\n\n\nEach row is a node position in nm.\n\n\n\n🔢 monomerstates\n\n\ncollect(group[\"filaments/1/monomerstates\"])\n\n18-element Vector{UInt8}:\n 0x01\n 0x02\n 0x02\n 0x02\n 0x02\n 0x02\n 0x02\n 0x02\n 0x05\n 0x01\n 0x02\n 0x02\n 0x02\n 0x02\n 0x02\n 0x02\n 0x02\n 0x05\n\n\nMonomer states.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlink_2mons\n\n\n\n\n\nThere is a subgroup for each link_2mon type with at least one link_2mon. The subgroups are named by their link_2mon type id. For example:\n\n\n\n\n\n\n\n📂 1\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\nnum_link_2mons\n\n\nattrs(group[\"link_2mons/1\"])[\"num_link_2mons\"]\n\n2\n\n\nNumber of link_2mons of this type.\n\n\n\nnext_lid\n\n\nattrs(group[\"link_2mons/1\"])[\"next_lid\"]\n\n3\n\n\nThe default next link id for new links.\nThis should be greater than all the existing lids.\n\n\n\n\n\n\n🔢 endnames\n\n\ncollect(group[\"link_2mons/1/endnames\"])\n\n2×6 Matrix{Int64}:\n 1  1  2  1  1  2\n 1  1  2  1  2  2\n\n\nThe pairs of monomers that the link_2mons are linked between. The monomer pairs are directed and unique.\nEach row of this matrix represents two monomers. The 6 integers per row are in order:\n\nMinus end filament type id.\nMinus end filament id.\nMinus end monomer id.\nPlus end filament type id.\nPlus end filament id.\nPlus end monomer id.\n\n\n\n\n🔢 lids\n\n\ncollect(group[\"link_2mons/1/lids\"])\n\n2-element Vector{Int64}:\n 1\n 2\n\n\nThe link_2mon ids.\nLinks retain their ids while they remain bound.\n\n\n\n📂 state\n\nDefault: default link_2mon_state\nSee MEDYAN.chem_setlink_2mon_state! and MEDYAN.Link2MonState\nThe state of a link_2mon, organized in a nested struct of vector like form. Any static arrays will be unwrapped into a tuple of vectors, in column major order. The “name” attribute of each subgroup and dataset is the corresponding property name in the StructArray Any property in the default state that isn’t in the snapshot will stay at its default value.\n\ngroup[\"link_2mons/1/state\"]\n\n📂\n├─ 📂 1 🏷️ name =&gt; \"chemstate\",\n|  ├─ 🔢 1: 2 Int64  🏷️ name =&gt; \"a\",\n|  └─ 🔢 2: 2 Float64  🏷️ name =&gt; \"b\",\n├─ 📂 2 🏷️ name =&gt; \"mechstate\",\n|  └─ 📂 1 🏷️ name =&gt; \"â\",\n|     ├─ 🔢 1: 2 Float32  🏷️ name =&gt; \"1\",\n|     ├─ 🔢 2: 2 Float32  🏷️ name =&gt; \"2\",\n|     └─ 🔢 3: 2 Float32  🏷️ name =&gt; \"3\",\n└─ 🔢 3: 2 Bool  🏷️ name =&gt; \"is_minimized\",\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmechboundary\n\n\n\n\n\nThere is a dataset for each type of boundary, the total boundary is an intersection of the following.\nSee MEDYAN.Boundary\n\n\n🔢 capsules\n\n\ncollect(group[\"mechboundary/capsules\"])\n\n8×1 Matrix{Float64}:\n     0.0\n     0.0\n     0.0\n     0.0\n     0.0\n     0.0\n 10000.0\n     1.0\n\n\nDefault: Empty\nEach column of the dataset is a capsule.\n\n\n\n🔢 planes\n\n\ncollect(group[\"mechboundary/planes\"])\n\n4×6 Matrix{Float64}:\n   -10.0     10.0     0.0     0.0     0.0     0.0\n     0.0      0.0   -10.0    10.0     0.0     0.0\n     0.0      0.0     0.0     0.0   -10.0    10.0\n 10000.0  10000.0  2500.0  2500.0  2500.0  2500.0\n\n\nDefault: Empty\nEach column of the dataset is a plane.\n\n\n\n\n\n\n\n\n\n\n\n\nmembranes\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\nnum_membranes\n\n\nattrs(group[\"membranes\"])[\"num_membranes\"]\n\n1\n\n\nTotal number of membranes.\n\n\n\nposition_scale\n\n\nattrs(group[\"membranes\"])[\"position_scale\"]\n\n3\n\n\nDefault: No effect\nPositions were rounded to the nearest 2^-position_scale nm when saved.\n\n\n\n\nThere is a subgroup for each membrane. The subgroups are named by the membrane index. For example:\n\n\n\n\n\n\n\n📂 1\n\n\n\n\n\n\n\n\n\n\n\n🏷️\n\n\n\n\n\n\n\ntype_id\n\n\nattrs(group[\"membranes/1\"])[\"type_id\"]\n\n1\n\n\nThis membrane’s type id.\n\n\n\n\n\n\n🔢 trilist\n\n\ncollect(group[\"membranes/1/trilist\"])\n\n3×1914 Matrix{Int64}:\n   2  871  836  517  520  462  409  416  …  792  688  226  201  450  326  164\n 848  807  732  412  362  635  656  845     913  354  652  920  923  956  781\n 238  630  203  190  623  853  733  608     875  944  373  958  958  959  959\n\n\nEach column is the 3 vertex indexes of a triangle. Indexes are one based, and follow the right hand rule. Looking at the triangle from the outside in, they have counterclockwise winding.\n\n\n\n🔢 vertlist\n\n\ncollect(group[\"membranes/1/vertlist\"])\n\n3×959 Matrix{Float64}:\n  115.0   -590.25   -552.0    226.75  …  182.375  -316.125   157.75\n -222.75  -232.875  -193.125  137.5      238.125  -429.875   -34.5\n -252.25   275.25   -343.25   -15.5      -49.125  -237.875  -279.875\n\n\nEach column is a vertex coordinate in nm.\n\n\n\n🔢 id\n\n\ncollect(group[\"membranes/1/id\"])\n\n959-element Vector{Int64}:\n  7814\n 10608\n  3334\n 14756\n 12541\n  9498\n 10903\n  2092\n  9775\n    10\n 12855\n 12136\n  1949\n     ⋮\n  3653\n  5295\n  3951\n  8003\n 14307\n 12258\n  7204\n  4182\n  7834\n  9058\n  6485\n 10738\n\n\nArray of vertex IDs. Each vertex has an id which is assigned upon initialization and persists throughout its lifetime.\n\n\n\noptional 🔢 copynumbers\n\n\ncollect(group[\"membranes/1/copynumbers\"])\n\n3×959 Matrix{Int64}:\n 0  0  0  0  0  0  0  0  0  0  0  0  0  …  0  0  0  0  0  0  0  0  0  0  0  0\n 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  1  0  0  0  0  0  0  0  0  0\n 0  0  0  0  0  0  0  0  0  0  0  0  0     0  0  0  0  0  0  0  0  0  0  0  0\n\n\nArray of vertex membrane species copynumbers. If the membrane has no defined species this dataset will not exist.",
    "crumbs": [
      "Reference",
      "File Formats"
    ]
  },
  {
    "objectID": "docstrings/medyan.set_time--a6dd8f73f68a3759.html",
    "href": "docstrings/medyan.set_time--a6dd8f73f68a3759.html",
    "title": "MEDYAN.set_time!",
    "section": "",
    "text": "set_time!(c::MEDYAN.Context, x::Float64) -&gt; Float64\nTime (s)"
  },
  {
    "objectID": "docstrings/medyan.set_time--a6dd8f73f68a3759.html#tuple-medyan.context--float64--5f0fd8a48f76a337",
    "href": "docstrings/medyan.set_time--a6dd8f73f68a3759.html#tuple-medyan.context--float64--5f0fd8a48f76a337",
    "title": "MEDYAN.set_time!",
    "section": "",
    "text": "set_time!(c::MEDYAN.Context, x::Float64) -&gt; Float64\nTime (s)"
  },
  {
    "objectID": "docstrings/base.copy-4ca5eb8401ab10b2.html",
    "href": "docstrings/base.copy-4ca5eb8401ab10b2.html",
    "title": "Base.copy",
    "section": "",
    "text": "Shallow copy, https://stackoverflow.com/questions/51956958/how-to-copy-a-struct-in-julia"
  },
  {
    "objectID": "docstrings/base.copy-4ca5eb8401ab10b2.html#tuple-medyan.segment--c2f1af9762c148d7",
    "href": "docstrings/base.copy-4ca5eb8401ab10b2.html#tuple-medyan.segment--c2f1af9762c148d7",
    "title": "Base.copy",
    "section": "",
    "text": "Shallow copy, https://stackoverflow.com/questions/51956958/how-to-copy-a-struct-in-julia"
  },
  {
    "objectID": "docstrings/base.setindex--725f722fff4cfa6d.html",
    "href": "docstrings/base.setindex--725f722fff4cfa6d.html",
    "title": "Base.setindex!",
    "section": "",
    "text": "Map ID to a new index. The ID must be in use."
  },
  {
    "objectID": "docstrings/base.setindex--725f722fff4cfa6d.html#tuple-medyan.stableindex--integer--integer--808485796eb5543d",
    "href": "docstrings/base.setindex--725f722fff4cfa6d.html#tuple-medyan.stableindex--integer--integer--808485796eb5543d",
    "title": "Base.setindex!",
    "section": "",
    "text": "Map ID to a new index. The ID must be in use."
  },
  {
    "objectID": "docstrings/medyan.addfilamentsite--eb6bfd871a21b6f4.html",
    "href": "docstrings/medyan.addfilamentsite--eb6bfd871a21b6f4.html",
    "title": "MEDYAN.addfilamentsite!",
    "section": "",
    "text": "addfilamentsite!(s::SysDef,filamenttypename::Symbol,filamentsitename::Symbol,site)"
  },
  {
    "objectID": "docstrings/medyan.addfilamentsite--eb6bfd871a21b6f4.html#tuple-medyan.sysdef--symbol--symbol--any--b9a0ed342fa77751",
    "href": "docstrings/medyan.addfilamentsite--eb6bfd871a21b6f4.html#tuple-medyan.sysdef--symbol--symbol--any--b9a0ed342fa77751",
    "title": "MEDYAN.addfilamentsite!",
    "section": "",
    "text": "addfilamentsite!(s::SysDef,filamenttypename::Symbol,filamentsitename::Symbol,site)"
  },
  {
    "objectID": "docstrings/base.---a21e771ed8ea7d6f.html",
    "href": "docstrings/base.---a21e771ed8ea7d6f.html",
    "title": "Base.:*",
    "section": "",
    "text": "scale the volume and area\n\n\n\n\n\n\n\n\n\n\n\n\nscale the volume and area by different amounts in each direction"
  },
  {
    "objectID": "docstrings/base.---a21e771ed8ea7d6f.html#tuple-medyan.planecuboidslicingresult--real--351897cd93ec653f",
    "href": "docstrings/base.---a21e771ed8ea7d6f.html#tuple-medyan.planecuboidslicingresult--real--351897cd93ec653f",
    "title": "Base.:*",
    "section": "",
    "text": "scale the volume and area"
  },
  {
    "objectID": "docstrings/base.---a21e771ed8ea7d6f.html#tuple-medyan.planecuboidslicingresult--abstractvector--a044ea7870b5bb9c",
    "href": "docstrings/base.---a21e771ed8ea7d6f.html#tuple-medyan.planecuboidslicingresult--abstractvector--a044ea7870b5bb9c",
    "title": "Base.:*",
    "section": "",
    "text": "scale the volume and area by different amounts in each direction"
  },
  {
    "objectID": "docstrings/medyan.addfilament_reaction--63195cbff2ab4237.html",
    "href": "docstrings/medyan.addfilament_reaction--63195cbff2ab4237.html",
    "title": "MEDYAN.addfilament_reaction!",
    "section": "",
    "text": "Add filament reaction. Return s. Add a filamentsite and reaction with callback to change the monomer state. This can be used for filament aging, filament catalyzed reactions, or simple binding reactions.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentsitename::Symbol: the new name of the filamentsite added. This can be used as a catalyst in other reactions.\nchangedstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the monomer states, the first is the states to match. The second is the new monomer states after the reaction. both should be the same length. Ordered minus end first.\ncenter::Int: Which index of changedstatenames.first is the actual location of the filamentsite. Used for determining what compartment the reaction goes in.\nreactantexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentsite.$(filamenttypename).$(filamentsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. volumefactor only applies to this reaction not any other reaction using filamentsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    filamentnames= [(:filname,[\n                            :a,\n                            :b,\n                            :c,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\naddfilament_reaction!(s, :filname, :ab,\n    [:a]=&gt;[:b], 1,\n    \"--&gt;\", 1.75E-3, 0,\n)\naddfilament_reaction!(s, :filname, :aabc,\n    [:a,:a]=&gt;[:b,:c], 2,\n    \"--&gt;\", 1.75E-3, 0,\n)"
  },
  {
    "objectID": "docstrings/medyan.addfilament_reaction--63195cbff2ab4237.html#tuple-medyan.sysdef--symbol--symbol--pair-vector-symbol---vector-symbol----int64--abstractstring--float64--int64--51c2a9e2acbeb27c",
    "href": "docstrings/medyan.addfilament_reaction--63195cbff2ab4237.html#tuple-medyan.sysdef--symbol--symbol--pair-vector-symbol---vector-symbol----int64--abstractstring--float64--int64--51c2a9e2acbeb27c",
    "title": "MEDYAN.addfilament_reaction!",
    "section": "",
    "text": "Add filament reaction. Return s. Add a filamentsite and reaction with callback to change the monomer state. This can be used for filament aging, filament catalyzed reactions, or simple binding reactions.\n\n\n\ns::SysDef: the system to add to.\nfilamenttypename::Symbol: the filament type name.\nfilamentsitename::Symbol: the new name of the filamentsite added. This can be used as a catalyst in other reactions.\nchangedstatenames::Pair{Vector{Symbol}, Vector{Symbol}}: the changes to the monomer states, the first is the states to match. The second is the new monomer states after the reaction. both should be the same length. Ordered minus end first.\ncenter::Int: Which index of changedstatenames.first is the actual location of the filamentsite. Used for determining what compartment the reaction goes in.\nreactantexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + filamentsite.$(filamenttypename).$(filamentsitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. volumefactor only applies to this reaction not any other reaction using filamentsitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\nusing MEDYAN\nagent_names = AgentNames(\n    filamentnames= [(:filname,[\n                            :a,\n                            :b,\n                            :c,\n                        ]),\n    ],\n)\ns= SysDef(agent_names)\naddfilament_reaction!(s, :filname, :ab,\n    [:a]=&gt;[:b], 1,\n    \"--&gt;\", 1.75E-3, 0,\n)\naddfilament_reaction!(s, :filname, :aabc,\n    [:a,:a]=&gt;[:b,:c], 2,\n    \"--&gt;\", 1.75E-3, 0,\n)"
  },
  {
    "objectID": "docstrings/medyan.centerof-e902b9bb7b2a6caf.html",
    "href": "docstrings/medyan.centerof-e902b9bb7b2a6caf.html",
    "title": "MEDYAN.centerof",
    "section": "",
    "text": "centerof(grid::CubicGrid, cid)\nReturn the location of the center of a grid id The origin is in the center.\n\n\n\n\n\n\n\n\n\n\n\n\ncenterof(grid::CubicGrid)\nReturn the location of the center the grid The origin is in the center."
  },
  {
    "objectID": "docstrings/medyan.centerof-e902b9bb7b2a6caf.html#tuple-medyan.cubicgrid--any--1be3c03f7960c1a3",
    "href": "docstrings/medyan.centerof-e902b9bb7b2a6caf.html#tuple-medyan.cubicgrid--any--1be3c03f7960c1a3",
    "title": "MEDYAN.centerof",
    "section": "",
    "text": "centerof(grid::CubicGrid, cid)\nReturn the location of the center of a grid id The origin is in the center."
  },
  {
    "objectID": "docstrings/medyan.centerof-e902b9bb7b2a6caf.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "href": "docstrings/medyan.centerof-e902b9bb7b2a6caf.html#tuple-medyan.cubicgrid--0971be2da0774049",
    "title": "MEDYAN.centerof",
    "section": "",
    "text": "centerof(grid::CubicGrid)\nReturn the location of the center the grid The origin is in the center."
  },
  {
    "objectID": "docstrings/medyan.addreactioncallback--9c9d46adeded2d88.html",
    "href": "docstrings/medyan.addreactioncallback--9c9d46adeded2d88.html",
    "title": "MEDYAN.addreactioncallback!",
    "section": "",
    "text": "addreactioncallback!(s::SysDef, reaction::CompartmentReaction, callback)::SysDef\naddreactioncallback!(s::SysDef, reactantexpr::AbstractString, rate::Float64, invvolumepower::Int, callback)::SysDef\nLike addreaction! but also adds callback. callback is called when the reaction happens with input of MEDYAN.Context and Int the compartment id where the reaction happened.\nThe reaction should normally have no net stoichiometry because the callback should handle updating species counts. If an AbstractString is passed instead of a CompartmentReaction for the reaction, that string will be parsed to determine the reactants. The net stoichiometry will be zero.\nMEDYAN.errorcheck_addcallback(callback,s::SysDef) can optionally be overloaded to add errorchecking when the callback is added.\n\n\n\n\n\n\n\n\n\n\n\n\nCallback for bulk reactions: Context -&gt; Nothing."
  },
  {
    "objectID": "docstrings/medyan.addreactioncallback--9c9d46adeded2d88.html#tuple-medyan.sysdef--medyan.compartmentreaction--any--36763138c31ba7fa",
    "href": "docstrings/medyan.addreactioncallback--9c9d46adeded2d88.html#tuple-medyan.sysdef--medyan.compartmentreaction--any--36763138c31ba7fa",
    "title": "MEDYAN.addreactioncallback!",
    "section": "",
    "text": "addreactioncallback!(s::SysDef, reaction::CompartmentReaction, callback)::SysDef\naddreactioncallback!(s::SysDef, reactantexpr::AbstractString, rate::Float64, invvolumepower::Int, callback)::SysDef\nLike addreaction! but also adds callback. callback is called when the reaction happens with input of MEDYAN.Context and Int the compartment id where the reaction happened.\nThe reaction should normally have no net stoichiometry because the callback should handle updating species counts. If an AbstractString is passed instead of a CompartmentReaction for the reaction, that string will be parsed to determine the reactants. The net stoichiometry will be zero.\nMEDYAN.errorcheck_addcallback(callback,s::SysDef) can optionally be overloaded to add errorchecking when the callback is added."
  },
  {
    "objectID": "docstrings/medyan.addreactioncallback--9c9d46adeded2d88.html#tuple-medyan.sysdef--medyan.bulkreaction--any--bad9b85c7303199e",
    "href": "docstrings/medyan.addreactioncallback--9c9d46adeded2d88.html#tuple-medyan.sysdef--medyan.bulkreaction--any--bad9b85c7303199e",
    "title": "MEDYAN.addreactioncallback!",
    "section": "",
    "text": "Callback for bulk reactions: Context -&gt; Nothing."
  },
  {
    "objectID": "docstrings/medyan.sever_filament--a0475617dc0fbf93.html",
    "href": "docstrings/medyan.sever_filament--a0475617dc0fbf93.html",
    "title": "MEDYAN.sever_filament!",
    "section": "",
    "text": "sever_filament!(c::Context, mon_name::MonomerName)::Int\nReturn the new filament id of the minus end filament.\nCalling this will invalidate the chem cache.\nThe split will happen between mon_name and the monomer slightly towards the minus end.\nThe plus end will keep the same fil_id, the minus end will get a new fil_id.\nThe split cannot create a filament with less than 2 monomers."
  },
  {
    "objectID": "docstrings/medyan.sever_filament--a0475617dc0fbf93.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "href": "docstrings/medyan.sever_filament--a0475617dc0fbf93.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "title": "MEDYAN.sever_filament!",
    "section": "",
    "text": "sever_filament!(c::Context, mon_name::MonomerName)::Int\nReturn the new filament id of the minus end filament.\nCalling this will invalidate the chem cache.\nThe split will happen between mon_name and the monomer slightly towards the minus end.\nThe plus end will keep the same fil_id, the minus end will get a new fil_id.\nThe split cannot create a filament with less than 2 monomers."
  },
  {
    "objectID": "docstrings/medyan.num_filtypes-b9943bbf7a9c7781.html",
    "href": "docstrings/medyan.num_filtypes-b9943bbf7a9c7781.html",
    "title": "MEDYAN.num_filtypes",
    "section": "",
    "text": "num_filtypes(c::MEDYAN.Context) -&gt; Int64\nReturn the number of filament types."
  },
  {
    "objectID": "docstrings/medyan.num_filtypes-b9943bbf7a9c7781.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.num_filtypes-b9943bbf7a9c7781.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.num_filtypes",
    "section": "",
    "text": "num_filtypes(c::MEDYAN.Context) -&gt; Int64\nReturn the number of filament types."
  },
  {
    "objectID": "docstrings/medyan.link2monsiteslipbond-2cec57cbea12864e.html",
    "href": "docstrings/medyan.link2monsiteslipbond-2cec57cbea12864e.html",
    "title": "MEDYAN.Link2MonSiteSlipBond",
    "section": "",
    "text": "Models unbinding rates based on the following exponential form of Bell et al, 1978: min(k0*exp(f/f0), kmax) Where f is the magnitude of the force. So as to exponetially increase the unbinding with more force.\nlink_2mon_sitecount returns the unbinding rate in units of 1/s It returns k0 if the link_2mon hasn’t been minimized yet.\n\nf0::Float64: The charicteristic force magnitude. Units of pN\nk0::Float64: Unbinding rate at zero force. Units of 1/s\nkmax::Float64: Maximum rate. Units of 1/s"
  },
  {
    "objectID": "docstrings/medyan.link2monsiteslipbond-2cec57cbea12864e.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.link2monsiteslipbond-2cec57cbea12864e.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Link2MonSiteSlipBond",
    "section": "",
    "text": "Models unbinding rates based on the following exponential form of Bell et al, 1978: min(k0*exp(f/f0), kmax) Where f is the magnitude of the force. So as to exponetially increase the unbinding with more force.\nlink_2mon_sitecount returns the unbinding rate in units of 1/s It returns k0 if the link_2mon hasn’t been minimized yet.\n\nf0::Float64: The charicteristic force magnitude. Units of pN\nk0::Float64: Unbinding rate at zero force. Units of 1/s\nkmax::Float64: Maximum rate. Units of 1/s"
  },
  {
    "objectID": "docstrings/medyan.mon_position-83983d8916347411.html",
    "href": "docstrings/medyan.mon_position-83983d8916347411.html",
    "title": "MEDYAN.mon_position",
    "section": "",
    "text": "mon_position(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; StaticArraysCore.SVector{3, Float64}\nReturn the monomer position."
  },
  {
    "objectID": "docstrings/medyan.mon_position-83983d8916347411.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "href": "docstrings/medyan.mon_position-83983d8916347411.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "title": "MEDYAN.mon_position",
    "section": "",
    "text": "mon_position(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; StaticArraysCore.SVector{3, Float64}\nReturn the monomer position."
  },
  {
    "objectID": "docstrings/medyan.link2monparams-d960d08f0808df0c.html",
    "href": "docstrings/medyan.link2monparams-d960d08f0808df0c.html",
    "title": "MEDYAN.Link2MonParams",
    "section": "",
    "text": "Link2mon Parameters, there is one instance of this per link2mon type\n\ndefaultstate::MEDYAN.Link2MonState\nmechparams::Any\nno_collide::Bool: if true, allows cylinders this link_2mon type connects and adjacent cylinders to clip"
  },
  {
    "objectID": "docstrings/medyan.link2monparams-d960d08f0808df0c.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.link2monparams-d960d08f0808df0c.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Link2MonParams",
    "section": "",
    "text": "Link2mon Parameters, there is one instance of this per link2mon type\n\ndefaultstate::MEDYAN.Link2MonState\nmechparams::Any\nno_collide::Bool: if true, allows cylinders this link_2mon type connects and adjacent cylinders to clip"
  },
  {
    "objectID": "docstrings/medyan.link2monsiteone-9886bc1476194731.html",
    "href": "docstrings/medyan.link2monsiteone-9886bc1476194731.html",
    "title": "MEDYAN.Link2MonSiteOne",
    "section": "",
    "text": "Always returns 1.0"
  },
  {
    "objectID": "docstrings/medyan.link2monsiteone-9886bc1476194731.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.link2monsiteone-9886bc1476194731.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Link2MonSiteOne",
    "section": "",
    "text": "Always returns 1.0"
  },
  {
    "objectID": "docstrings/medyan.run_chemistry--dda22fac5c555b9e.html",
    "href": "docstrings/medyan.run_chemistry--dda22fac5c555b9e.html",
    "title": "MEDYAN.run_chemistry!",
    "section": "",
    "text": "run_chemistry!(c::Context, Δt)\nRun chemistry for Δt time.\nUpdate c.time."
  },
  {
    "objectID": "docstrings/medyan.run_chemistry--dda22fac5c555b9e.html#tuple-medyan.context--any--86fc06bb8cbd13e8",
    "href": "docstrings/medyan.run_chemistry--dda22fac5c555b9e.html#tuple-medyan.context--any--86fc06bb8cbd13e8",
    "title": "MEDYAN.run_chemistry!",
    "section": "",
    "text": "run_chemistry!(c::Context, Δt)\nRun chemistry for Δt time.\nUpdate c.time."
  },
  {
    "objectID": "docstrings/medyan.adddiffusingcount_rand--9d3ddfabbceeef92.html",
    "href": "docstrings/medyan.adddiffusingcount_rand--9d3ddfabbceeef92.html",
    "title": "MEDYAN.adddiffusingcount_rand!",
    "section": "",
    "text": "adddiffusingcount_rand!(c::Context, dsid, inccount)\nDistribute the added diffusing species count randomly to compartments weighted by volume.\n\ndsid: diffusing species id.\ninccount: amount to add."
  },
  {
    "objectID": "docstrings/medyan.adddiffusingcount_rand--9d3ddfabbceeef92.html#tuple-medyan.context--any--any--0ecbb5ec6f703ddd",
    "href": "docstrings/medyan.adddiffusingcount_rand--9d3ddfabbceeef92.html#tuple-medyan.context--any--any--0ecbb5ec6f703ddd",
    "title": "MEDYAN.adddiffusingcount_rand!",
    "section": "",
    "text": "adddiffusingcount_rand!(c::Context, dsid, inccount)\nDistribute the added diffusing species count randomly to compartments weighted by volume.\n\ndsid: diffusing species id.\ninccount: amount to add."
  },
  {
    "objectID": "docstrings/medyan.add_decimated_2mon_site--ad56e7ee56067940.html",
    "href": "docstrings/medyan.add_decimated_2mon_site--ad56e7ee56067940.html",
    "title": "MEDYAN.add_decimated_2mon_site!",
    "section": "",
    "text": "add_decimated_2mon_site!(s::SysDef,decimated_2mon_sitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.add_decimated_2mon_site--ad56e7ee56067940.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "href": "docstrings/medyan.add_decimated_2mon_site--ad56e7ee56067940.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "title": "MEDYAN.add_decimated_2mon_site!",
    "section": "",
    "text": "add_decimated_2mon_site!(s::SysDef,decimated_2mon_sitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.set_enable_cylinder_volume_exclusion--38c20ab68ab8bf1a.html",
    "href": "docstrings/medyan.set_enable_cylinder_volume_exclusion--38c20ab68ab8bf1a.html",
    "title": "MEDYAN.set_enable_cylinder_volume_exclusion!",
    "section": "",
    "text": "set_enable_cylinder_volume_exclusion!(\n    c::MEDYAN.Context,\n    x::Bool\n) -&gt; Bool\nAre cylinder volume exclusion forces calculated."
  },
  {
    "objectID": "docstrings/medyan.set_enable_cylinder_volume_exclusion--38c20ab68ab8bf1a.html#tuple-medyan.context--bool--89b229b1eef6a22c",
    "href": "docstrings/medyan.set_enable_cylinder_volume_exclusion--38c20ab68ab8bf1a.html#tuple-medyan.context--bool--89b229b1eef6a22c",
    "title": "MEDYAN.set_enable_cylinder_volume_exclusion!",
    "section": "",
    "text": "set_enable_cylinder_volume_exclusion!(\n    c::MEDYAN.Context,\n    x::Bool\n) -&gt; Bool\nAre cylinder volume exclusion forces calculated."
  },
  {
    "objectID": "docstrings/medyan.addunbindinglink_2mon_site--76d17dbe625169cd.html",
    "href": "docstrings/medyan.addunbindinglink_2mon_site--76d17dbe625169cd.html",
    "title": "MEDYAN.addunbindinglink_2mon_site!",
    "section": "",
    "text": "Add unbinding site, callback, and reaction. Return s.\n\n\n\ns::SysDef: the system to add to.\nlink_2mon_typename::Symbol: the link_2mon type name.\nlink_2mon_sitename::Symbol: the new name of the link_2mon_site added. This can be used as a catalyst in other reactions.\nlink_2mon_site: the link_2mon site to add.\nplusfilamenttypename::Symbol: the filament type name of the plus end.\nplusnewmonomerstatename::Symbol: the new name of the monomer state of the plus end.\nminusfilamenttypename::Symbol: the filament type name of the minus end.\nminusnewmonomerstatename::Symbol: the new name of the monomer state of the minus end.\nreactionexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + link_2mon_site.$(link_2mon_typename).$(link_2mon_sitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. volumefactor only applies to this reaction not any other reaction using link_2mon_sitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant."
  },
  {
    "objectID": "docstrings/medyan.addunbindinglink_2mon_site--76d17dbe625169cd.html#ntuple-11--any--9b4bc6c29fc2cf2a",
    "href": "docstrings/medyan.addunbindinglink_2mon_site--76d17dbe625169cd.html#ntuple-11--any--9b4bc6c29fc2cf2a",
    "title": "MEDYAN.addunbindinglink_2mon_site!",
    "section": "",
    "text": "Add unbinding site, callback, and reaction. Return s.\n\n\n\ns::SysDef: the system to add to.\nlink_2mon_typename::Symbol: the link_2mon type name.\nlink_2mon_sitename::Symbol: the new name of the link_2mon_site added. This can be used as a catalyst in other reactions.\nlink_2mon_site: the link_2mon site to add.\nplusfilamenttypename::Symbol: the filament type name of the plus end.\nplusnewmonomerstatename::Symbol: the new name of the monomer state of the plus end.\nminusfilamenttypename::Symbol: the filament type name of the minus end.\nminusnewmonomerstatename::Symbol: the new name of the monomer state of the minus end.\nreactionexpr::AbstractString: Allows adding other reactants or products to the reaction. \" + link_2mon_site.$(link_2mon_typename).$(link_2mon_sitename) + \" gets added to both sides this to create the full reaction expression. See addreaction! for syntax.\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s)\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. volumefactor only applies to this reaction not any other reaction using link_2mon_sitename Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant."
  },
  {
    "objectID": "docstrings/medyan.mon_exists-898c415a5eddc619.html",
    "href": "docstrings/medyan.mon_exists-898c415a5eddc619.html",
    "title": "MEDYAN.mon_exists",
    "section": "",
    "text": "mon_exists(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Bool\nReturn true iff the filament and monomer exists"
  },
  {
    "objectID": "docstrings/medyan.mon_exists-898c415a5eddc619.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "href": "docstrings/medyan.mon_exists-898c415a5eddc619.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "title": "MEDYAN.mon_exists",
    "section": "",
    "text": "mon_exists(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Bool\nReturn true iff the filament and monomer exists"
  },
  {
    "objectID": "docstrings/src/context.html",
    "href": "docstrings/src/context.html",
    "title": "src/context.jl",
    "section": "",
    "text": "Membrane protein physical parameters.\n\ndiffusion_coeff::Float64: Membrane diffusion coefficients (nm^2/s).\narea::Float64: Protein area projected onto the surface (nm^2).\nkbend::Float64: Bending rigidity (pN nm).\neqcurv::Float64: The protein’s own spontaneous mean curvature (/nm). Can be used in bending energy computations with curvatures.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShallow copy, https://stackoverflow.com/questions/51956958/how-to-copy-a-struct-in-julia\n\n\n\n\n\n\n\n\n\n\n\n\nContext(sys_def::SysDef, grid::CubicGrid; kwargs...)\n\nagent_names::MEDYAN.AgentNames\nsys_def::MEDYAN.SysDef\ncompartments::Vector{MEDYAN.Compartment}\ngrid::Any\ntime::Ref{Float64}: time (s)\nstats::MEDYAN.PerformanceStats\nβ::Float64: inverse kT (1/(nm*pN))\nbase_diffusion_coeffs::Vector{Float64}: Diffusion coefficients indexed by diffusing species id (nm²/s)\nmembrane_species_params::StaticArraysCore.SVector{NUM_MEMBRANEDIFFUSINGSPECIES, MEDYAN.MembraneSpeciesParams} where NUM_MEMBRANEDIFFUSINGSPECIES: Membrane species parameters indexed by membrane diffusing species id.\nmin_compartment_volume_ratio::Float64: Smallest volume a compartment can have before being deactivated as a ratio to a full compartment volume.\nchemistryengine::MEDYAN.RDMESampler: The reaction diffusion master equation sampler, contains the diffusing and regular fixed species state\nlargestfilamentid::Vector{Int64}: The largest filament id, indexed by filament type id\nchem_cylinders::Vector{MEDYAN.ChemCylinders}: Data about filament cylinders, indexed by filament type id\nmembranes::Vector: All membrane meshes.\nlink_2mon_data::Tuple{Vararg{MEDYAN.Link2MonData}}: The linked link2mon parameters, indexed by link2mon type id, to give a Link2MonData\ndecimated_2mon_site_managers::Tuple{Vararg{MEDYAN.AbstractDecimated2MonSiteManager}}: Site managers, indexed by site id\nlinked_monomers::Dictionaries.Dictionary{MEDYAN.MonomerName, Vector{Vector{Int64}}}: Dictionary of all monomers that have a bound link2mon. indexed by monomer name, then link2montypeid, to give a vector of unique link2mon ids that reference the monomer name\nfilamentsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filament site definitions, indexed by filament type id, filament site id to get a SiteData with fields of id, site, fxsid\nfilamentendsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filamentend site definitions, indexed by filament type id, filamentend site id to get a SiteData with fields of id, site, fxsid\nmaxfilsite_plusrange::Vector{Int64}: The maximum plus range in monomers that any filament site or end site can see. Indexed by filament type id\nmaxfilsite_minusrange::Vector{Int64}: The maximum minus range in monomers that any filament site or end site can see. Indexed by filament type id\nmembranesites::Tuple{Vararg{MEDYAN.SiteData}}: Maps membrane site id to a SiteData with fields of id, site, fxsid.\nmap_membranediffusingspeciesindex_membranesiteindices::Tuple{Vararg{Vector{Int64}}}: Maps membrane diffusing species index to a list of membrane sites using this species as reactant. This is initialized during context init and should not be changed.\nlink_2mon_sites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: Site definitions, indexed by link_2mon type id, site id to get a SiteData with fields of id, site, fxsid\nmon_link_2mon_sites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: Site definitions, indexed by link_2mon type id, site id to get a SiteData with fields of id, site, fxsid\nchem_max_search_dist::Float64\ndecimated_2mon_sites::Tuple{Vararg{MEDYAN.SiteData}}: Site definitions, indexed by site id to get a SiteData with fields of id, site, fxsid\ncadherinsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}\ncadherindata::Tuple{Vararg{MEDYAN.CadherinData}}\npossiblecadherinsite_managers::Tuple{Vararg{MEDYAN.AbstractPossibleCadherinSiteManager}}: Site managers, indexed by site id\ncadherinlinked_vertices::Dictionaries.Dictionary{MEDYAN.VertexName, Vector{Vector{Pair{MEDYAN.VertexName, MEDYAN.MonomerName}}}}: Dictionary of all vertices that have a bound cadherin. indexed by vertex name, then cadherintypeid, to give a vector of unique cadherin endnames that reference the monomer name and vertex name\ncheck_sitecount_error::Bool: If true site counts are checked for errors on every chem update. This is extremely slow, but useful for testing chem update errors.\ncompartmentreactioncallbacks::Any\nbulkreactioncallbacks::Any\nmemdiff_bulks_index::Int64: Mock bulk species index for membrane diffusion.\nviscosity::Float64: viscosity (pNs/nm² or MPas) water is about 1E-9\ng_tol::Float64: maximum force magnitude after minimization (pN)\nshake_before_minimization::Bool: If true, add noise to coordinates before starting minimization.\niter_max_cg_minimization::Int64: Max number of steps in conjugate gradient minimization.\nmaxstep::Float64: max step to take during line search (nm)\nmax_cylinder_force::Float64: max cylinder force when two cylinders are at zero distance (pN)\ncheck_neighborlist_error::Bool: If true neighborlists are checked for errors on every force calc. This is extremely slow, but useful for testing neighborlist errors.\nnthreads::Int64: Experimental Set to more than 1 to enable multi threading. This is currently may result in non bitwise reproducable simulations. Results should be statistcally identical, but this is currently not well tested.\nenable_cylinder_volume_exclusion::Ref{Bool}: Are cylinder volume exclusion forces calculated\nenable_triangle_bead_volume_exclusion::Bool: Are triangle-bead volume exclusion forces calculated.\ncylinder_skin_radius::Float64: Extra cell list cutoff radius in nm. The cell lists are reset after a bead moves over this amount\nfilamentmechparams::Vector{MEDYAN.FilamentMechParams}: The filament mechanical parameters, indexed by filament type id\nmembranemechparams::Vector{MEDYAN.MembraneMechParams}: Membrane mechanical parameters, indexed by membrane type id.\nfunc_membranespeciespotentialenergy::Any: Membrane species potential energy function. See docs on default function for more info.\nmembranefilamentmechparams::MEDYAN.MembraneFilamentMechParams: Membrane-filament mechanical interaction parameters.\nexternal_energy_forces!::Any: External energy/force expressions. This should be a mutating function taking a (fc::MEDYAN.ForceContext), which adds to fc.forces, fc.energies, and fc.energy. The energy and force must be consistent, and this is not checked. This can be used as ad-hoc solutions to experiment with uncommon forces, such as specifically designed attachments, etc. If this variable is used often, consider moving it into MEDYAN.\nchemboundary::MEDYAN.Boundary: chemical boundary, updates compartment volumes and diffusion rates\nmeshindex_as_chemboundary::Ref{Int64}: The membrane index used as chemical boundary. If values other than 0 is used, the actual interior region of the chemical boundary is the intersection between\n\nthe interior of chemboundary, and\nthe interior of the membrane mesh at this index.\n\nNote: Since the membrane may change its shape often, set_chemboundary! might need to be called often accordingly to update volumes of compartments.\nmechboundary::MEDYAN.Boundary: mechanical boundary\nsharedtypedconfigs::MEDYAN.SharedTypedConfigs: Shared configurations stored in type parameters.\nvalidflags::MEDYAN.ValidFlags: Interval system consistency validation flags.\nfila_tip_tags::MEDYAN.TagManager{MEDYAN.FilaTipIdx}: Filament tip tags\n\n\n\n\n\n\n\n\n\n\n\n\n\nnum_filtypes(c::MEDYAN.Context) -&gt; Int64\nReturn the number of filament types.\n\n\n\n\n\n\n\n\n\n\n\n\nfiltype_fil_ids(\n    c::MEDYAN.Context,\n    ftid::Int64\n) -&gt; Vector{Int64}\nReturn a read only iterable of all filament ids of filament type ftid.\nThis can be invalid after any mutations to context, so collect if needed.\n\n\n\n\n\n\n\n\n\n\n\n\nfil_node_positions(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; Vector{StaticArraysCore.SVector{3, Float64}}\nReturn the node positions of the filament\n\n\n\n\n\n\n\n\n\n\n\n\nfil_node_mon_ids(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; Vector{Int64}\nReturn the node monomer ids of the filament.\nThe fil_node_mon_ids are the monomer ids at (slightly plus side of) the fil_node_positions\n                                 |\n                      -----+-----|-----+-----\n  minus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                      -----+-----|-----+-----\n                                 |\n                                 ^ A node position is indicated by the line.\n\nThe monomer id with parenthesis (M) will in `fil_node_mon_ids`\nThe first monomer id is the first monomer id on the filament. The last monomer id is the last monomer id on the filament + 1\n\n\n\n\n\n\n\n\n\n\n\n\nfil_mon_states(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; OffsetArrays.OffsetVector{UInt8, Vector{UInt8}}\nReturn a read only OffsetVector of monomer states on a filament.\nThis can be invalid after any mutations to context, so copy if needed.\n\n\n\n\n\n\n\n\n\n\n\n\nfil_num_unmin_ends(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; Tuple{Int64, Int64}\nReturn a tuple (minus, plus) of the number of unminimized monomers on the minus and plus end of a filament.\nThis will be reset to (0, 0) by minimize_energy!\nWhen an end is depolymerized this will decrease, but saturate at 0. When an end is polymerized this will increase.\nFor example if after minimization a filament has a plus end depolymerization, this function will return (0, 0). Then if a plus end polymerization happens, this function will return (0, 1), even though the net change in filament length is zero.\n\n\n\n\n\n\n\n\n\n\n\n\nvertex_state(\n    c::MEDYAN.Context,\n    vertexname::MEDYAN.VertexName\n) -&gt; UInt8\nReturn the vertex state on a membrane.\n\n\n\n\n\n\n\n\n\n\n\n\nmon_exists(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Bool\nReturn true iff the filament and monomer exists\n\n\n\n\n\n\n\n\n\n\n\n\nmon_minimized(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Bool\nReturn true iff the monomer has been minimized\n\n\n\n\n\n\n\n\n\n\n\n\nmon_3states(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Tuple{UInt8, UInt8, UInt8}\nReturn a tuple of three monomer states centered at a monomer.\nIf a monomer doesn’t exist, its state will be zero. The filament must exist.\n\n\n\n\n\n\n\n\n\n\n\n\nmon_position(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; StaticArraysCore.SVector{3, Float64}\nReturn the monomer position.\n\n\n\n\n\n\n\n\n\n\n\n\nmon_plusvector(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; StaticArraysCore.SVector{3, Float64}\nReturn the unit vector toward the plus end of the filament.\n\n\n\n\n\n\n\n\n\n\n\n\nmon_position_plusvector(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Tuple{StaticArraysCore.SVector{3, Float64}, StaticArraysCore.SVector{3, Float64}}\nReturn a tuple of position and plusvector at a monomer.\n\n\n\n\n\n\n\n\n\n\n\n\nlink_2mon_endnames(\n    c::MEDYAN.Context,\n    ltid,\n    lid\n) -&gt; Pair{MEDYAN.MonomerName, MEDYAN.MonomerName}\nReturn the minusend name =&gt; plusend name of the link with type id ltid, and link id lid\n\n\n\n\n\n\n\n\n\n\n\n\nlink_2mon_state(\n    c::MEDYAN.Context,\n    ltid,\n    lid\n) -&gt; MEDYAN.Link2MonState\nReturn the Link2MonState of the link with type id ltid, and link id lid\n\n\n\n\n\n\n\n\n\n\n\n\nset_time!(c::MEDYAN.Context, x::Float64) -&gt; Float64\nTime (s)\n\n\n\n\n\n\n\n\n\n\n\n\nset_enable_cylinder_volume_exclusion!(\n    c::MEDYAN.Context,\n    x::Bool\n) -&gt; Bool\nAre cylinder volume exclusion forces calculated.\n\n\n\n\n\n\n\n\n\n\n\n\nset_chemboundary!(\n    c::MEDYAN.Context;\n    meshindex_as_chemboundary,\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSet chemical boundary and update compartment volumes and diffusion rates. Note, the chemboundary should be outside the mechboundary so that it is rare for filaments to go outside the chemboundary\nSee also Boundary\n\n\n\nplanes::Vector{SVector{4,Float64}} = []\n\nPlanes that make up the chemical boundary of the simulation\ninside = signbit(pos ⋅ planes[bi][1:3] - planes[bi][4])\nFor example, a plane [1,0,0,3] is inside if x &lt; 3 nm.\n2.0*[1,0,0,3] is also inside if x &lt; 3 nm.\n\ncapsules::Vector{SVector{8,Float64}} = []\n\nCapsules that make up the chemical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is ignored.\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\n\nmeshindex_as_chemboundary::Int = 0: Index of membrane mesh that further restricts the chem boundary. 0 for none.\n\nThe system geometry information must be up-to-date. This mesh index is not stored in the boundary object, but is directly set in the context.\n\n\n\n\n\n\n\n\n\n\n\n\n\nset_mechboundary!(\n    c::MEDYAN.Context;\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSee also Boundary\n\n\n\n\n\n\n\n\n\n\n\n\nchem_adddiffusingcount!(c::Context, sid, cid, inccount)\nAdd inccount to diffusing species id sid in compartment id cid\n\n\n\n\n\n\n\n\n\n\n\n\nchem_addfixedcount!(c::Context, sid, cid, inccount)\nAdd inccount to fixed species id sid in compartment id cid\n\n\n\n\n\n\n\n\n\n\n\n\nadddiffusingcount_rand!(c::Context, dsid, inccount)\nDistribute the added diffusing species count randomly to compartments weighted by volume.\n\ndsid: diffusing species id.\ninccount: amount to add.\n\n\n\n\n\n\n\n\n\n\n\n\n\naddmembranediffusingcount_rand!(\n    c::MEDYAN.Context,\n    membraneindex::Int64,\n    speciesindex::Int64,\n    addcount::Int64\n)\nDistribute the added membrane species count randomly to membrane cells, ignoring cell area difference. Does NOT update propensity.\n\n\n\n\n\n\n\n\n\n\n\n\nnewfilament_rand!(c::Context, monomerstates; iterations = 10^9, ftid = 1)\nAdd a filament with type id ftid to the Context with random center position and direction.\nReturn the filament id of a new filament.\nmonomerstates is a collection of the MonomerState of the monomers in the new filament.\nThe filament will be inside the mech boundary.\nErrors if it fails to add a filament.\nThe monomer are spaced by the value in the filament type’s mechanical parameters.\n\n\n\n\n\n\n\n\n\n\n\n\nrun_chemistry!(c::Context, Δt)\nRun chemistry for Δt time.\nUpdate c.time.\n\n\n\n\n\n\n\n\n\n\n\n\ndefer_chem_caching!(c::Context)::Nothing\nThis should only be used for advanced optimizations.\nDuring chemistry, the context mutating functions will typically try to avoid invalidating various cached data needed to quickly sample sites.\nHowever, if you want to mutate the context outside of chemistry, for example right before or after minimization, you may not want to pay the cost of revalidating all the caches because minimization will already invalidate the caches. Caching will be enabled again and caches will be made valid the next time chemistry is run. Caching can also be manually refreshed and reenabled with: refresh_chem_cache!\n\n\n\n\n\n\n\n\n\n\n\n\nrefresh_chem_cache!(c::Context)::Nothing\nNormally this isn’t needed as it will happen automatically.\n\n\n\n\n\n\n\n\n\n\n\n\nis_chem_cache_valid(c::Context)::Bool\nReturn true if the chemistry cache is valid, false otherwise.\n\n\n\n\n\n\n\n\n\n\n\n\nempty!(c::Context)\nRemove all filaments, membranes, link_2mons, cadherins, diffusing species, fixed species, bulk species, chemboundary, and mechboundary.\n\n\n\n\n\n\n\n\n\n\n\n\nchem_setmonomerstate!(c::Context, name::MonomerName, state::MonomerState)\nUpdate a monomer state.\n\n\n\n\n\n\n\n\n\n\n\n\nchem_polymerize!(c::Context, ftid, fid, isminusend::Bool, newstate::MonomerState)\nAdd a monomer with state newstate to the end of the filament with type id ftid and id fid.\nIf isminusend is true add the monomer to the minus end of the filament, if false add it to the plus end of the filament.\nThis doesn’t affect the other monomer states, positions, linked link_2mons, or change any of the monomer names. New monomers are not linkable until after minimization.\n\n\n\n\n\n\n\n\n\n\n\n\nchem_depolymerize!(c::Context, ftid, fid, isminusend::Bool)\nRemove a monomer from the end of the filament with type id ftid and id fid.\nIf isminusend is true remove the monomer from the minus end of the filament, if false remove it from the plus end of the filament.\nThis doesn’t affect the other monomer states, positions, linked link_2mons, or change any of the monomer names.\nError if the filament isn’t initially over 2 monomers long.\nWarn if the old end monomer is referenced in a link2mon, and remove the link2mon.\nThe warning can be disabled by passing keyword argument warniflink_2mon_removed=false\n\n\n\n\n\n\n\n\n\n\n\n\nchem_newlink_2mon!(c::Context, ltid::Int, endnames::Pair{MonomerName,MonomerName}, link_2mon_state::Link2MonState;\n    new_lid::Union{Nothing,Int64} = nothing,\n)::Int64\n\nchem_newlink_2mon!(c::Context, ltid::Int, endnames::Pair{MonomerName,MonomerName};\n    changedchemstate = (;),\n    changedmechstate = (;),\n    is_minimized = c.link_2mon_data[ltid].params.defaultstate.is_minimized,\n    new_lid::Union{Nothing,Int64} = nothing,\n)::Int64\nAdd a new link_2mon with type id ltid between monemers endnames.\nReturn the link_2mon id.\nError if a link_2mon of the same type links the same monomers in the same order.\nIf the link2mon state isn’t provided, c.link*2mon*data[ltid].params.defaultstate is new link2mon’s state, optionally modified by the changedchemstate, changedmechstate, and is_minimized keyword arguments.\nKeyword arguments changedchemstate and changedmechstate are namedtuples that shadow fields from the default chemstate and mechstate for the new link_2mon.\nKeyword argument is_minimized can be used to set the new link*2mon’s is*minimized state.\nKeyword argument new_lid can be optionally used to set the new link_2mon’s id, if this id is currently used, error.\n\n\nlid = chem_newlink_2mon!(c, g.ltid, minusname=&gt;plusname;\n        changedmechstate = (L0 = dist,),\n        changedchemstate = (numHeads = rand(g.numHeadsMin:g.numHeadsMax),),\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\nchem_removelink_2mon!(c::Context, ltid::Int, lid::Int64)\nRemove a link_2mon of type id ltid with id lid.\nError if the specified link_2mon doesn’t exist.\nDon’t modify monomer states.\n\n\n\n\n\n\n\n\n\n\n\n\nchem_setlink_2mon_state!(c::Context, ltid, lid, link_2mon_state::Link2MonState)\nSet link2monstate of the link_2mon of type id ltid with id lid.\nError if the specified link_2mon doesn’t exist.\n\n\n\n\n\n\n\n\n\n\n\n\nchem_newfilament!(c::Context; ftid=1, monomerstates, node_mids, nodepositions)\nReturn the filament id of a new filament.\nError if the filament isn’t initially over 2 monomers long.\nNewly added filaments don’t have decimated_2mon sites, until after minimization.\n\n\n\nftid=1: filament type id.\nmonomerstates: Collection of the MonomerState of the monomers in the new filament. In order from minus end to plus end.\nlength(monomerstates)&gt;1\nnodepositions: Collection of SVector{3,Float64}. The positions of the nodes, monomers are between nodes.\nnode_mids: Collection of Integer. The monomer ids at (slightly plus side of) the nodepositions\n                               |\n                    -----+-----|-----+-----\nminus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                    -----+-----|-----+-----\n                               |\n                               ^ A nodeposition is indicated by the line.\nThe monomer id with parenthesis (M) will in node_mids\nlength(node_mids) == length(nodepositions) - 1\nendloadforces=(0.0=&gt;0.0): end load forces, usually don’t use this, because load forces will automatically get updated at the next minimization.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nchem_removefilament!(c::Context; ftid=1, fid=maximum(filtype_fil_ids(c, ftid)))\nRemove the filament with type id ftid and id fid.\nBy default the last added filament with type id ftid is removed.\nWarn if any monomers on the filament are referenced by any link2mons, and remove those link2mons.\nThe warning can be disabled by passing keyword argument warniflink_2mon_removed=false\n\n\n\n\n\n\n\n\n\n\n\n\nnewmembrane!(c::MEDYAN.Context; type, meshinit)\nAdd a new membrane to the system.\n\n\n\nmeshinit is structure containing mesh shape initialization information, such as a named tuple (vertlist, trilist) containing vertex coordinates and triangle list, MeshInitEllipsoid, MeshInitPlane or a general MeshInitSurfaceFunc."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.membranespeciesparams-548fecb643fc2599",
    "href": "docstrings/src/context.html#medyan.membranespeciesparams-548fecb643fc2599",
    "title": "src/context.jl",
    "section": "",
    "text": "Membrane protein physical parameters.\n\ndiffusion_coeff::Float64: Membrane diffusion coefficients (nm^2/s).\narea::Float64: Protein area projected onto the surface (nm^2).\nkbend::Float64: Bending rigidity (pN nm).\neqcurv::Float64: The protein’s own spontaneous mean curvature (/nm). Can be used in bending energy computations with curvatures."
  },
  {
    "objectID": "docstrings/src/context.html#base.copy-4ca5eb8401ab10b2",
    "href": "docstrings/src/context.html#base.copy-4ca5eb8401ab10b2",
    "title": "src/context.jl",
    "section": "",
    "text": "Shallow copy, https://stackoverflow.com/questions/51956958/how-to-copy-a-struct-in-julia"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.context-736368ed32b08894",
    "href": "docstrings/src/context.html#medyan.context-736368ed32b08894",
    "title": "src/context.jl",
    "section": "",
    "text": "Context(sys_def::SysDef, grid::CubicGrid; kwargs...)\n\nagent_names::MEDYAN.AgentNames\nsys_def::MEDYAN.SysDef\ncompartments::Vector{MEDYAN.Compartment}\ngrid::Any\ntime::Ref{Float64}: time (s)\nstats::MEDYAN.PerformanceStats\nβ::Float64: inverse kT (1/(nm*pN))\nbase_diffusion_coeffs::Vector{Float64}: Diffusion coefficients indexed by diffusing species id (nm²/s)\nmembrane_species_params::StaticArraysCore.SVector{NUM_MEMBRANEDIFFUSINGSPECIES, MEDYAN.MembraneSpeciesParams} where NUM_MEMBRANEDIFFUSINGSPECIES: Membrane species parameters indexed by membrane diffusing species id.\nmin_compartment_volume_ratio::Float64: Smallest volume a compartment can have before being deactivated as a ratio to a full compartment volume.\nchemistryengine::MEDYAN.RDMESampler: The reaction diffusion master equation sampler, contains the diffusing and regular fixed species state\nlargestfilamentid::Vector{Int64}: The largest filament id, indexed by filament type id\nchem_cylinders::Vector{MEDYAN.ChemCylinders}: Data about filament cylinders, indexed by filament type id\nmembranes::Vector: All membrane meshes.\nlink_2mon_data::Tuple{Vararg{MEDYAN.Link2MonData}}: The linked link2mon parameters, indexed by link2mon type id, to give a Link2MonData\ndecimated_2mon_site_managers::Tuple{Vararg{MEDYAN.AbstractDecimated2MonSiteManager}}: Site managers, indexed by site id\nlinked_monomers::Dictionaries.Dictionary{MEDYAN.MonomerName, Vector{Vector{Int64}}}: Dictionary of all monomers that have a bound link2mon. indexed by monomer name, then link2montypeid, to give a vector of unique link2mon ids that reference the monomer name\nfilamentsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filament site definitions, indexed by filament type id, filament site id to get a SiteData with fields of id, site, fxsid\nfilamentendsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filamentend site definitions, indexed by filament type id, filamentend site id to get a SiteData with fields of id, site, fxsid\nmaxfilsite_plusrange::Vector{Int64}: The maximum plus range in monomers that any filament site or end site can see. Indexed by filament type id\nmaxfilsite_minusrange::Vector{Int64}: The maximum minus range in monomers that any filament site or end site can see. Indexed by filament type id\nmembranesites::Tuple{Vararg{MEDYAN.SiteData}}: Maps membrane site id to a SiteData with fields of id, site, fxsid.\nmap_membranediffusingspeciesindex_membranesiteindices::Tuple{Vararg{Vector{Int64}}}: Maps membrane diffusing species index to a list of membrane sites using this species as reactant. This is initialized during context init and should not be changed.\nlink_2mon_sites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: Site definitions, indexed by link_2mon type id, site id to get a SiteData with fields of id, site, fxsid\nmon_link_2mon_sites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: Site definitions, indexed by link_2mon type id, site id to get a SiteData with fields of id, site, fxsid\nchem_max_search_dist::Float64\ndecimated_2mon_sites::Tuple{Vararg{MEDYAN.SiteData}}: Site definitions, indexed by site id to get a SiteData with fields of id, site, fxsid\ncadherinsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}\ncadherindata::Tuple{Vararg{MEDYAN.CadherinData}}\npossiblecadherinsite_managers::Tuple{Vararg{MEDYAN.AbstractPossibleCadherinSiteManager}}: Site managers, indexed by site id\ncadherinlinked_vertices::Dictionaries.Dictionary{MEDYAN.VertexName, Vector{Vector{Pair{MEDYAN.VertexName, MEDYAN.MonomerName}}}}: Dictionary of all vertices that have a bound cadherin. indexed by vertex name, then cadherintypeid, to give a vector of unique cadherin endnames that reference the monomer name and vertex name\ncheck_sitecount_error::Bool: If true site counts are checked for errors on every chem update. This is extremely slow, but useful for testing chem update errors.\ncompartmentreactioncallbacks::Any\nbulkreactioncallbacks::Any\nmemdiff_bulks_index::Int64: Mock bulk species index for membrane diffusion.\nviscosity::Float64: viscosity (pNs/nm² or MPas) water is about 1E-9\ng_tol::Float64: maximum force magnitude after minimization (pN)\nshake_before_minimization::Bool: If true, add noise to coordinates before starting minimization.\niter_max_cg_minimization::Int64: Max number of steps in conjugate gradient minimization.\nmaxstep::Float64: max step to take during line search (nm)\nmax_cylinder_force::Float64: max cylinder force when two cylinders are at zero distance (pN)\ncheck_neighborlist_error::Bool: If true neighborlists are checked for errors on every force calc. This is extremely slow, but useful for testing neighborlist errors.\nnthreads::Int64: Experimental Set to more than 1 to enable multi threading. This is currently may result in non bitwise reproducable simulations. Results should be statistcally identical, but this is currently not well tested.\nenable_cylinder_volume_exclusion::Ref{Bool}: Are cylinder volume exclusion forces calculated\nenable_triangle_bead_volume_exclusion::Bool: Are triangle-bead volume exclusion forces calculated.\ncylinder_skin_radius::Float64: Extra cell list cutoff radius in nm. The cell lists are reset after a bead moves over this amount\nfilamentmechparams::Vector{MEDYAN.FilamentMechParams}: The filament mechanical parameters, indexed by filament type id\nmembranemechparams::Vector{MEDYAN.MembraneMechParams}: Membrane mechanical parameters, indexed by membrane type id.\nfunc_membranespeciespotentialenergy::Any: Membrane species potential energy function. See docs on default function for more info.\nmembranefilamentmechparams::MEDYAN.MembraneFilamentMechParams: Membrane-filament mechanical interaction parameters.\nexternal_energy_forces!::Any: External energy/force expressions. This should be a mutating function taking a (fc::MEDYAN.ForceContext), which adds to fc.forces, fc.energies, and fc.energy. The energy and force must be consistent, and this is not checked. This can be used as ad-hoc solutions to experiment with uncommon forces, such as specifically designed attachments, etc. If this variable is used often, consider moving it into MEDYAN.\nchemboundary::MEDYAN.Boundary: chemical boundary, updates compartment volumes and diffusion rates\nmeshindex_as_chemboundary::Ref{Int64}: The membrane index used as chemical boundary. If values other than 0 is used, the actual interior region of the chemical boundary is the intersection between\n\nthe interior of chemboundary, and\nthe interior of the membrane mesh at this index.\n\nNote: Since the membrane may change its shape often, set_chemboundary! might need to be called often accordingly to update volumes of compartments.\nmechboundary::MEDYAN.Boundary: mechanical boundary\nsharedtypedconfigs::MEDYAN.SharedTypedConfigs: Shared configurations stored in type parameters.\nvalidflags::MEDYAN.ValidFlags: Interval system consistency validation flags.\nfila_tip_tags::MEDYAN.TagManager{MEDYAN.FilaTipIdx}: Filament tip tags"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.num_filtypes-b9943bbf7a9c7781",
    "href": "docstrings/src/context.html#medyan.num_filtypes-b9943bbf7a9c7781",
    "title": "src/context.jl",
    "section": "",
    "text": "num_filtypes(c::MEDYAN.Context) -&gt; Int64\nReturn the number of filament types."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.filtype_fil_ids-d333c38b9f9b3584",
    "href": "docstrings/src/context.html#medyan.filtype_fil_ids-d333c38b9f9b3584",
    "title": "src/context.jl",
    "section": "",
    "text": "filtype_fil_ids(\n    c::MEDYAN.Context,\n    ftid::Int64\n) -&gt; Vector{Int64}\nReturn a read only iterable of all filament ids of filament type ftid.\nThis can be invalid after any mutations to context, so collect if needed."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.fil_node_positions-618a66637eb50781",
    "href": "docstrings/src/context.html#medyan.fil_node_positions-618a66637eb50781",
    "title": "src/context.jl",
    "section": "",
    "text": "fil_node_positions(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; Vector{StaticArraysCore.SVector{3, Float64}}\nReturn the node positions of the filament"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.fil_node_mon_ids-b1d3d66a81296343",
    "href": "docstrings/src/context.html#medyan.fil_node_mon_ids-b1d3d66a81296343",
    "title": "src/context.jl",
    "section": "",
    "text": "fil_node_mon_ids(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; Vector{Int64}\nReturn the node monomer ids of the filament.\nThe fil_node_mon_ids are the monomer ids at (slightly plus side of) the fil_node_positions\n                                 |\n                      -----+-----|-----+-----\n  minus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                      -----+-----|-----+-----\n                                 |\n                                 ^ A node position is indicated by the line.\n\nThe monomer id with parenthesis (M) will in `fil_node_mon_ids`\nThe first monomer id is the first monomer id on the filament. The last monomer id is the last monomer id on the filament + 1"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.fil_mon_states-3db9714621903b78",
    "href": "docstrings/src/context.html#medyan.fil_mon_states-3db9714621903b78",
    "title": "src/context.jl",
    "section": "",
    "text": "fil_mon_states(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; OffsetArrays.OffsetVector{UInt8, Vector{UInt8}}\nReturn a read only OffsetVector of monomer states on a filament.\nThis can be invalid after any mutations to context, so copy if needed."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.fil_num_unmin_ends-813ffc641f9ac9da",
    "href": "docstrings/src/context.html#medyan.fil_num_unmin_ends-813ffc641f9ac9da",
    "title": "src/context.jl",
    "section": "",
    "text": "fil_num_unmin_ends(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; Tuple{Int64, Int64}\nReturn a tuple (minus, plus) of the number of unminimized monomers on the minus and plus end of a filament.\nThis will be reset to (0, 0) by minimize_energy!\nWhen an end is depolymerized this will decrease, but saturate at 0. When an end is polymerized this will increase.\nFor example if after minimization a filament has a plus end depolymerization, this function will return (0, 0). Then if a plus end polymerization happens, this function will return (0, 1), even though the net change in filament length is zero."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.vertex_state-aa3350c08b68b63a",
    "href": "docstrings/src/context.html#medyan.vertex_state-aa3350c08b68b63a",
    "title": "src/context.jl",
    "section": "",
    "text": "vertex_state(\n    c::MEDYAN.Context,\n    vertexname::MEDYAN.VertexName\n) -&gt; UInt8\nReturn the vertex state on a membrane."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.mon_exists-898c415a5eddc619",
    "href": "docstrings/src/context.html#medyan.mon_exists-898c415a5eddc619",
    "title": "src/context.jl",
    "section": "",
    "text": "mon_exists(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Bool\nReturn true iff the filament and monomer exists"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.mon_minimized-5b17adaf7d8a4f62",
    "href": "docstrings/src/context.html#medyan.mon_minimized-5b17adaf7d8a4f62",
    "title": "src/context.jl",
    "section": "",
    "text": "mon_minimized(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Bool\nReturn true iff the monomer has been minimized"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.mon_3states-6c16efb303a60058",
    "href": "docstrings/src/context.html#medyan.mon_3states-6c16efb303a60058",
    "title": "src/context.jl",
    "section": "",
    "text": "mon_3states(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Tuple{UInt8, UInt8, UInt8}\nReturn a tuple of three monomer states centered at a monomer.\nIf a monomer doesn’t exist, its state will be zero. The filament must exist."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.mon_position-83983d8916347411",
    "href": "docstrings/src/context.html#medyan.mon_position-83983d8916347411",
    "title": "src/context.jl",
    "section": "",
    "text": "mon_position(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; StaticArraysCore.SVector{3, Float64}\nReturn the monomer position."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.mon_plusvector-b7271c7721602813",
    "href": "docstrings/src/context.html#medyan.mon_plusvector-b7271c7721602813",
    "title": "src/context.jl",
    "section": "",
    "text": "mon_plusvector(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; StaticArraysCore.SVector{3, Float64}\nReturn the unit vector toward the plus end of the filament."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.mon_position_plusvector-927d0affbbdfef6f",
    "href": "docstrings/src/context.html#medyan.mon_position_plusvector-927d0affbbdfef6f",
    "title": "src/context.jl",
    "section": "",
    "text": "mon_position_plusvector(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Tuple{StaticArraysCore.SVector{3, Float64}, StaticArraysCore.SVector{3, Float64}}\nReturn a tuple of position and plusvector at a monomer."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.link_2mon_endnames-5d0bca4b8e2e3509",
    "href": "docstrings/src/context.html#medyan.link_2mon_endnames-5d0bca4b8e2e3509",
    "title": "src/context.jl",
    "section": "",
    "text": "link_2mon_endnames(\n    c::MEDYAN.Context,\n    ltid,\n    lid\n) -&gt; Pair{MEDYAN.MonomerName, MEDYAN.MonomerName}\nReturn the minusend name =&gt; plusend name of the link with type id ltid, and link id lid"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.link_2mon_state-6d59dcd98ed7e303",
    "href": "docstrings/src/context.html#medyan.link_2mon_state-6d59dcd98ed7e303",
    "title": "src/context.jl",
    "section": "",
    "text": "link_2mon_state(\n    c::MEDYAN.Context,\n    ltid,\n    lid\n) -&gt; MEDYAN.Link2MonState\nReturn the Link2MonState of the link with type id ltid, and link id lid"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.set_time--a6dd8f73f68a3759",
    "href": "docstrings/src/context.html#medyan.set_time--a6dd8f73f68a3759",
    "title": "src/context.jl",
    "section": "",
    "text": "set_time!(c::MEDYAN.Context, x::Float64) -&gt; Float64\nTime (s)"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.set_enable_cylinder_volume_exclusion--38c20ab68ab8bf1a",
    "href": "docstrings/src/context.html#medyan.set_enable_cylinder_volume_exclusion--38c20ab68ab8bf1a",
    "title": "src/context.jl",
    "section": "",
    "text": "set_enable_cylinder_volume_exclusion!(\n    c::MEDYAN.Context,\n    x::Bool\n) -&gt; Bool\nAre cylinder volume exclusion forces calculated."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.set_chemboundary--0aa6e4e95c60f9f7",
    "href": "docstrings/src/context.html#medyan.set_chemboundary--0aa6e4e95c60f9f7",
    "title": "src/context.jl",
    "section": "",
    "text": "set_chemboundary!(\n    c::MEDYAN.Context;\n    meshindex_as_chemboundary,\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSet chemical boundary and update compartment volumes and diffusion rates. Note, the chemboundary should be outside the mechboundary so that it is rare for filaments to go outside the chemboundary\nSee also Boundary\n\n\n\nplanes::Vector{SVector{4,Float64}} = []\n\nPlanes that make up the chemical boundary of the simulation\ninside = signbit(pos ⋅ planes[bi][1:3] - planes[bi][4])\nFor example, a plane [1,0,0,3] is inside if x &lt; 3 nm.\n2.0*[1,0,0,3] is also inside if x &lt; 3 nm.\n\ncapsules::Vector{SVector{8,Float64}} = []\n\nCapsules that make up the chemical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is ignored.\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\n\nmeshindex_as_chemboundary::Int = 0: Index of membrane mesh that further restricts the chem boundary. 0 for none.\n\nThe system geometry information must be up-to-date. This mesh index is not stored in the boundary object, but is directly set in the context."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.set_mechboundary--b5e26b6b690256aa",
    "href": "docstrings/src/context.html#medyan.set_mechboundary--b5e26b6b690256aa",
    "title": "src/context.jl",
    "section": "",
    "text": "set_mechboundary!(\n    c::MEDYAN.Context;\n    kwargs...\n) -&gt; MEDYAN.Boundary\nSee also Boundary"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.chem_adddiffusingcount--2264be341b81a600",
    "href": "docstrings/src/context.html#medyan.chem_adddiffusingcount--2264be341b81a600",
    "title": "src/context.jl",
    "section": "",
    "text": "chem_adddiffusingcount!(c::Context, sid, cid, inccount)\nAdd inccount to diffusing species id sid in compartment id cid"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.chem_addfixedcount--0286edfebf8ea5e6",
    "href": "docstrings/src/context.html#medyan.chem_addfixedcount--0286edfebf8ea5e6",
    "title": "src/context.jl",
    "section": "",
    "text": "chem_addfixedcount!(c::Context, sid, cid, inccount)\nAdd inccount to fixed species id sid in compartment id cid"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.adddiffusingcount_rand--9d3ddfabbceeef92",
    "href": "docstrings/src/context.html#medyan.adddiffusingcount_rand--9d3ddfabbceeef92",
    "title": "src/context.jl",
    "section": "",
    "text": "adddiffusingcount_rand!(c::Context, dsid, inccount)\nDistribute the added diffusing species count randomly to compartments weighted by volume.\n\ndsid: diffusing species id.\ninccount: amount to add."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.addmembranediffusingcount_rand--7b719dca63a36b1b",
    "href": "docstrings/src/context.html#medyan.addmembranediffusingcount_rand--7b719dca63a36b1b",
    "title": "src/context.jl",
    "section": "",
    "text": "addmembranediffusingcount_rand!(\n    c::MEDYAN.Context,\n    membraneindex::Int64,\n    speciesindex::Int64,\n    addcount::Int64\n)\nDistribute the added membrane species count randomly to membrane cells, ignoring cell area difference. Does NOT update propensity."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.newfilament_rand--432ec27232aad41e",
    "href": "docstrings/src/context.html#medyan.newfilament_rand--432ec27232aad41e",
    "title": "src/context.jl",
    "section": "",
    "text": "newfilament_rand!(c::Context, monomerstates; iterations = 10^9, ftid = 1)\nAdd a filament with type id ftid to the Context with random center position and direction.\nReturn the filament id of a new filament.\nmonomerstates is a collection of the MonomerState of the monomers in the new filament.\nThe filament will be inside the mech boundary.\nErrors if it fails to add a filament.\nThe monomer are spaced by the value in the filament type’s mechanical parameters."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.run_chemistry--dda22fac5c555b9e",
    "href": "docstrings/src/context.html#medyan.run_chemistry--dda22fac5c555b9e",
    "title": "src/context.jl",
    "section": "",
    "text": "run_chemistry!(c::Context, Δt)\nRun chemistry for Δt time.\nUpdate c.time."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.defer_chem_caching--9538a1c449f3da93",
    "href": "docstrings/src/context.html#medyan.defer_chem_caching--9538a1c449f3da93",
    "title": "src/context.jl",
    "section": "",
    "text": "defer_chem_caching!(c::Context)::Nothing\nThis should only be used for advanced optimizations.\nDuring chemistry, the context mutating functions will typically try to avoid invalidating various cached data needed to quickly sample sites.\nHowever, if you want to mutate the context outside of chemistry, for example right before or after minimization, you may not want to pay the cost of revalidating all the caches because minimization will already invalidate the caches. Caching will be enabled again and caches will be made valid the next time chemistry is run. Caching can also be manually refreshed and reenabled with: refresh_chem_cache!"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.refresh_chem_cache--f90ebca1f896ad2c",
    "href": "docstrings/src/context.html#medyan.refresh_chem_cache--f90ebca1f896ad2c",
    "title": "src/context.jl",
    "section": "",
    "text": "refresh_chem_cache!(c::Context)::Nothing\nNormally this isn’t needed as it will happen automatically."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.is_chem_cache_valid-8336a8adc58a252f",
    "href": "docstrings/src/context.html#medyan.is_chem_cache_valid-8336a8adc58a252f",
    "title": "src/context.jl",
    "section": "",
    "text": "is_chem_cache_valid(c::Context)::Bool\nReturn true if the chemistry cache is valid, false otherwise."
  },
  {
    "objectID": "docstrings/src/context.html#base.empty--418304748816268d",
    "href": "docstrings/src/context.html#base.empty--418304748816268d",
    "title": "src/context.jl",
    "section": "",
    "text": "empty!(c::Context)\nRemove all filaments, membranes, link_2mons, cadherins, diffusing species, fixed species, bulk species, chemboundary, and mechboundary."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.chem_setmonomerstate--ed756af0de4db0ca",
    "href": "docstrings/src/context.html#medyan.chem_setmonomerstate--ed756af0de4db0ca",
    "title": "src/context.jl",
    "section": "",
    "text": "chem_setmonomerstate!(c::Context, name::MonomerName, state::MonomerState)\nUpdate a monomer state."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.chem_polymerize--7a5e88ac36e4ccbf",
    "href": "docstrings/src/context.html#medyan.chem_polymerize--7a5e88ac36e4ccbf",
    "title": "src/context.jl",
    "section": "",
    "text": "chem_polymerize!(c::Context, ftid, fid, isminusend::Bool, newstate::MonomerState)\nAdd a monomer with state newstate to the end of the filament with type id ftid and id fid.\nIf isminusend is true add the monomer to the minus end of the filament, if false add it to the plus end of the filament.\nThis doesn’t affect the other monomer states, positions, linked link_2mons, or change any of the monomer names. New monomers are not linkable until after minimization."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.chem_depolymerize--a5f262191e484dd4",
    "href": "docstrings/src/context.html#medyan.chem_depolymerize--a5f262191e484dd4",
    "title": "src/context.jl",
    "section": "",
    "text": "chem_depolymerize!(c::Context, ftid, fid, isminusend::Bool)\nRemove a monomer from the end of the filament with type id ftid and id fid.\nIf isminusend is true remove the monomer from the minus end of the filament, if false remove it from the plus end of the filament.\nThis doesn’t affect the other monomer states, positions, linked link_2mons, or change any of the monomer names.\nError if the filament isn’t initially over 2 monomers long.\nWarn if the old end monomer is referenced in a link2mon, and remove the link2mon.\nThe warning can be disabled by passing keyword argument warniflink_2mon_removed=false"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.chem_newlink_2mon--e4f84fe5cfa9a727",
    "href": "docstrings/src/context.html#medyan.chem_newlink_2mon--e4f84fe5cfa9a727",
    "title": "src/context.jl",
    "section": "",
    "text": "chem_newlink_2mon!(c::Context, ltid::Int, endnames::Pair{MonomerName,MonomerName}, link_2mon_state::Link2MonState;\n    new_lid::Union{Nothing,Int64} = nothing,\n)::Int64\n\nchem_newlink_2mon!(c::Context, ltid::Int, endnames::Pair{MonomerName,MonomerName};\n    changedchemstate = (;),\n    changedmechstate = (;),\n    is_minimized = c.link_2mon_data[ltid].params.defaultstate.is_minimized,\n    new_lid::Union{Nothing,Int64} = nothing,\n)::Int64\nAdd a new link_2mon with type id ltid between monemers endnames.\nReturn the link_2mon id.\nError if a link_2mon of the same type links the same monomers in the same order.\nIf the link2mon state isn’t provided, c.link*2mon*data[ltid].params.defaultstate is new link2mon’s state, optionally modified by the changedchemstate, changedmechstate, and is_minimized keyword arguments.\nKeyword arguments changedchemstate and changedmechstate are namedtuples that shadow fields from the default chemstate and mechstate for the new link_2mon.\nKeyword argument is_minimized can be used to set the new link*2mon’s is*minimized state.\nKeyword argument new_lid can be optionally used to set the new link_2mon’s id, if this id is currently used, error.\n\n\nlid = chem_newlink_2mon!(c, g.ltid, minusname=&gt;plusname;\n        changedmechstate = (L0 = dist,),\n        changedchemstate = (numHeads = rand(g.numHeadsMin:g.numHeadsMax),),\n    )"
  },
  {
    "objectID": "docstrings/src/context.html#example",
    "href": "docstrings/src/context.html#example",
    "title": "src/context.jl",
    "section": "",
    "text": "lid = chem_newlink_2mon!(c, g.ltid, minusname=&gt;plusname;\n        changedmechstate = (L0 = dist,),\n        changedchemstate = (numHeads = rand(g.numHeadsMin:g.numHeadsMax),),\n    )"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.chem_removelink_2mon--e25a3fd69f791cd0",
    "href": "docstrings/src/context.html#medyan.chem_removelink_2mon--e25a3fd69f791cd0",
    "title": "src/context.jl",
    "section": "",
    "text": "chem_removelink_2mon!(c::Context, ltid::Int, lid::Int64)\nRemove a link_2mon of type id ltid with id lid.\nError if the specified link_2mon doesn’t exist.\nDon’t modify monomer states."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.chem_setlink_2mon_state--82213403237b28e5",
    "href": "docstrings/src/context.html#medyan.chem_setlink_2mon_state--82213403237b28e5",
    "title": "src/context.jl",
    "section": "",
    "text": "chem_setlink_2mon_state!(c::Context, ltid, lid, link_2mon_state::Link2MonState)\nSet link2monstate of the link_2mon of type id ltid with id lid.\nError if the specified link_2mon doesn’t exist."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.chem_newfilament--7a45f2860949bee3",
    "href": "docstrings/src/context.html#medyan.chem_newfilament--7a45f2860949bee3",
    "title": "src/context.jl",
    "section": "",
    "text": "chem_newfilament!(c::Context; ftid=1, monomerstates, node_mids, nodepositions)\nReturn the filament id of a new filament.\nError if the filament isn’t initially over 2 monomers long.\nNewly added filaments don’t have decimated_2mon sites, until after minimization.\n\n\n\nftid=1: filament type id.\nmonomerstates: Collection of the MonomerState of the monomers in the new filament. In order from minus end to plus end.\nlength(monomerstates)&gt;1\nnodepositions: Collection of SVector{3,Float64}. The positions of the nodes, monomers are between nodes.\nnode_mids: Collection of Integer. The monomer ids at (slightly plus side of) the nodepositions\n                               |\n                    -----+-----|-----+-----\nminus end &lt;----       M  |  M  | (M) |  M        ----&gt; plus end\n                    -----+-----|-----+-----\n                               |\n                               ^ A nodeposition is indicated by the line.\nThe monomer id with parenthesis (M) will in node_mids\nlength(node_mids) == length(nodepositions) - 1\nendloadforces=(0.0=&gt;0.0): end load forces, usually don’t use this, because load forces will automatically get updated at the next minimization."
  },
  {
    "objectID": "docstrings/src/context.html#medyan.chem_removefilament--f36888837f14bad7",
    "href": "docstrings/src/context.html#medyan.chem_removefilament--f36888837f14bad7",
    "title": "src/context.jl",
    "section": "",
    "text": "chem_removefilament!(c::Context; ftid=1, fid=maximum(filtype_fil_ids(c, ftid)))\nRemove the filament with type id ftid and id fid.\nBy default the last added filament with type id ftid is removed.\nWarn if any monomers on the filament are referenced by any link2mons, and remove those link2mons.\nThe warning can be disabled by passing keyword argument warniflink_2mon_removed=false"
  },
  {
    "objectID": "docstrings/src/context.html#medyan.newmembrane--a714b4a1c87062be",
    "href": "docstrings/src/context.html#medyan.newmembrane--a714b4a1c87062be",
    "title": "src/context.jl",
    "section": "",
    "text": "newmembrane!(c::MEDYAN.Context; type, meshinit)\nAdd a new membrane to the system.\n\n\n\nmeshinit is structure containing mesh shape initialization information, such as a named tuple (vertlist, trilist) containing vertex coordinates and triangle list, MeshInitEllipsoid, MeshInitPlane or a general MeshInitSurfaceFunc."
  },
  {
    "objectID": "docstrings/src/membrane/meshadapt.html",
    "href": "docstrings/src/membrane/meshadapt.html",
    "title": "src/membrane/meshadapt.jl",
    "section": "",
    "text": "Return the number of vertices with state 2. Check the number of vertices with state 2. The number should be constant."
  },
  {
    "objectID": "docstrings/src/membrane/meshadapt.html#medyan.num_vertexwithstate-3cf6fcd964588d37",
    "href": "docstrings/src/membrane/meshadapt.html#medyan.num_vertexwithstate-3cf6fcd964588d37",
    "title": "src/membrane/meshadapt.jl",
    "section": "",
    "text": "Return the number of vertices with state 2. Check the number of vertices with state 2. The number should be constant."
  },
  {
    "objectID": "docstrings/src/auxprocs.html",
    "href": "docstrings/src/auxprocs.html",
    "title": "src/auxprocs.jl",
    "section": "",
    "text": "Remesh all membrane meshes.\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an AABB tree corresponding to up-to-date membrane mesh triangles, resolve all filament-membrane intersections.\nRequires\n\nup-to-date unit normals of all triangles in the meshes.\nup-to-date AABB tree corresponding to all membrane meshes.\n\n\n\n\n\n\n\n\n\n\n\n\n\nUpdates all membrane geometries used across various parts of MEDYAN.\nThe list of all items can be found in the document for MEDYAN.compute_geometry!_system function.\nKeyword parameters:\n\ninclude_ff::Bool: If true, compute_geometry! used in energy computations will be applied as well, requiring vectorization of the membrane. This happens before system geometry computation in case some fields are overriden."
  },
  {
    "objectID": "docstrings/src/auxprocs.html#medyan.adapt_membranes--1d26092defd0f4fa",
    "href": "docstrings/src/auxprocs.html#medyan.adapt_membranes--1d26092defd0f4fa",
    "title": "src/auxprocs.jl",
    "section": "",
    "text": "Remesh all membrane meshes."
  },
  {
    "objectID": "docstrings/src/auxprocs.html#medyan.resolve_all_filament_mesh_crossing--a8be83a7d2ad65c7",
    "href": "docstrings/src/auxprocs.html#medyan.resolve_all_filament_mesh_crossing--a8be83a7d2ad65c7",
    "title": "src/auxprocs.jl",
    "section": "",
    "text": "Given an AABB tree corresponding to up-to-date membrane mesh triangles, resolve all filament-membrane intersections.\nRequires\n\nup-to-date unit normals of all triangles in the meshes.\nup-to-date AABB tree corresponding to all membrane meshes."
  },
  {
    "objectID": "docstrings/src/auxprocs.html#medyan.compute_all_membrane_geometry-_system-05b4d2a32e31560c",
    "href": "docstrings/src/auxprocs.html#medyan.compute_all_membrane_geometry-_system-05b4d2a32e31560c",
    "title": "src/auxprocs.jl",
    "section": "",
    "text": "Updates all membrane geometries used across various parts of MEDYAN.\nThe list of all items can be found in the document for MEDYAN.compute_geometry!_system function.\nKeyword parameters:\n\ninclude_ff::Bool: If true, compute_geometry! used in energy computations will be applied as well, requiring vectorization of the membrane. This happens before system geometry computation in case some fields are overriden."
  },
  {
    "objectID": "docstrings/src/filamentendsites.html",
    "href": "docstrings/src/filamentendsites.html",
    "title": "src/filamentendsites.jl",
    "section": "",
    "text": "Filament end site that matches with a vector of monomer states.\n\nisminusend::Bool\nendstates::Vector{UInt8}\nspacing::Float64\nadded_monomers::Int64"
  },
  {
    "objectID": "docstrings/src/filamentendsites.html#medyan.filamentendsitegeneral-7a32ac96fb4364ea",
    "href": "docstrings/src/filamentendsites.html#medyan.filamentendsitegeneral-7a32ac96fb4364ea",
    "title": "src/filamentendsites.jl",
    "section": "",
    "text": "Filament end site that matches with a vector of monomer states.\n\nisminusend::Bool\nendstates::Vector{UInt8}\nspacing::Float64\nadded_monomers::Int64"
  },
  {
    "objectID": "docstrings/src/grids.html",
    "href": "docstrings/src/grids.html",
    "title": "src/grids.jl",
    "section": "",
    "text": "CubicGrid(num_voxels::SVector{3,Int}, compartmentsize::Float64)\n\nn::StaticArraysCore.SVector{3, Int64}\ncompartmentsize::Float64\n\n\n\n\n\n\n\n\n\n\n\n\n\nBase.length(grid::CubicGrid)\nTotal number of compartments in the grid\n\n\n\n\n\n\n\n\n\n\n\n\ngrididat(grid::CubicGrid, location)\nReturn the grid id of location The origin is in the center. Returns a close by voxel if out of the grid\n\n\n\n\n\n\n\n\n\n\n\n\nfilter_grididat(f, grid::CubicGrid, location)\nReturn the nearest grid id of location where f(id) evaluates to true. The origin is in the center. errors if there is no id that evaluates to true. Returns a close by voxel if out of the grid.\n\n\n\n\n\n\n\n\n\n\n\n\ncenterof(grid::CubicGrid, cid)\nReturn the location of the center of a grid id The origin is in the center.\n\n\n\n\n\n\n\n\n\ncenterof(grid::CubicGrid)\nReturn the location of the center the grid The origin is in the center.\n\n\n\n\n\n\n\n\n\n\n\n\nrandompoint(grid::CubicGrid,cid)::SVector{3,Float64}\nReturn a random point in a voxel Note, due to floating point rounding, there is a small chance the returned point may be in a nearby voxel.\n\n\n\n\n\n\n\n\n\nrandompoint(grid::CubicGrid)::SVector{3,Float64}\nReturn a random point in the grid"
  },
  {
    "objectID": "docstrings/src/grids.html#medyan.cubicgrid-fe4b7cc2dceb0431",
    "href": "docstrings/src/grids.html#medyan.cubicgrid-fe4b7cc2dceb0431",
    "title": "src/grids.jl",
    "section": "",
    "text": "CubicGrid(num_voxels::SVector{3,Int}, compartmentsize::Float64)\n\nn::StaticArraysCore.SVector{3, Int64}\ncompartmentsize::Float64"
  },
  {
    "objectID": "docstrings/src/grids.html#base.length-7ea31a421de7d258",
    "href": "docstrings/src/grids.html#base.length-7ea31a421de7d258",
    "title": "src/grids.jl",
    "section": "",
    "text": "Base.length(grid::CubicGrid)\nTotal number of compartments in the grid"
  },
  {
    "objectID": "docstrings/src/grids.html#medyan.grididat-8671e01413346deb",
    "href": "docstrings/src/grids.html#medyan.grididat-8671e01413346deb",
    "title": "src/grids.jl",
    "section": "",
    "text": "grididat(grid::CubicGrid, location)\nReturn the grid id of location The origin is in the center. Returns a close by voxel if out of the grid"
  },
  {
    "objectID": "docstrings/src/grids.html#medyan.filter_grididat-58a94154d21e32b0",
    "href": "docstrings/src/grids.html#medyan.filter_grididat-58a94154d21e32b0",
    "title": "src/grids.jl",
    "section": "",
    "text": "filter_grididat(f, grid::CubicGrid, location)\nReturn the nearest grid id of location where f(id) evaluates to true. The origin is in the center. errors if there is no id that evaluates to true. Returns a close by voxel if out of the grid."
  },
  {
    "objectID": "docstrings/src/grids.html#medyan.centerof-e902b9bb7b2a6caf",
    "href": "docstrings/src/grids.html#medyan.centerof-e902b9bb7b2a6caf",
    "title": "src/grids.jl",
    "section": "",
    "text": "centerof(grid::CubicGrid, cid)\nReturn the location of the center of a grid id The origin is in the center.\n\n\n\n\n\n\n\n\n\ncenterof(grid::CubicGrid)\nReturn the location of the center the grid The origin is in the center."
  },
  {
    "objectID": "docstrings/src/grids.html#medyan.randompoint-83e939bdee528294",
    "href": "docstrings/src/grids.html#medyan.randompoint-83e939bdee528294",
    "title": "src/grids.jl",
    "section": "",
    "text": "randompoint(grid::CubicGrid,cid)::SVector{3,Float64}\nReturn a random point in a voxel Note, due to floating point rounding, there is a small chance the returned point may be in a nearby voxel.\n\n\n\n\n\n\n\n\n\nrandompoint(grid::CubicGrid)::SVector{3,Float64}\nReturn a random point in the grid"
  },
  {
    "objectID": "docstrings/src/util/stableindex.html",
    "href": "docstrings/src/util/stableindex.html",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Whether an ID is in use.\n\n\n\n\n\n\n\n\n\n\n\n\nTotal number of IDs in use.\n\n\n\n\n\n\n\n\n\n\n\n\nGet index at ID.\n\n\n\n\n\n\n\n\n\n\n\n\nMap ID to a new index. The ID must be in use.\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a new index. Returns its ID.\n\n\n\n\n\n\n\n\n\n\n\n\nRemove a recorded index at ID.\n\n\n\n\n\n\n\n\n\n\n\n\nClear all index records.\n\n\n\n\n\n\n\n\n\n\n\n\nIterates through valid IDs in the StableIndex."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.haskey-e7d3f961991e2663",
    "href": "docstrings/src/util/stableindex.html#base.haskey-e7d3f961991e2663",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Whether an ID is in use."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.length-7ea31a421de7d258",
    "href": "docstrings/src/util/stableindex.html#base.length-7ea31a421de7d258",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Total number of IDs in use."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.getindex-f593dde852851bc8",
    "href": "docstrings/src/util/stableindex.html#base.getindex-f593dde852851bc8",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Get index at ID."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.setindex--725f722fff4cfa6d",
    "href": "docstrings/src/util/stableindex.html#base.setindex--725f722fff4cfa6d",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Map ID to a new index. The ID must be in use."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.push--8715d52e2302aaeb",
    "href": "docstrings/src/util/stableindex.html#base.push--8715d52e2302aaeb",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Add a new index. Returns its ID."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.delete--56ef520341df3c06",
    "href": "docstrings/src/util/stableindex.html#base.delete--56ef520341df3c06",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Remove a recorded index at ID."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.empty--418304748816268d",
    "href": "docstrings/src/util/stableindex.html#base.empty--418304748816268d",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Clear all index records."
  },
  {
    "objectID": "docstrings/src/util/stableindex.html#base.iterate-5228367cd62c0bf2",
    "href": "docstrings/src/util/stableindex.html#base.iterate-5228367cd62c0bf2",
    "title": "src/util/stableindex.jl",
    "section": "",
    "text": "Iterates through valid IDs in the StableIndex."
  },
  {
    "objectID": "docstrings/src/cadherins/possiblecadherinsite.html",
    "href": "docstrings/src/cadherins/possiblecadherinsite.html",
    "title": "src/cadherins/possiblecadherinsite.jl",
    "section": "",
    "text": "Possible Cadherin Site: one end fixed on vertex, other end on filament. For fend within max to min range are linkable. If they have matching state with vertexstate and monomerstate."
  },
  {
    "objectID": "docstrings/src/cadherins/possiblecadherinsite.html#medyan.vertexstate-450b7005d2acebe8",
    "href": "docstrings/src/cadherins/possiblecadherinsite.html#medyan.vertexstate-450b7005d2acebe8",
    "title": "src/cadherins/possiblecadherinsite.jl",
    "section": "",
    "text": "Possible Cadherin Site: one end fixed on vertex, other end on filament. For fend within max to min range are linkable. If they have matching state with vertexstate and monomerstate."
  },
  {
    "objectID": "docstrings/src/boundary.html",
    "href": "docstrings/src/boundary.html",
    "title": "src/boundary.jl",
    "section": "",
    "text": "Mechanical boundary\nSee also boundary_box\n\nplanes::Vector{StaticArraysCore.SVector{4, Float64}}: Planes that make up the mechanical boundary of the simulation.\nE = 1//2 * relu(pos ⋅ planes[bi][1:3] - planes[bi][4])^2\nFor example, a mech bounding plane [1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 1 pN/nm.\n2.0*[1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 4 pN/nm.\ncapsules::Vector{StaticArraysCore.SVector{8, Float64}}: Capsules that make up the mechanical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is the spring constant (pN/nm).\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\nE = 1//2*k*relu(d - r0)^2 where:\n\nd is the distance of the point to the spine line segment described by capsules[bi][1:6].\nr0 is capsules[bi][7]\nk is capsules[bi][8]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nboundary_plane(\n;\n    normal,\n    point,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a plane boundary.\nnormal(unit vector): Vector pointing normal to the plane. This points outside of the boundary.\npoint(nm): Point on the plane.\nstiffness(pN/nm): How strong the boundary is.\n\n\n\n\n\n\n\n\n\n\n\n\nboundary_box(\n    grid::MEDYAN.CubicGrid;\n    offset,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a box boundary at the edge of a grid.\noffset(nm): How far the bounding planes should be moved in from the edge of the grid. Positive is inside the grid, negative is outside the grid.\nstiffness(pN/nm): How strong the boundary is.\n\n\n\n\n\n\n\n\n\n\n\n\nboundary_capsule(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a capsule boundary.\ncenter(nm): The center of the capsule.\naxis(nm): The direction and length of the capsule spine. The spine line segment goes from center - axis/2 to center + axis/2 If zero the capsule is a sphere.\nradius(nm): Radius of capsule, the full length of the capsule is norm(axis) + 2radius.\nstiffness(pN/nm): How strong the boundary is.\n\n\n\n\n\n\n\n\n\n\n\n\nboundary_cylinder(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a cylinder boundary.\ncenter(nm): The center of the cylinder.\naxis(nm): The direction and length of the cylinder. The spine line segment goes from center - axis/2 to center + axis/2 the full length of the cylinder is norm(axis).\nradius(nm): Radius of cylinder.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/src/boundary.html#medyan.boundary-f1e7be79002a27f8",
    "href": "docstrings/src/boundary.html#medyan.boundary-f1e7be79002a27f8",
    "title": "src/boundary.jl",
    "section": "",
    "text": "Mechanical boundary\nSee also boundary_box\n\nplanes::Vector{StaticArraysCore.SVector{4, Float64}}: Planes that make up the mechanical boundary of the simulation.\nE = 1//2 * relu(pos ⋅ planes[bi][1:3] - planes[bi][4])^2\nFor example, a mech bounding plane [1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 1 pN/nm.\n2.0*[1,0,0,3] would try and make x &lt; 3 nm with a spring constant of 4 pN/nm.\ncapsules::Vector{StaticArraysCore.SVector{8, Float64}}: Capsules that make up the mechanical boundary of the simulation.\ncapsules[bi][1:3] is the starting point of the spine line segment (nm). capsules[bi][4:6] is the axis of the spine line segment (nm). capsules[bi][7] is the radius (nm). capsules[bi][8] is the spring constant (pN/nm).\nif capsules[bi][4:6] is zero then the capsule is a sphere. Capsule boundaries can be combined with plane boundaries to create cylinder boundaries.\nE = 1//2*k*relu(d - r0)^2 where:\n\nd is the distance of the point to the spine line segment described by capsules[bi][1:6].\nr0 is capsules[bi][7]\nk is capsules[bi][8]"
  },
  {
    "objectID": "docstrings/src/boundary.html#medyan.boundary_plane-2caa9b52b3b3f0cc",
    "href": "docstrings/src/boundary.html#medyan.boundary_plane-2caa9b52b3b3f0cc",
    "title": "src/boundary.jl",
    "section": "",
    "text": "boundary_plane(\n;\n    normal,\n    point,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a plane boundary.\nnormal(unit vector): Vector pointing normal to the plane. This points outside of the boundary.\npoint(nm): Point on the plane.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/src/boundary.html#medyan.boundary_box-060d4c56df40146a",
    "href": "docstrings/src/boundary.html#medyan.boundary_box-060d4c56df40146a",
    "title": "src/boundary.jl",
    "section": "",
    "text": "boundary_box(\n    grid::MEDYAN.CubicGrid;\n    offset,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a box boundary at the edge of a grid.\noffset(nm): How far the bounding planes should be moved in from the edge of the grid. Positive is inside the grid, negative is outside the grid.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/src/boundary.html#medyan.boundary_capsule-1700142f310bd9db",
    "href": "docstrings/src/boundary.html#medyan.boundary_capsule-1700142f310bd9db",
    "title": "src/boundary.jl",
    "section": "",
    "text": "boundary_capsule(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a capsule boundary.\ncenter(nm): The center of the capsule.\naxis(nm): The direction and length of the capsule spine. The spine line segment goes from center - axis/2 to center + axis/2 If zero the capsule is a sphere.\nradius(nm): Radius of capsule, the full length of the capsule is norm(axis) + 2radius.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/src/boundary.html#medyan.boundary_cylinder-33a45da15f9672d3",
    "href": "docstrings/src/boundary.html#medyan.boundary_cylinder-33a45da15f9672d3",
    "title": "src/boundary.jl",
    "section": "",
    "text": "boundary_cylinder(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a cylinder boundary.\ncenter(nm): The center of the cylinder.\naxis(nm): The direction and length of the cylinder. The spine line segment goes from center - axis/2 to center + axis/2 the full length of the cylinder is norm(axis).\nradius(nm): Radius of cylinder.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/src/minimize_energy.html",
    "href": "docstrings/src/minimize_energy.html",
    "title": "src/minimize_energy.jl",
    "section": "",
    "text": "Force (re-)evaluation of the objective value at x. Returns f(x) and stores the value in obj.F also calculates the gradient and stores it in obj.DF\n\n\n\n\n\n\n\n\n\n\n\n\nminimize_energy!(c::Context)::MinimizeEnergyResults\nMinimize mechanical energy of the context.\n\n\n\ncheck_closest_cylinders::Bool=true:\n\nIf true, the function will warn if two cylinders get too close during minimization.\n\nbrownian_motion_time::Float64=Inf: This parameter is used to simulate the effect\n\nof Brownian motion over a certain period of time in seconds. It is currently experimental. By default, the effect of Brownian motion is ignored.\n\ng_tol::Union{Float64, Nothing}=nothing: Overshadow the value of g_tol in c\n\nThis represents the acceptable maximum residual force on any degree of freedom in pN."
  },
  {
    "objectID": "docstrings/src/minimize_energy.html#nlsolversbase.value---d4fdd3b317023c0e",
    "href": "docstrings/src/minimize_energy.html#nlsolversbase.value---d4fdd3b317023c0e",
    "title": "src/minimize_energy.jl",
    "section": "",
    "text": "Force (re-)evaluation of the objective value at x. Returns f(x) and stores the value in obj.F also calculates the gradient and stores it in obj.DF"
  },
  {
    "objectID": "docstrings/src/minimize_energy.html#medyan.minimize_energy--84c4aeab5457d3ee",
    "href": "docstrings/src/minimize_energy.html#medyan.minimize_energy--84c4aeab5457d3ee",
    "title": "src/minimize_energy.jl",
    "section": "",
    "text": "minimize_energy!(c::Context)::MinimizeEnergyResults\nMinimize mechanical energy of the context.\n\n\n\ncheck_closest_cylinders::Bool=true:\n\nIf true, the function will warn if two cylinders get too close during minimization.\n\nbrownian_motion_time::Float64=Inf: This parameter is used to simulate the effect\n\nof Brownian motion over a certain period of time in seconds. It is currently experimental. By default, the effect of Brownian motion is ignored.\n\ng_tol::Union{Float64, Nothing}=nothing: Overshadow the value of g_tol in c\n\nThis represents the acceptable maximum residual force on any degree of freedom in pN."
  },
  {
    "objectID": "docstrings/medyan.link_2mon_state-6d59dcd98ed7e303.html",
    "href": "docstrings/medyan.link_2mon_state-6d59dcd98ed7e303.html",
    "title": "MEDYAN.link_2mon_state",
    "section": "",
    "text": "link_2mon_state(\n    c::MEDYAN.Context,\n    ltid,\n    lid\n) -&gt; MEDYAN.Link2MonState\nReturn the Link2MonState of the link with type id ltid, and link id lid"
  },
  {
    "objectID": "docstrings/medyan.link_2mon_state-6d59dcd98ed7e303.html#tuple-medyan.context--any--any--0ecbb5ec6f703ddd",
    "href": "docstrings/medyan.link_2mon_state-6d59dcd98ed7e303.html#tuple-medyan.context--any--any--0ecbb5ec6f703ddd",
    "title": "MEDYAN.link_2mon_state",
    "section": "",
    "text": "link_2mon_state(\n    c::MEDYAN.Context,\n    ltid,\n    lid\n) -&gt; MEDYAN.Link2MonState\nReturn the Link2MonState of the link with type id ltid, and link id lid"
  },
  {
    "objectID": "docstrings/medyan.link2monsitemotorstall-deb10f7964d5bef9.html",
    "href": "docstrings/medyan.link2monsitemotorstall-deb10f7964d5bef9.html",
    "title": "MEDYAN.Link2MonSiteMotorStall",
    "section": "",
    "text": "Models myosin walking rates from the results of Erdmann et al. 2013. The parallel cluster model.\nAs the motor work per step increases, its walking rate goes to zero.\nReturns the walking rate of one end. The callback can then sample which end to move, or reject the move.\n\nfs::Float64: The stall force magnitude. Units of pN\nk0::Float64: Walking rate of one end at zero force. Units of 1/s\nα::Float64: Positive dimensionless parameter defining the steepness of the curve, smaller is more steep, if α is inf, the curve is linear\nwalking_direction::Int32: Motor walking direction, +1 is towards plus end, -1 is towards minus end\nisminusend::Bool: which motor end does this represent"
  },
  {
    "objectID": "docstrings/medyan.link2monsitemotorstall-deb10f7964d5bef9.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.link2monsitemotorstall-deb10f7964d5bef9.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Link2MonSiteMotorStall",
    "section": "",
    "text": "Models myosin walking rates from the results of Erdmann et al. 2013. The parallel cluster model.\nAs the motor work per step increases, its walking rate goes to zero.\nReturns the walking rate of one end. The callback can then sample which end to move, or reject the move.\n\nfs::Float64: The stall force magnitude. Units of pN\nk0::Float64: Walking rate of one end at zero force. Units of 1/s\nα::Float64: Positive dimensionless parameter defining the steepness of the curve, smaller is more steep, if α is inf, the curve is linear\nwalking_direction::Int32: Motor walking direction, +1 is towards plus end, -1 is towards minus end\nisminusend::Bool: which motor end does this represent"
  },
  {
    "objectID": "docstrings/medyan.add_filament_params--74c7d0081157ca31.html",
    "href": "docstrings/medyan.add_filament_params--74c7d0081157ca31.html",
    "title": "MEDYAN.add_filament_params!",
    "section": "",
    "text": "add_filament_params!(s::SysDef, filament_name::Symbol, filament_params::FilamentMechParams)\nAdd the filament parameters to the system. Return s.\nSee MEDYAN.FilamentMechParams"
  },
  {
    "objectID": "docstrings/medyan.add_filament_params--74c7d0081157ca31.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "href": "docstrings/medyan.add_filament_params--74c7d0081157ca31.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "title": "MEDYAN.add_filament_params!",
    "section": "",
    "text": "add_filament_params!(s::SysDef, filament_name::Symbol, filament_params::FilamentMechParams)\nAdd the filament parameters to the system. Return s.\nSee MEDYAN.FilamentMechParams"
  },
  {
    "objectID": "docstrings/medyan.filter_grididat-58a94154d21e32b0.html",
    "href": "docstrings/medyan.filter_grididat-58a94154d21e32b0.html",
    "title": "MEDYAN.filter_grididat",
    "section": "",
    "text": "filter_grididat(f, grid::CubicGrid, location)\nReturn the nearest grid id of location where f(id) evaluates to true. The origin is in the center. errors if there is no id that evaluates to true. Returns a close by voxel if out of the grid."
  },
  {
    "objectID": "docstrings/medyan.filter_grididat-58a94154d21e32b0.html#tuple-any--medyan.cubicgrid--any--68d3cc6d4c523833",
    "href": "docstrings/medyan.filter_grididat-58a94154d21e32b0.html#tuple-any--medyan.cubicgrid--any--68d3cc6d4c523833",
    "title": "MEDYAN.filter_grididat",
    "section": "",
    "text": "filter_grididat(f, grid::CubicGrid, location)\nReturn the nearest grid id of location where f(id) evaluates to true. The origin is in the center. errors if there is no id that evaluates to true. Returns a close by voxel if out of the grid."
  },
  {
    "objectID": "docstrings/base.push--8715d52e2302aaeb.html",
    "href": "docstrings/base.push--8715d52e2302aaeb.html",
    "title": "Base.push!",
    "section": "",
    "text": "Add a new index. Returns its ID."
  },
  {
    "objectID": "docstrings/base.push--8715d52e2302aaeb.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "href": "docstrings/base.push--8715d52e2302aaeb.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "title": "Base.push!",
    "section": "",
    "text": "Add a new index. Returns its ID."
  },
  {
    "objectID": "docstrings/medyan.addmembranesite--892875b2c079002d.html",
    "href": "docstrings/medyan.addmembranesite--892875b2c079002d.html",
    "title": "MEDYAN.addmembranesite!",
    "section": "",
    "text": "addmembranesite!(\n    s::MEDYAN.SysDef,\n    membranesitename::Symbol,\n    site\n) -&gt; MEDYAN.SysDef\nAdd a new site with a specified name. During this process, a new fixed species is created suffixed with “membranesite.”."
  },
  {
    "objectID": "docstrings/medyan.addmembranesite--892875b2c079002d.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "href": "docstrings/medyan.addmembranesite--892875b2c079002d.html#tuple-medyan.sysdef--symbol--any--444c61f2a1ac78e1",
    "title": "MEDYAN.addmembranesite!",
    "section": "",
    "text": "addmembranesite!(\n    s::MEDYAN.SysDef,\n    membranesitename::Symbol,\n    site\n) -&gt; MEDYAN.SysDef\nAdd a new site with a specified name. During this process, a new fixed species is created suffixed with “membranesite.”."
  },
  {
    "objectID": "docstrings/medyan.decimated2monsiterange-8afd8f3188bbcd4a.html",
    "href": "docstrings/medyan.decimated2monsiterange-8afd8f3188bbcd4a.html",
    "title": "MEDYAN.Decimated2MonSiteRange",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64"
  },
  {
    "objectID": "docstrings/medyan.decimated2monsiterange-8afd8f3188bbcd4a.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.decimated2monsiterange-8afd8f3188bbcd4a.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Decimated2MonSiteRange",
    "section": "",
    "text": "Any pair within max to min range are linkable if they have matching state with minusstate and plusstate.\n\nminusftid::Int64\nplusftid::Int64\nminusskip::Int64\nplusskip::Int64\nminusstate::UInt8\nplusstate::UInt8\nminrange::Float64\nmaxrange::Float64"
  },
  {
    "objectID": "docstrings/medyan.addcadherin--3c757785fa097c75.html",
    "href": "docstrings/medyan.addcadherin--3c757785fa097c75.html",
    "title": "MEDYAN.addcadherin!",
    "section": "",
    "text": "addcadherin!(s::SysDef,cadherintypename::Symbol,defaultstate::CadherinState,mechparams). Add the cadherin to the system. Return s."
  },
  {
    "objectID": "docstrings/medyan.addcadherin--3c757785fa097c75.html#tuple-medyan.sysdef--symbol--medyan.cadherinstate--any--972f4abd0e18d399",
    "href": "docstrings/medyan.addcadherin--3c757785fa097c75.html#tuple-medyan.sysdef--symbol--medyan.cadherinstate--any--972f4abd0e18d399",
    "title": "MEDYAN.addcadherin!",
    "section": "",
    "text": "addcadherin!(s::SysDef,cadherintypename::Symbol,defaultstate::CadherinState,mechparams). Add the cadherin to the system. Return s."
  },
  {
    "objectID": "docstrings/medyan.addreaction--da9bd35e7d1df7c3.html",
    "href": "docstrings/medyan.addreaction--da9bd35e7d1df7c3.html",
    "title": "MEDYAN.addreaction!",
    "section": "",
    "text": "addreaction!(s::SysDef,reaction::CompartmentReaction)::SysDef\n\n\n\n\n\n\n\n\n\n\n\n\naddreaction!(s::SysDef,reactionexpr::AbstractString,rate::Float64,invvolumepower::Int)::SysDef\nAdd a reaction to the system. Return s\nreactionexpr is a string describing the reaction stoichiometry\nreactionexpr is comprised of reactant and product parts seperated by a \"--&gt;\"\nAll whitespace characters are ignored.\nEach side is then split by \"+\" to get the species names.\nRepeated or extra \"+\" are ignored.\nA species name can be prepended by a positive integer to represent multiple copies.\n\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s) rate constants correspond to stochastic rate constants in the sense used by Gillespie (J. Comp. Phys., 1976, 22 (4)).\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\"diffusing.a + diffusing.b --&gt; diffusing.c\"\n\"diffusing.c --&gt; diffusing.a + diffusing.b\"\n\"+ + diffusing.c + --&gt; + diffusing.a + + diffusing.b + +\"\n\" --&gt; diffusing.a + diffusing.b\"\n\"diffusing.a + diffusing.b --&gt; \"\n\"diffusing.a + diffusing.a --&gt; \"\n\"2diffusing.a --&gt; \"\n\"2diffusing.a --&gt; 20diffusing.a\"\n\"diffusing.c + diffusing.b --&gt; diffusing.c + diffusing.b\"\n\"fixedspecies.rate1b --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + 23fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.g --&gt; fixedspecies.rate1b + 23fixedspecies.g\"\n\"fixedspecies.g + fixedspecies.rate1b--&gt; 2fixedspecies.rate1b + 23fixedspecies.g\"\n\"filamentsite.MT.d --&gt; filamentsite.MT.d\"\n\"filamentsite.MT.d + diffusing.a --&gt; filamentsite.MT.d\"\n\"fixedspecies.g --&gt; diffusing.a\"\n\"diffusing.a --&gt; fixedspecies.g\"\n\"filamentsite.actin.pm + diffusing.a --&gt; filamentsite.actin.pm\""
  },
  {
    "objectID": "docstrings/medyan.addreaction--da9bd35e7d1df7c3.html#tuple-medyan.sysdef--medyan.compartmentreaction--028b8b53a1777d4b",
    "href": "docstrings/medyan.addreaction--da9bd35e7d1df7c3.html#tuple-medyan.sysdef--medyan.compartmentreaction--028b8b53a1777d4b",
    "title": "MEDYAN.addreaction!",
    "section": "",
    "text": "addreaction!(s::SysDef,reaction::CompartmentReaction)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.addreaction--da9bd35e7d1df7c3.html#tuple-medyan.sysdef--abstractstring--float64--int64--458efa379d290938",
    "href": "docstrings/medyan.addreaction--da9bd35e7d1df7c3.html#tuple-medyan.sysdef--abstractstring--float64--int64--458efa379d290938",
    "title": "MEDYAN.addreaction!",
    "section": "",
    "text": "addreaction!(s::SysDef,reactionexpr::AbstractString,rate::Float64,invvolumepower::Int)::SysDef\nAdd a reaction to the system. Return s\nreactionexpr is a string describing the reaction stoichiometry\nreactionexpr is comprised of reactant and product parts seperated by a \"--&gt;\"\nAll whitespace characters are ignored.\nEach side is then split by \"+\" to get the species names.\nRepeated or extra \"+\" are ignored.\nA species name can be prepended by a positive integer to represent multiple copies.\n\nrate::Float64: Base rate for the reaction. ((nm³)^(invvolumepower)/s) rate constants correspond to stochastic rate constants in the sense used by Gillespie (J. Comp. Phys., 1976, 22 (4)).\ninvvolumepower::Int: volumefactor= (1/volume)^invvolumepower where volume is the volume of the compartment in nm³. Generally this is 0 for reactions without another diffusing reactant, and 1 if there is another diffusing reactant.\n\n\n\n\"diffusing.a + diffusing.b --&gt; diffusing.c\"\n\"diffusing.c --&gt; diffusing.a + diffusing.b\"\n\"+ + diffusing.c + --&gt; + diffusing.a + + diffusing.b + +\"\n\" --&gt; diffusing.a + diffusing.b\"\n\"diffusing.a + diffusing.b --&gt; \"\n\"diffusing.a + diffusing.a --&gt; \"\n\"2diffusing.a --&gt; \"\n\"2diffusing.a --&gt; 20diffusing.a\"\n\"diffusing.c + diffusing.b --&gt; diffusing.c + diffusing.b\"\n\"fixedspecies.rate1b --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.rate1b + 23fixedspecies.g --&gt; fixedspecies.g\"\n\"fixedspecies.g --&gt; fixedspecies.rate1b + 23fixedspecies.g\"\n\"fixedspecies.g + fixedspecies.rate1b--&gt; 2fixedspecies.rate1b + 23fixedspecies.g\"\n\"filamentsite.MT.d --&gt; filamentsite.MT.d\"\n\"filamentsite.MT.d + diffusing.a --&gt; filamentsite.MT.d\"\n\"fixedspecies.g --&gt; diffusing.a\"\n\"diffusing.a --&gt; fixedspecies.g\"\n\"filamentsite.actin.pm + diffusing.a --&gt; filamentsite.actin.pm\""
  },
  {
    "objectID": "docstrings/medyan.link_2mon_endnames-5d0bca4b8e2e3509.html",
    "href": "docstrings/medyan.link_2mon_endnames-5d0bca4b8e2e3509.html",
    "title": "MEDYAN.link_2mon_endnames",
    "section": "",
    "text": "link_2mon_endnames(\n    c::MEDYAN.Context,\n    ltid,\n    lid\n) -&gt; Pair{MEDYAN.MonomerName, MEDYAN.MonomerName}\nReturn the minusend name =&gt; plusend name of the link with type id ltid, and link id lid"
  },
  {
    "objectID": "docstrings/medyan.link_2mon_endnames-5d0bca4b8e2e3509.html#tuple-medyan.context--any--any--0ecbb5ec6f703ddd",
    "href": "docstrings/medyan.link_2mon_endnames-5d0bca4b8e2e3509.html#tuple-medyan.context--any--any--0ecbb5ec6f703ddd",
    "title": "MEDYAN.link_2mon_endnames",
    "section": "",
    "text": "link_2mon_endnames(\n    c::MEDYAN.Context,\n    ltid,\n    lid\n) -&gt; Pair{MEDYAN.MonomerName, MEDYAN.MonomerName}\nReturn the minusend name =&gt; plusend name of the link with type id ltid, and link id lid"
  },
  {
    "objectID": "docstrings/medyan.context-736368ed32b08894.html",
    "href": "docstrings/medyan.context-736368ed32b08894.html",
    "title": "MEDYAN.Context",
    "section": "",
    "text": "Context(sys_def::SysDef, grid::CubicGrid; kwargs...)\n\nagent_names::MEDYAN.AgentNames\nsys_def::MEDYAN.SysDef\ncompartments::Vector{MEDYAN.Compartment}\ngrid::Any\ntime::Ref{Float64}: time (s)\nstats::MEDYAN.PerformanceStats\nβ::Float64: inverse kT (1/(nm*pN))\nbase_diffusion_coeffs::Vector{Float64}: Diffusion coefficients indexed by diffusing species id (nm²/s)\nmembrane_species_params::StaticArraysCore.SVector{NUM_MEMBRANEDIFFUSINGSPECIES, MEDYAN.MembraneSpeciesParams} where NUM_MEMBRANEDIFFUSINGSPECIES: Membrane species parameters indexed by membrane diffusing species id.\nmin_compartment_volume_ratio::Float64: Smallest volume a compartment can have before being deactivated as a ratio to a full compartment volume.\nchemistryengine::MEDYAN.RDMESampler: The reaction diffusion master equation sampler, contains the diffusing and regular fixed species state\nlargestfilamentid::Vector{Int64}: The largest filament id, indexed by filament type id\nchem_cylinders::Vector{MEDYAN.ChemCylinders}: Data about filament cylinders, indexed by filament type id\nmembranes::Vector: All membrane meshes.\nlink_2mon_data::Tuple{Vararg{MEDYAN.Link2MonData}}: The linked link2mon parameters, indexed by link2mon type id, to give a Link2MonData\ndecimated_2mon_site_managers::Tuple{Vararg{MEDYAN.AbstractDecimated2MonSiteManager}}: Site managers, indexed by site id\nlinked_monomers::Dictionaries.Dictionary{MEDYAN.MonomerName, Vector{Vector{Int64}}}: Dictionary of all monomers that have a bound link2mon. indexed by monomer name, then link2montypeid, to give a vector of unique link2mon ids that reference the monomer name\nfilamentsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filament site definitions, indexed by filament type id, filament site id to get a SiteData with fields of id, site, fxsid\nfilamentendsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filamentend site definitions, indexed by filament type id, filamentend site id to get a SiteData with fields of id, site, fxsid\nmaxfilsite_plusrange::Vector{Int64}: The maximum plus range in monomers that any filament site or end site can see. Indexed by filament type id\nmaxfilsite_minusrange::Vector{Int64}: The maximum minus range in monomers that any filament site or end site can see. Indexed by filament type id\nmembranesites::Tuple{Vararg{MEDYAN.SiteData}}: Maps membrane site id to a SiteData with fields of id, site, fxsid.\nmap_membranediffusingspeciesindex_membranesiteindices::Tuple{Vararg{Vector{Int64}}}: Maps membrane diffusing species index to a list of membrane sites using this species as reactant. This is initialized during context init and should not be changed.\nlink_2mon_sites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: Site definitions, indexed by link_2mon type id, site id to get a SiteData with fields of id, site, fxsid\nmon_link_2mon_sites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: Site definitions, indexed by link_2mon type id, site id to get a SiteData with fields of id, site, fxsid\nchem_max_search_dist::Float64\ndecimated_2mon_sites::Tuple{Vararg{MEDYAN.SiteData}}: Site definitions, indexed by site id to get a SiteData with fields of id, site, fxsid\ncadherinsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}\ncadherindata::Tuple{Vararg{MEDYAN.CadherinData}}\npossiblecadherinsite_managers::Tuple{Vararg{MEDYAN.AbstractPossibleCadherinSiteManager}}: Site managers, indexed by site id\ncadherinlinked_vertices::Dictionaries.Dictionary{MEDYAN.VertexName, Vector{Vector{Pair{MEDYAN.VertexName, MEDYAN.MonomerName}}}}: Dictionary of all vertices that have a bound cadherin. indexed by vertex name, then cadherintypeid, to give a vector of unique cadherin endnames that reference the monomer name and vertex name\ncheck_sitecount_error::Bool: If true site counts are checked for errors on every chem update. This is extremely slow, but useful for testing chem update errors.\ncompartmentreactioncallbacks::Any\nbulkreactioncallbacks::Any\nmemdiff_bulks_index::Int64: Mock bulk species index for membrane diffusion.\nviscosity::Float64: viscosity (pNs/nm² or MPas) water is about 1E-9\ng_tol::Float64: maximum force magnitude after minimization (pN)\nshake_before_minimization::Bool: If true, add noise to coordinates before starting minimization.\niter_max_cg_minimization::Int64: Max number of steps in conjugate gradient minimization.\nmaxstep::Float64: max step to take during line search (nm)\nmax_cylinder_force::Float64: max cylinder force when two cylinders are at zero distance (pN)\ncheck_neighborlist_error::Bool: If true neighborlists are checked for errors on every force calc. This is extremely slow, but useful for testing neighborlist errors.\nnthreads::Int64: Experimental Set to more than 1 to enable multi threading. This is currently may result in non bitwise reproducable simulations. Results should be statistcally identical, but this is currently not well tested.\nenable_cylinder_volume_exclusion::Ref{Bool}: Are cylinder volume exclusion forces calculated\nenable_triangle_bead_volume_exclusion::Bool: Are triangle-bead volume exclusion forces calculated.\ncylinder_skin_radius::Float64: Extra cell list cutoff radius in nm. The cell lists are reset after a bead moves over this amount\nfilamentmechparams::Vector{MEDYAN.FilamentMechParams}: The filament mechanical parameters, indexed by filament type id\nmembranemechparams::Vector{MEDYAN.MembraneMechParams}: Membrane mechanical parameters, indexed by membrane type id.\nfunc_membranespeciespotentialenergy::Any: Membrane species potential energy function. See docs on default function for more info.\nmembranefilamentmechparams::MEDYAN.MembraneFilamentMechParams: Membrane-filament mechanical interaction parameters.\nexternal_energy_forces!::Any: External energy/force expressions. This should be a mutating function taking a (fc::MEDYAN.ForceContext), which adds to fc.forces, fc.energies, and fc.energy. The energy and force must be consistent, and this is not checked. This can be used as ad-hoc solutions to experiment with uncommon forces, such as specifically designed attachments, etc. If this variable is used often, consider moving it into MEDYAN.\nchemboundary::MEDYAN.Boundary: chemical boundary, updates compartment volumes and diffusion rates\nmeshindex_as_chemboundary::Ref{Int64}: The membrane index used as chemical boundary. If values other than 0 is used, the actual interior region of the chemical boundary is the intersection between\n\nthe interior of chemboundary, and\nthe interior of the membrane mesh at this index.\n\nNote: Since the membrane may change its shape often, set_chemboundary! might need to be called often accordingly to update volumes of compartments.\nmechboundary::MEDYAN.Boundary: mechanical boundary\nsharedtypedconfigs::MEDYAN.SharedTypedConfigs: Shared configurations stored in type parameters.\nvalidflags::MEDYAN.ValidFlags: Interval system consistency validation flags.\nfila_tip_tags::MEDYAN.TagManager{MEDYAN.FilaTipIdx}: Filament tip tags"
  },
  {
    "objectID": "docstrings/medyan.context-736368ed32b08894.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.context-736368ed32b08894.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.Context",
    "section": "",
    "text": "Context(sys_def::SysDef, grid::CubicGrid; kwargs...)\n\nagent_names::MEDYAN.AgentNames\nsys_def::MEDYAN.SysDef\ncompartments::Vector{MEDYAN.Compartment}\ngrid::Any\ntime::Ref{Float64}: time (s)\nstats::MEDYAN.PerformanceStats\nβ::Float64: inverse kT (1/(nm*pN))\nbase_diffusion_coeffs::Vector{Float64}: Diffusion coefficients indexed by diffusing species id (nm²/s)\nmembrane_species_params::StaticArraysCore.SVector{NUM_MEMBRANEDIFFUSINGSPECIES, MEDYAN.MembraneSpeciesParams} where NUM_MEMBRANEDIFFUSINGSPECIES: Membrane species parameters indexed by membrane diffusing species id.\nmin_compartment_volume_ratio::Float64: Smallest volume a compartment can have before being deactivated as a ratio to a full compartment volume.\nchemistryengine::MEDYAN.RDMESampler: The reaction diffusion master equation sampler, contains the diffusing and regular fixed species state\nlargestfilamentid::Vector{Int64}: The largest filament id, indexed by filament type id\nchem_cylinders::Vector{MEDYAN.ChemCylinders}: Data about filament cylinders, indexed by filament type id\nmembranes::Vector: All membrane meshes.\nlink_2mon_data::Tuple{Vararg{MEDYAN.Link2MonData}}: The linked link2mon parameters, indexed by link2mon type id, to give a Link2MonData\ndecimated_2mon_site_managers::Tuple{Vararg{MEDYAN.AbstractDecimated2MonSiteManager}}: Site managers, indexed by site id\nlinked_monomers::Dictionaries.Dictionary{MEDYAN.MonomerName, Vector{Vector{Int64}}}: Dictionary of all monomers that have a bound link2mon. indexed by monomer name, then link2montypeid, to give a vector of unique link2mon ids that reference the monomer name\nfilamentsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filament site definitions, indexed by filament type id, filament site id to get a SiteData with fields of id, site, fxsid\nfilamentendsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: The filamentend site definitions, indexed by filament type id, filamentend site id to get a SiteData with fields of id, site, fxsid\nmaxfilsite_plusrange::Vector{Int64}: The maximum plus range in monomers that any filament site or end site can see. Indexed by filament type id\nmaxfilsite_minusrange::Vector{Int64}: The maximum minus range in monomers that any filament site or end site can see. Indexed by filament type id\nmembranesites::Tuple{Vararg{MEDYAN.SiteData}}: Maps membrane site id to a SiteData with fields of id, site, fxsid.\nmap_membranediffusingspeciesindex_membranesiteindices::Tuple{Vararg{Vector{Int64}}}: Maps membrane diffusing species index to a list of membrane sites using this species as reactant. This is initialized during context init and should not be changed.\nlink_2mon_sites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: Site definitions, indexed by link_2mon type id, site id to get a SiteData with fields of id, site, fxsid\nmon_link_2mon_sites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}: Site definitions, indexed by link_2mon type id, site id to get a SiteData with fields of id, site, fxsid\nchem_max_search_dist::Float64\ndecimated_2mon_sites::Tuple{Vararg{MEDYAN.SiteData}}: Site definitions, indexed by site id to get a SiteData with fields of id, site, fxsid\ncadherinsites::Tuple{Vararg{Tuple{Vararg{MEDYAN.SiteData}}}}\ncadherindata::Tuple{Vararg{MEDYAN.CadherinData}}\npossiblecadherinsite_managers::Tuple{Vararg{MEDYAN.AbstractPossibleCadherinSiteManager}}: Site managers, indexed by site id\ncadherinlinked_vertices::Dictionaries.Dictionary{MEDYAN.VertexName, Vector{Vector{Pair{MEDYAN.VertexName, MEDYAN.MonomerName}}}}: Dictionary of all vertices that have a bound cadherin. indexed by vertex name, then cadherintypeid, to give a vector of unique cadherin endnames that reference the monomer name and vertex name\ncheck_sitecount_error::Bool: If true site counts are checked for errors on every chem update. This is extremely slow, but useful for testing chem update errors.\ncompartmentreactioncallbacks::Any\nbulkreactioncallbacks::Any\nmemdiff_bulks_index::Int64: Mock bulk species index for membrane diffusion.\nviscosity::Float64: viscosity (pNs/nm² or MPas) water is about 1E-9\ng_tol::Float64: maximum force magnitude after minimization (pN)\nshake_before_minimization::Bool: If true, add noise to coordinates before starting minimization.\niter_max_cg_minimization::Int64: Max number of steps in conjugate gradient minimization.\nmaxstep::Float64: max step to take during line search (nm)\nmax_cylinder_force::Float64: max cylinder force when two cylinders are at zero distance (pN)\ncheck_neighborlist_error::Bool: If true neighborlists are checked for errors on every force calc. This is extremely slow, but useful for testing neighborlist errors.\nnthreads::Int64: Experimental Set to more than 1 to enable multi threading. This is currently may result in non bitwise reproducable simulations. Results should be statistcally identical, but this is currently not well tested.\nenable_cylinder_volume_exclusion::Ref{Bool}: Are cylinder volume exclusion forces calculated\nenable_triangle_bead_volume_exclusion::Bool: Are triangle-bead volume exclusion forces calculated.\ncylinder_skin_radius::Float64: Extra cell list cutoff radius in nm. The cell lists are reset after a bead moves over this amount\nfilamentmechparams::Vector{MEDYAN.FilamentMechParams}: The filament mechanical parameters, indexed by filament type id\nmembranemechparams::Vector{MEDYAN.MembraneMechParams}: Membrane mechanical parameters, indexed by membrane type id.\nfunc_membranespeciespotentialenergy::Any: Membrane species potential energy function. See docs on default function for more info.\nmembranefilamentmechparams::MEDYAN.MembraneFilamentMechParams: Membrane-filament mechanical interaction parameters.\nexternal_energy_forces!::Any: External energy/force expressions. This should be a mutating function taking a (fc::MEDYAN.ForceContext), which adds to fc.forces, fc.energies, and fc.energy. The energy and force must be consistent, and this is not checked. This can be used as ad-hoc solutions to experiment with uncommon forces, such as specifically designed attachments, etc. If this variable is used often, consider moving it into MEDYAN.\nchemboundary::MEDYAN.Boundary: chemical boundary, updates compartment volumes and diffusion rates\nmeshindex_as_chemboundary::Ref{Int64}: The membrane index used as chemical boundary. If values other than 0 is used, the actual interior region of the chemical boundary is the intersection between\n\nthe interior of chemboundary, and\nthe interior of the membrane mesh at this index.\n\nNote: Since the membrane may change its shape often, set_chemboundary! might need to be called often accordingly to update volumes of compartments.\nmechboundary::MEDYAN.Boundary: mechanical boundary\nsharedtypedconfigs::MEDYAN.SharedTypedConfigs: Shared configurations stored in type parameters.\nvalidflags::MEDYAN.ValidFlags: Interval system consistency validation flags.\nfila_tip_tags::MEDYAN.TagManager{MEDYAN.FilaTipIdx}: Filament tip tags"
  },
  {
    "objectID": "docstrings/medyan.filtype_fil_ids-d333c38b9f9b3584.html",
    "href": "docstrings/medyan.filtype_fil_ids-d333c38b9f9b3584.html",
    "title": "MEDYAN.filtype_fil_ids",
    "section": "",
    "text": "filtype_fil_ids(\n    c::MEDYAN.Context,\n    ftid::Int64\n) -&gt; Vector{Int64}\nReturn a read only iterable of all filament ids of filament type ftid.\nThis can be invalid after any mutations to context, so collect if needed."
  },
  {
    "objectID": "docstrings/medyan.filtype_fil_ids-d333c38b9f9b3584.html#tuple-medyan.context--int64--86f0854b67893706",
    "href": "docstrings/medyan.filtype_fil_ids-d333c38b9f9b3584.html#tuple-medyan.context--int64--86f0854b67893706",
    "title": "MEDYAN.filtype_fil_ids",
    "section": "",
    "text": "filtype_fil_ids(\n    c::MEDYAN.Context,\n    ftid::Int64\n) -&gt; Vector{Int64}\nReturn a read only iterable of all filament ids of filament type ftid.\nThis can be invalid after any mutations to context, so collect if needed."
  },
  {
    "objectID": "docstrings/medyan.cadherinstate-0cd5353e58a90ec2.html",
    "href": "docstrings/medyan.cadherinstate-0cd5353e58a90ec2.html",
    "title": "MEDYAN.CadherinState",
    "section": "",
    "text": "There is one instance of this per cadherin.\n\nchemstate::NamedTuple: Other state.\nmechstate::NamedTuple: Used in link_2mon force calculation.\nis_minimized::Bool: Set to true after minimization"
  },
  {
    "objectID": "docstrings/medyan.cadherinstate-0cd5353e58a90ec2.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.cadherinstate-0cd5353e58a90ec2.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.CadherinState",
    "section": "",
    "text": "There is one instance of this per cadherin.\n\nchemstate::NamedTuple: Other state.\nmechstate::NamedTuple: Used in link_2mon force calculation.\nis_minimized::Bool: Set to true after minimization"
  },
  {
    "objectID": "docstrings/base.delete--56ef520341df3c06.html",
    "href": "docstrings/base.delete--56ef520341df3c06.html",
    "title": "Base.delete!",
    "section": "",
    "text": "Remove a recorded index at ID."
  },
  {
    "objectID": "docstrings/base.delete--56ef520341df3c06.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "href": "docstrings/base.delete--56ef520341df3c06.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "title": "Base.delete!",
    "section": "",
    "text": "Remove a recorded index at ID."
  },
  {
    "objectID": "docstrings/medyan.boundary_capsule-1700142f310bd9db.html",
    "href": "docstrings/medyan.boundary_capsule-1700142f310bd9db.html",
    "title": "MEDYAN.boundary_capsule",
    "section": "",
    "text": "boundary_capsule(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a capsule boundary.\ncenter(nm): The center of the capsule.\naxis(nm): The direction and length of the capsule spine. The spine line segment goes from center - axis/2 to center + axis/2 If zero the capsule is a sphere.\nradius(nm): Radius of capsule, the full length of the capsule is norm(axis) + 2radius.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.boundary_capsule-1700142f310bd9db.html#tuple---3937a4f1811c9dc1",
    "href": "docstrings/medyan.boundary_capsule-1700142f310bd9db.html#tuple---3937a4f1811c9dc1",
    "title": "MEDYAN.boundary_capsule",
    "section": "",
    "text": "boundary_capsule(\n;\n    center,\n    axis,\n    radius,\n    stiffness\n) -&gt; MEDYAN.Boundary\nReturn a capsule boundary.\ncenter(nm): The center of the capsule.\naxis(nm): The direction and length of the capsule spine. The spine line segment goes from center - axis/2 to center + axis/2 If zero the capsule is a sphere.\nradius(nm): Radius of capsule, the full length of the capsule is norm(axis) + 2radius.\nstiffness(pN/nm): How strong the boundary is."
  },
  {
    "objectID": "docstrings/medyan.filamentendsitegeneral-7a32ac96fb4364ea.html",
    "href": "docstrings/medyan.filamentendsitegeneral-7a32ac96fb4364ea.html",
    "title": "MEDYAN.FilamentEndSiteGeneral",
    "section": "",
    "text": "Filament end site that matches with a vector of monomer states.\n\nisminusend::Bool\nendstates::Vector{UInt8}\nspacing::Float64\nadded_monomers::Int64"
  },
  {
    "objectID": "docstrings/medyan.filamentendsitegeneral-7a32ac96fb4364ea.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.filamentendsitegeneral-7a32ac96fb4364ea.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.FilamentEndSiteGeneral",
    "section": "",
    "text": "Filament end site that matches with a vector of monomer states.\n\nisminusend::Bool\nendstates::Vector{UInt8}\nspacing::Float64\nadded_monomers::Int64"
  },
  {
    "objectID": "docstrings/base.getindex-f593dde852851bc8.html",
    "href": "docstrings/base.getindex-f593dde852851bc8.html",
    "title": "Base.getindex",
    "section": "",
    "text": "Get index at ID."
  },
  {
    "objectID": "docstrings/base.getindex-f593dde852851bc8.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "href": "docstrings/base.getindex-f593dde852851bc8.html#tuple-medyan.stableindex--integer--14e9a5b3c446a8fc",
    "title": "Base.getindex",
    "section": "",
    "text": "Get index at ID."
  },
  {
    "objectID": "docstrings/medyan.vertex_state-aa3350c08b68b63a.html",
    "href": "docstrings/medyan.vertex_state-aa3350c08b68b63a.html",
    "title": "MEDYAN.vertex_state",
    "section": "",
    "text": "vertex_state(\n    c::MEDYAN.Context,\n    vertexname::MEDYAN.VertexName\n) -&gt; UInt8\nReturn the vertex state on a membrane."
  },
  {
    "objectID": "docstrings/medyan.vertex_state-aa3350c08b68b63a.html#tuple-medyan.context--medyan.vertexname--4f0d281e8576f34d",
    "href": "docstrings/medyan.vertex_state-aa3350c08b68b63a.html#tuple-medyan.context--medyan.vertexname--4f0d281e8576f34d",
    "title": "MEDYAN.vertex_state",
    "section": "",
    "text": "vertex_state(\n    c::MEDYAN.Context,\n    vertexname::MEDYAN.VertexName\n) -&gt; UInt8\nReturn the vertex state on a membrane."
  },
  {
    "objectID": "docstrings/medyan.resolve_all_filament_mesh_crossing--a8be83a7d2ad65c7.html",
    "href": "docstrings/medyan.resolve_all_filament_mesh_crossing--a8be83a7d2ad65c7.html",
    "title": "MEDYAN.resolve_all_filament_mesh_crossing!",
    "section": "",
    "text": "Given an AABB tree corresponding to up-to-date membrane mesh triangles, resolve all filament-membrane intersections.\nRequires\n\nup-to-date unit normals of all triangles in the meshes.\nup-to-date AABB tree corresponding to all membrane meshes."
  },
  {
    "objectID": "docstrings/medyan.resolve_all_filament_mesh_crossing--a8be83a7d2ad65c7.html#tuple-medyan.context--medyan.binaryaabbtree--169a754d8e383ec5",
    "href": "docstrings/medyan.resolve_all_filament_mesh_crossing--a8be83a7d2ad65c7.html#tuple-medyan.context--medyan.binaryaabbtree--169a754d8e383ec5",
    "title": "MEDYAN.resolve_all_filament_mesh_crossing!",
    "section": "",
    "text": "Given an AABB tree corresponding to up-to-date membrane mesh triangles, resolve all filament-membrane intersections.\nRequires\n\nup-to-date unit normals of all triangles in the meshes.\nup-to-date AABB tree corresponding to all membrane meshes."
  },
  {
    "objectID": "docstrings/medyan.mon_position_plusvector-927d0affbbdfef6f.html",
    "href": "docstrings/medyan.mon_position_plusvector-927d0affbbdfef6f.html",
    "title": "MEDYAN.mon_position_plusvector",
    "section": "",
    "text": "mon_position_plusvector(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Tuple{StaticArraysCore.SVector{3, Float64}, StaticArraysCore.SVector{3, Float64}}\nReturn a tuple of position and plusvector at a monomer."
  },
  {
    "objectID": "docstrings/medyan.mon_position_plusvector-927d0affbbdfef6f.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "href": "docstrings/medyan.mon_position_plusvector-927d0affbbdfef6f.html#tuple-medyan.context--medyan.monomername--ebde317b37bce68d",
    "title": "MEDYAN.mon_position_plusvector",
    "section": "",
    "text": "mon_position_plusvector(\n    c::MEDYAN.Context,\n    monomer::MEDYAN.MonomerName\n) -&gt; Tuple{StaticArraysCore.SVector{3, Float64}, StaticArraysCore.SVector{3, Float64}}\nReturn a tuple of position and plusvector at a monomer."
  },
  {
    "objectID": "docstrings/nlsolversbase.value---d4fdd3b317023c0e.html",
    "href": "docstrings/nlsolversbase.value---d4fdd3b317023c0e.html",
    "title": "NLSolversBase.value!!",
    "section": "",
    "text": "Force (re-)evaluation of the objective value at x. Returns f(x) and stores the value in obj.F also calculates the gradient and stores it in obj.DF"
  },
  {
    "objectID": "docstrings/nlsolversbase.value---d4fdd3b317023c0e.html#tuple-medyan.alwayscalcgrad--any--ff589defbddb5326",
    "href": "docstrings/nlsolversbase.value---d4fdd3b317023c0e.html#tuple-medyan.alwayscalcgrad--any--ff589defbddb5326",
    "title": "NLSolversBase.value!!",
    "section": "",
    "text": "Force (re-)evaluation of the objective value at x. Returns f(x) and stores the value in obj.F also calculates the gradient and stores it in obj.DF"
  },
  {
    "objectID": "docstrings/medyan.is_chem_cache_valid-8336a8adc58a252f.html",
    "href": "docstrings/medyan.is_chem_cache_valid-8336a8adc58a252f.html",
    "title": "MEDYAN.is_chem_cache_valid",
    "section": "",
    "text": "is_chem_cache_valid(c::Context)::Bool\nReturn true if the chemistry cache is valid, false otherwise."
  },
  {
    "objectID": "docstrings/medyan.is_chem_cache_valid-8336a8adc58a252f.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.is_chem_cache_valid-8336a8adc58a252f.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.is_chem_cache_valid",
    "section": "",
    "text": "is_chem_cache_valid(c::Context)::Bool\nReturn true if the chemistry cache is valid, false otherwise."
  },
  {
    "objectID": "docstrings/medyan.sysdef-c0c4da7a2b3d4fef.html",
    "href": "docstrings/medyan.sysdef-c0c4da7a2b3d4fef.html",
    "title": "MEDYAN.SysDef",
    "section": "",
    "text": "SysDef(agent_names::AgentNames)\nA mutable struct mapping names to id numbers in a simulation\n\nagent_names::MEDYAN.AgentNames\ndiffusing::MEDYAN.PropDictionary\ndiffusing_coeff::MEDYAN.PropDictionary\nbulkspecies_indexmap::MEDYAN.PropDictionary\nmembranediffusing::MEDYAN.PropDictionary\nfixedspecies::MEDYAN.PropDictionary\nfilament::MEDYAN.PropDictionary\nfilament_params::MEDYAN.PropDictionary\nvertex::MEDYAN.PropDictionary\nstate::MEDYAN.PropDictionary\nlink_2mon::MEDYAN.PropDictionary\nlink_2mon_params::MEDYAN.PropDictionary\ncadherin::MEDYAN.PropDictionary\ncadherinparams::MEDYAN.PropDictionary\nfilamentsite::MEDYAN.PropDictionary\nfilamentendsite::MEDYAN.PropDictionary\nmembranesite::MEDYAN.PropDictionary: Each membrane site represents the membrane patches in each compartment together with some membrane diffusing species.\nlink_2mon_site::MEDYAN.PropDictionary\nmon_link_2mon_site::MEDYAN.PropDictionary\ndecimated_2mon_site::MEDYAN.PropDictionary\ncadherinsite::MEDYAN.PropDictionary\npossiblecadherinsite::MEDYAN.PropDictionary\nallfixedspeciesnames::Vector{String}\ncompartmentreactions::Vector{MEDYAN.CompartmentReaction}\ncompartmentreactioncallbacks::Vector{Any}\nbulkreactions::Vector{MEDYAN.BulkReaction}\nbulkreactioncallbacks::Vector{Any}: Context -&gt; Nothing"
  },
  {
    "objectID": "docstrings/medyan.sysdef-c0c4da7a2b3d4fef.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.sysdef-c0c4da7a2b3d4fef.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.SysDef",
    "section": "",
    "text": "SysDef(agent_names::AgentNames)\nA mutable struct mapping names to id numbers in a simulation\n\nagent_names::MEDYAN.AgentNames\ndiffusing::MEDYAN.PropDictionary\ndiffusing_coeff::MEDYAN.PropDictionary\nbulkspecies_indexmap::MEDYAN.PropDictionary\nmembranediffusing::MEDYAN.PropDictionary\nfixedspecies::MEDYAN.PropDictionary\nfilament::MEDYAN.PropDictionary\nfilament_params::MEDYAN.PropDictionary\nvertex::MEDYAN.PropDictionary\nstate::MEDYAN.PropDictionary\nlink_2mon::MEDYAN.PropDictionary\nlink_2mon_params::MEDYAN.PropDictionary\ncadherin::MEDYAN.PropDictionary\ncadherinparams::MEDYAN.PropDictionary\nfilamentsite::MEDYAN.PropDictionary\nfilamentendsite::MEDYAN.PropDictionary\nmembranesite::MEDYAN.PropDictionary: Each membrane site represents the membrane patches in each compartment together with some membrane diffusing species.\nlink_2mon_site::MEDYAN.PropDictionary\nmon_link_2mon_site::MEDYAN.PropDictionary\ndecimated_2mon_site::MEDYAN.PropDictionary\ncadherinsite::MEDYAN.PropDictionary\npossiblecadherinsite::MEDYAN.PropDictionary\nallfixedspeciesnames::Vector{String}\ncompartmentreactions::Vector{MEDYAN.CompartmentReaction}\ncompartmentreactioncallbacks::Vector{Any}\nbulkreactions::Vector{MEDYAN.BulkReaction}\nbulkreactioncallbacks::Vector{Any}: Context -&gt; Nothing"
  },
  {
    "objectID": "docstrings/medyan.monlink2monsiteone-77707f45e082c27e.html",
    "href": "docstrings/medyan.monlink2monsiteone-77707f45e082c27e.html",
    "title": "MEDYAN.MonLink2MonSiteOne",
    "section": "",
    "text": "Always returns 1.0"
  },
  {
    "objectID": "docstrings/medyan.monlink2monsiteone-77707f45e082c27e.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.monlink2monsiteone-77707f45e082c27e.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.MonLink2MonSiteOne",
    "section": "",
    "text": "Always returns 1.0"
  },
  {
    "objectID": "docstrings/medyan.addcadherinsite--9e21ac42968d0196.html",
    "href": "docstrings/medyan.addcadherinsite--9e21ac42968d0196.html",
    "title": "MEDYAN.addcadherinsite!",
    "section": "",
    "text": "addcadherinsite!(s::SysDef,cadherintypename::Symbol,cadherinsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.addcadherinsite--9e21ac42968d0196.html#tuple-medyan.sysdef--symbol--symbol--any--b9a0ed342fa77751",
    "href": "docstrings/medyan.addcadherinsite--9e21ac42968d0196.html#tuple-medyan.sysdef--symbol--symbol--any--b9a0ed342fa77751",
    "title": "MEDYAN.addcadherinsite!",
    "section": "",
    "text": "addcadherinsite!(s::SysDef,cadherintypename::Symbol,cadherinsitename::Symbol,site)::SysDef"
  },
  {
    "objectID": "docstrings/medyan.monomername-bb517706cb60c4f5.html",
    "href": "docstrings/medyan.monomername-bb517706cb60c4f5.html",
    "title": "MEDYAN.MonomerName",
    "section": "",
    "text": "ftid::Int64: filament type id\nfid::Int64: filament id\nmid::Int64: monomer id"
  },
  {
    "objectID": "docstrings/medyan.monomername-bb517706cb60c4f5.html#union---b2cfd89fb0d1b9c6",
    "href": "docstrings/medyan.monomername-bb517706cb60c4f5.html#union---b2cfd89fb0d1b9c6",
    "title": "MEDYAN.MonomerName",
    "section": "",
    "text": "ftid::Int64: filament type id\nfid::Int64: filament id\nmid::Int64: monomer id"
  },
  {
    "objectID": "docstrings/medyan.num_vertexwithstate-3cf6fcd964588d37.html",
    "href": "docstrings/medyan.num_vertexwithstate-3cf6fcd964588d37.html",
    "title": "MEDYAN.num_vertexwithstate",
    "section": "",
    "text": "Return the number of vertices with state 2. Check the number of vertices with state 2. The number should be constant."
  },
  {
    "objectID": "docstrings/medyan.num_vertexwithstate-3cf6fcd964588d37.html#tuple-medyan.dynamichalfedgemesh--uint8--249d6d475bef2173",
    "href": "docstrings/medyan.num_vertexwithstate-3cf6fcd964588d37.html#tuple-medyan.dynamichalfedgemesh--uint8--249d6d475bef2173",
    "title": "MEDYAN.num_vertexwithstate",
    "section": "",
    "text": "Return the number of vertices with state 2. Check the number of vertices with state 2. The number should be constant."
  },
  {
    "objectID": "docstrings/medyan.chem_newlink_2mon--e4f84fe5cfa9a727.html",
    "href": "docstrings/medyan.chem_newlink_2mon--e4f84fe5cfa9a727.html",
    "title": "MEDYAN.chem_newlink_2mon!",
    "section": "",
    "text": "chem_newlink_2mon!(c::Context, ltid::Int, endnames::Pair{MonomerName,MonomerName}, link_2mon_state::Link2MonState;\n    new_lid::Union{Nothing,Int64} = nothing,\n)::Int64\n\nchem_newlink_2mon!(c::Context, ltid::Int, endnames::Pair{MonomerName,MonomerName};\n    changedchemstate = (;),\n    changedmechstate = (;),\n    is_minimized = c.link_2mon_data[ltid].params.defaultstate.is_minimized,\n    new_lid::Union{Nothing,Int64} = nothing,\n)::Int64\nAdd a new link_2mon with type id ltid between monemers endnames.\nReturn the link_2mon id.\nError if a link_2mon of the same type links the same monomers in the same order.\nIf the link2mon state isn’t provided, c.link*2mon*data[ltid].params.defaultstate is new link2mon’s state, optionally modified by the changedchemstate, changedmechstate, and is_minimized keyword arguments.\nKeyword arguments changedchemstate and changedmechstate are namedtuples that shadow fields from the default chemstate and mechstate for the new link_2mon.\nKeyword argument is_minimized can be used to set the new link*2mon’s is*minimized state.\nKeyword argument new_lid can be optionally used to set the new link_2mon’s id, if this id is currently used, error.\n\n\nlid = chem_newlink_2mon!(c, g.ltid, minusname=&gt;plusname;\n        changedmechstate = (L0 = dist,),\n        changedchemstate = (numHeads = rand(g.numHeadsMin:g.numHeadsMax),),\n    )"
  },
  {
    "objectID": "docstrings/medyan.chem_newlink_2mon--e4f84fe5cfa9a727.html#tuple-medyan.context--int64--pair-medyan.monomername--medyan.monomername---medyan.link2monstate--af1ad00950bd174d",
    "href": "docstrings/medyan.chem_newlink_2mon--e4f84fe5cfa9a727.html#tuple-medyan.context--int64--pair-medyan.monomername--medyan.monomername---medyan.link2monstate--af1ad00950bd174d",
    "title": "MEDYAN.chem_newlink_2mon!",
    "section": "",
    "text": "chem_newlink_2mon!(c::Context, ltid::Int, endnames::Pair{MonomerName,MonomerName}, link_2mon_state::Link2MonState;\n    new_lid::Union{Nothing,Int64} = nothing,\n)::Int64\n\nchem_newlink_2mon!(c::Context, ltid::Int, endnames::Pair{MonomerName,MonomerName};\n    changedchemstate = (;),\n    changedmechstate = (;),\n    is_minimized = c.link_2mon_data[ltid].params.defaultstate.is_minimized,\n    new_lid::Union{Nothing,Int64} = nothing,\n)::Int64\nAdd a new link_2mon with type id ltid between monemers endnames.\nReturn the link_2mon id.\nError if a link_2mon of the same type links the same monomers in the same order.\nIf the link2mon state isn’t provided, c.link*2mon*data[ltid].params.defaultstate is new link2mon’s state, optionally modified by the changedchemstate, changedmechstate, and is_minimized keyword arguments.\nKeyword arguments changedchemstate and changedmechstate are namedtuples that shadow fields from the default chemstate and mechstate for the new link_2mon.\nKeyword argument is_minimized can be used to set the new link*2mon’s is*minimized state.\nKeyword argument new_lid can be optionally used to set the new link_2mon’s id, if this id is currently used, error.\n\n\nlid = chem_newlink_2mon!(c, g.ltid, minusname=&gt;plusname;\n        changedmechstate = (L0 = dist,),\n        changedchemstate = (numHeads = rand(g.numHeadsMin:g.numHeadsMax),),\n    )"
  },
  {
    "objectID": "docstrings/medyan.chem_newlink_2mon--e4f84fe5cfa9a727.html#example",
    "href": "docstrings/medyan.chem_newlink_2mon--e4f84fe5cfa9a727.html#example",
    "title": "MEDYAN.chem_newlink_2mon!",
    "section": "",
    "text": "lid = chem_newlink_2mon!(c, g.ltid, minusname=&gt;plusname;\n        changedmechstate = (L0 = dist,),\n        changedchemstate = (numHeads = rand(g.numHeadsMin:g.numHeadsMax),),\n    )"
  },
  {
    "objectID": "docstrings/medyan.minimize_energy--84c4aeab5457d3ee.html",
    "href": "docstrings/medyan.minimize_energy--84c4aeab5457d3ee.html",
    "title": "MEDYAN.minimize_energy!",
    "section": "",
    "text": "minimize_energy!(c::Context)::MinimizeEnergyResults\nMinimize mechanical energy of the context.\n\n\n\ncheck_closest_cylinders::Bool=true:\n\nIf true, the function will warn if two cylinders get too close during minimization.\n\nbrownian_motion_time::Float64=Inf: This parameter is used to simulate the effect\n\nof Brownian motion over a certain period of time in seconds. It is currently experimental. By default, the effect of Brownian motion is ignored.\n\ng_tol::Union{Float64, Nothing}=nothing: Overshadow the value of g_tol in c\n\nThis represents the acceptable maximum residual force on any degree of freedom in pN."
  },
  {
    "objectID": "docstrings/medyan.minimize_energy--84c4aeab5457d3ee.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.minimize_energy--84c4aeab5457d3ee.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.minimize_energy!",
    "section": "",
    "text": "minimize_energy!(c::Context)::MinimizeEnergyResults\nMinimize mechanical energy of the context.\n\n\n\ncheck_closest_cylinders::Bool=true:\n\nIf true, the function will warn if two cylinders get too close during minimization.\n\nbrownian_motion_time::Float64=Inf: This parameter is used to simulate the effect\n\nof Brownian motion over a certain period of time in seconds. It is currently experimental. By default, the effect of Brownian motion is ignored.\n\ng_tol::Union{Float64, Nothing}=nothing: Overshadow the value of g_tol in c\n\nThis represents the acceptable maximum residual force on any degree of freedom in pN."
  },
  {
    "objectID": "docstrings/medyan.fil_node_positions-618a66637eb50781.html",
    "href": "docstrings/medyan.fil_node_positions-618a66637eb50781.html",
    "title": "MEDYAN.fil_node_positions",
    "section": "",
    "text": "fil_node_positions(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; Vector{StaticArraysCore.SVector{3, Float64}}\nReturn the node positions of the filament"
  },
  {
    "objectID": "docstrings/medyan.fil_node_positions-618a66637eb50781.html#tuple-medyan.context--int64--int64--481ec25ee4de4849",
    "href": "docstrings/medyan.fil_node_positions-618a66637eb50781.html#tuple-medyan.context--int64--int64--481ec25ee4de4849",
    "title": "MEDYAN.fil_node_positions",
    "section": "",
    "text": "fil_node_positions(\n    c::MEDYAN.Context,\n    ftid::Int64,\n    fil_id::Int64\n) -&gt; Vector{StaticArraysCore.SVector{3, Float64}}\nReturn the node positions of the filament"
  },
  {
    "objectID": "docstrings/medyan.chem_addfixedcount--0286edfebf8ea5e6.html",
    "href": "docstrings/medyan.chem_addfixedcount--0286edfebf8ea5e6.html",
    "title": "MEDYAN.chem_addfixedcount!",
    "section": "",
    "text": "chem_addfixedcount!(c::Context, sid, cid, inccount)\nAdd inccount to fixed species id sid in compartment id cid"
  },
  {
    "objectID": "docstrings/medyan.chem_addfixedcount--0286edfebf8ea5e6.html#tuple-medyan.context--any--any--any--3e36a14adf838425",
    "href": "docstrings/medyan.chem_addfixedcount--0286edfebf8ea5e6.html#tuple-medyan.context--any--any--any--3e36a14adf838425",
    "title": "MEDYAN.chem_addfixedcount!",
    "section": "",
    "text": "chem_addfixedcount!(c::Context, sid, cid, inccount)\nAdd inccount to fixed species id sid in compartment id cid"
  },
  {
    "objectID": "docstrings/medyan.newmembrane--a714b4a1c87062be.html",
    "href": "docstrings/medyan.newmembrane--a714b4a1c87062be.html",
    "title": "MEDYAN.newmembrane!",
    "section": "",
    "text": "newmembrane!(c::MEDYAN.Context; type, meshinit)\nAdd a new membrane to the system.\n\n\n\nmeshinit is structure containing mesh shape initialization information, such as a named tuple (vertlist, trilist) containing vertex coordinates and triangle list, MeshInitEllipsoid, MeshInitPlane or a general MeshInitSurfaceFunc."
  },
  {
    "objectID": "docstrings/medyan.newmembrane--a714b4a1c87062be.html#tuple-medyan.context--4896731d1a77eb1c",
    "href": "docstrings/medyan.newmembrane--a714b4a1c87062be.html#tuple-medyan.context--4896731d1a77eb1c",
    "title": "MEDYAN.newmembrane!",
    "section": "",
    "text": "newmembrane!(c::MEDYAN.Context; type, meshinit)\nAdd a new membrane to the system.\n\n\n\nmeshinit is structure containing mesh shape initialization information, such as a named tuple (vertlist, trilist) containing vertex coordinates and triangle list, MeshInitEllipsoid, MeshInitPlane or a general MeshInitSurfaceFunc."
  }
]